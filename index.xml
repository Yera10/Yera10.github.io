<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on 이세상의 모든 노트</title><link>https://yera10.github.io/</link><description>Recent content in Introduction on 이세상의 모든 노트</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://yera10.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://yera10.github.io/docs/mystudy/deep-learning-study/historical_review/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/deep-learning-study/historical_review/</guid><description>&lt;h1 id="historical-review">
 Historical Review
 &lt;a class="anchor" href="#historical-review">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>2012 - AlexNet (패러다임 쇼크!)&lt;/li>
&lt;li>2013 - DQN (알파고를 만든 알고리즘)&lt;/li>
&lt;li>2014 - Encoder/Decoder, Adam&lt;/li>
&lt;li>2015 - GAN, ResNet&lt;/li>
&lt;li>2016 -&lt;/li>
&lt;li>2017 - Transformer (Attention Is All You Need)&lt;/li>
&lt;li>2018 - Bert&lt;/li>
&lt;li>2019 - Big Language Models (GPT-X)&lt;/li>
&lt;li>2020 - Self-Supervised Learning (SimCLR)&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://dennybritz.com/posts/deep-learning-ideas-that-stood-the-test-of-time/">Further Reading and Reference&lt;/a>&lt;/p>
&lt;h2 id="alexnet-2012alexnet">
 &lt;a href="../alexnet">AlexNet (2012)&lt;/a>
 &lt;a class="anchor" href="#alexnet-2012alexnet">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>AlexNet은 딥러닝과 AI 연구의 붐을 일으킨 알고리즘으로 여겨졌다&lt;/li>
&lt;li>Yann LeCun이 개발한 초기 LeNet에 기초한 CNN이다&lt;/li>
&lt;li>알고리즘을 발전시키고, GPU 성능을 통해 기존 방법들 보다 ImageNet 데이터를 분류하는데 훨씬 뛰어난 성능을 보였다.&lt;/li>
&lt;li>neural network이 실제로 작동한다는 것을 증명해낸 것이다.&lt;/li>
&lt;li>또한, Alexnet은 Dropout을 처음 적용한 모델이기도 하다.&lt;/li>
&lt;li>Dropout은 이후 모든 종류의 딥러닝모델의 일반화 성능을 향상시키는데 중요한 요소가 되었다.&lt;/li>
&lt;li>AlexNet의 컨볼루션 레이어, ReLU, max-pooling 아키텍처는 이후 Computer Vision의 표준이 되었습니다.&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://proceedings.neurips.cc/paper_files/paper/2012/file/c399862d3b9d6b76c8436e924a68c45b-Paper.pdf">논문&lt;/a>&lt;/p></description></item><item><title>ccxt 라이브러리 사용</title><link>https://yera10.github.io/docs/mystudy/coin-bot/1_ccxt_api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/coin-bot/1_ccxt_api/</guid><description>&lt;h3 id="1-api-key-발급">
 1. API Key 발급
 &lt;a class="anchor" href="#1-api-key-%eb%b0%9c%ea%b8%89">#&lt;/a>
&lt;/h3>
&lt;p>Upbit 홈페이지 &amp;gt; 우측 하단 Open API &amp;gt; Open API 사용하기&lt;br>
위 경로로 들어가 권한을 선택하고 IP주소를 등록하면 Key를 발급받을 수 있다.&lt;br>
권한은 혹시 해킹당할 수 있을까봐 출금하기, 입금하기만 빼고 모든 권한을 선택했다.
Access Key와 Secret Key를 &lt;code>upbit.key&lt;/code>라는 이름으로 저장해 놓는다.&lt;/p>
&lt;h3 id="2-거래소-객체-생성">
 2. 거래소 객체 생성
 &lt;a class="anchor" href="#2-%ea%b1%b0%eb%9e%98%ec%86%8c-%ea%b0%9d%ec%b2%b4-%ec%83%9d%ec%84%b1">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> ccxt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> pprint
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> pandas &lt;span style="color:#66d9ef">as&lt;/span> pd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># API Key 불러오기&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">&amp;#34;./upbit.key&amp;#34;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lines &lt;span style="color:#f92672">=&lt;/span> f&lt;span style="color:#f92672">.&lt;/span>readlines()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> api_key &lt;span style="color:#f92672">=&lt;/span> lines[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>strip()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> api_secret &lt;span style="color:#f92672">=&lt;/span> lines[&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>strip()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 거래소 객체 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>exchange &lt;span style="color:#f92672">=&lt;/span> ccxt&lt;span style="color:#f92672">.&lt;/span>upbit(config&lt;span style="color:#f92672">=&lt;/span>dict(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiKey &lt;span style="color:#f92672">=&lt;/span> api_key, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secret &lt;span style="color:#f92672">=&lt;/span> api_secret, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enableRateLiit &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(exchange)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>API Key는 잔고조회, 매수, 매도를 사용할 때만 필요했고 현재가 조회나 티커 조회를 할 때는 없어도 됐었다.&lt;/p></description></item><item><title>ccxt 웹소켓 사용</title><link>https://yera10.github.io/docs/mystudy/coin-bot/2_ccxt_websocket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/coin-bot/2_ccxt_websocket/</guid><description>&lt;h2 id="ccxt에서-웹소켓-사용해보기">
 ccxt에서 웹소켓 사용해보기
 &lt;a class="anchor" href="#ccxt%ec%97%90%ec%84%9c-%ec%9b%b9%ec%86%8c%ec%bc%93-%ec%82%ac%ec%9a%a9%ed%95%b4%eb%b3%b4%ea%b8%b0">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> ccxt.pro &lt;span style="color:#66d9ef">as&lt;/span> ccxtpro
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> asyncio
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> pprint
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 실시간 현재가&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exchanage &lt;span style="color:#f92672">=&lt;/span> ccxtpro&lt;span style="color:#f92672">.&lt;/span>upbit()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ticker &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> exchanage&lt;span style="color:#f92672">.&lt;/span>watch_ticker(symbol&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;BTC/KRW&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pprint&lt;span style="color:#f92672">.&lt;/span>pprint(ticker)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>asyncio&lt;span style="color:#f92672">.&lt;/span>run(main())
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>셋팅 및 시작</title><link>https://yera10.github.io/docs/mystudy/hugo-blog/1_%EC%84%A4%EC%B9%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/hugo-blog/1_%EC%84%A4%EC%B9%98/</guid><description>&lt;h2 id="intro">
 Intro
 &lt;a class="anchor" href="#intro">#&lt;/a>
&lt;/h2>
&lt;h3 id="ref">
 Ref
 &lt;a class="anchor" href="#ref">#&lt;/a>
&lt;/h3>
&lt;p>&lt;a href="https://github.com/Integerous/Integerous.github.io">https://github.com/Integerous/Integerous.github.io&lt;/a>&lt;br>
&lt;a href="https://ialy1595.github.io/post/blog-construct-1/">https://ialy1595.github.io/post/blog-construct-1/&lt;/a>&lt;/p>
&lt;p> &lt;/p>
&lt;h2 id="how-to">
 How to
 &lt;a class="anchor" href="#how-to">#&lt;/a>
&lt;/h2>
&lt;h3 id="1-hugo-설치">
 &lt;strong>1. Hugo 설치&lt;/strong>
 &lt;a class="anchor" href="#1-hugo-%ec%84%a4%ec%b9%98">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>&lt;a href="https://github.com/gohugoio/hugo/releases">hugo 공식깃헙&lt;/a>에서 다운로드&lt;br>
윈도우를 사용하고, 추가 기능이 필요할지 몰라 extended 버전인 hugo_extended_0.121.0_windows-amd64을 받았다.&lt;/li>
&lt;li>C:\Hugo\bin 디렉토리 생성해서 다운받은 압축파일 해제&lt;/li>
&lt;li>환경변수에 Hugo 영구적으로 추가
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ setx PATH&lt;span style="color:#f92672">=&lt;/span>%PATH%C:&lt;span style="color:#ae81ff">\H&lt;/span>ugo&lt;span style="color:#ae81ff">\b&lt;/span>in;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>hugo 실행 확인&lt;br>
&lt;code>hugo version&lt;/code> 또는 &lt;code>hugo help&lt;/code> 명령어&lt;/li>
&lt;/ol>
&lt;p> &lt;/p>
&lt;h3 id="2-gihub-레포-셋팅">
 &lt;strong>2. Gihub 레포 셋팅&lt;/strong>
 &lt;a class="anchor" href="#2-gihub-%eb%a0%88%ed%8f%ac-%ec%85%8b%ed%8c%85">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>Blog 저장소 Private으로 생성 (저장소명 다르게해도 됨)&lt;/li>
&lt;li>&lt;code>&amp;lt;USERNAME&amp;gt;.github.io&lt;/code> 저장소 생성&lt;/li>
&lt;li>Blog 레포를 로컬에 clone한다.
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://github.com/&amp;lt;USERNAME&amp;gt;/Blog.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&amp;lt;USERNAME&amp;gt;.github.io를 Blog의 서브모듈로 등록 (public 폴더로)
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git submodule add -b master https://github.com/&amp;lt;USERNAME&amp;gt;/Blog.git public
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;p> &lt;/p></description></item><item><title>AlexNet 논문</title><link>https://yera10.github.io/docs/mystudy/deep-learning-study/paper_alexnet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/deep-learning-study/paper_alexnet/</guid><description>&lt;h1 id="imagenet-classification-with-deep-convolutional-neural-networks">
 ImageNet Classification with Deep Convolutional Neural Networks
 &lt;a class="anchor" href="#imagenet-classification-with-deep-convolutional-neural-networks">#&lt;/a>
&lt;/h1>
&lt;p>&lt;a href="https://proceedings.neurips.cc/paper_files/paper/2012/file/c399862d3b9d6b76c8436e924a68c45b-Paper.pdf">paper&lt;/a>&lt;/p>
&lt;h2 id="abstract">
 Abstract
 &lt;a class="anchor" href="#abstract">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>ImageNet LSVRC-2010 (1,200,000장의 고해상도 이미지들)를 1000개의 클래스로 분류하는 CNN 모델&lt;/li>
&lt;li>기존 SOTA보다 향상된 성능&lt;/li>
&lt;li>6천만개의 파라미터, 65만개의 뉴런으로 이루어져있고, 5개의 Conv-layer와 3개의 FC-layer로 구성되어있다. (최종은 1000-way softmax)&lt;/li>
&lt;li>빠르게 훈련시키기 위해 비포화 뉴런과 GPU 구현을 사용&lt;/li>
&lt;li>FC-layer에서 오버피팅을 줄이기 위해 dropout 방법 적용&lt;/li>
&lt;li>또한, Alexnet의 변형은 ILSVRC-2012에서 오류율 15.3%로 우승한 딥러닝 신경망 아키텍처이다.&lt;/li>
&lt;/ul>
&lt;h2 id="introduction">
 Introduction
 &lt;a class="anchor" href="#introduction">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>이 논문의 기여도
&lt;ul>
&lt;li>ImageNet데이터로 훈련한 CNN모델로 이 데이터셋에 대한 최고의 성능에 달성&lt;/li>
&lt;li>2D conv에 최적화된 GPU 구현과 공개&lt;/li>
&lt;li>성능을 향상시키고 훈련시간을 단축시키는 몇 가지 특징들이 있다 (Section 3)&lt;/li>
&lt;li>오버피팅을 방지하는 몇 가지 기술들 (Section 4)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>이당시 2개의 GTX 580 3GB GPUs로 훈련했을 때, 5~6일 소요됐다.&lt;/li>
&lt;/ul>
&lt;h2 id="dataset-imagenet">
 Dataset: ImageNet
 &lt;a class="anchor" href="#dataset-imagenet">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>약 22,000개의 카테고리로 이루어진 1천5백만개 이상의 라벨이 있는 고해상도 이미지이다.&lt;/li>
&lt;li>top-5 error rate는 뭐지?&lt;/li>
&lt;li>ImageNet은 다양한 해상도의 이미지로 구성되어있지만, AlexNet은 일정한 차원으로 입력해야 하므로, 256x256 고정으로 다운샘플해야 한다.&lt;/li>
&lt;li>직사각형 이미지에 대해서, 짧은 변을 256으로 resize하고, 중앙 256x256을 잘라내는 작업을 했음.&lt;/li>
&lt;/ul>
&lt;h2 id="architecture">
 Architecture
 &lt;a class="anchor" href="#architecture">#&lt;/a>
&lt;/h2>
&lt;p>AlexNet의 아키텍처는 아래와 같이 &lt;!-- raw HTML omitted -->&lt;strong>Conv layer 5 계층 + FC layer 3 계층&lt;/strong>&lt;!-- raw HTML omitted -->으로 구성되어 있고, 4가지 특징을 가지고 있다.&lt;/p></description></item><item><title>컨텐츠 연결</title><link>https://yera10.github.io/docs/mystudy/hugo-blog/2_%EC%BB%A8%ED%85%90%EC%B8%A0%EC%97%B0%EA%B2%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/hugo-blog/2_%EC%BB%A8%ED%85%90%EC%B8%A0%EC%97%B0%EA%B2%B0/</guid><description>&lt;h2 id="git-서브모듈-사용하여-컨텐츠-연결">
 git 서브모듈 사용하여 컨텐츠 연결
 &lt;a class="anchor" href="#git-%ec%84%9c%eb%b8%8c%eb%aa%a8%eb%93%88-%ec%82%ac%ec%9a%a9%ed%95%98%ec%97%ac-%ec%bb%a8%ed%85%90%ec%b8%a0-%ec%97%b0%ea%b2%b0">#&lt;/a>
&lt;/h2>
&lt;p>나는 기존에 깃헙레포를 노트처럼 사용하면서 공부한 내용들을 적어두고 있었다
그래서 그 레포를 블로그에 연결하고자 submodule을 사용했다.&lt;/p>
&lt;h3 id="1-컨텐츠-디렉토리로-이동">
 1. 컨텐츠 디렉토리로 이동
 &lt;a class="anchor" href="#1-%ec%bb%a8%ed%85%90%ec%b8%a0-%eb%94%94%eb%a0%89%ed%86%a0%eb%a6%ac%eb%a1%9c-%ec%9d%b4%eb%8f%99">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cd content/docs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-저장소-submodule로-추가">
 2. 저장소 submodule로 추가
 &lt;a class="anchor" href="#2-%ec%a0%80%ec%9e%a5%ec%86%8c-submodule%eb%a1%9c-%ec%b6%94%ea%b0%80">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git submodule add &lt;span style="color:#f92672">{&lt;/span>저장소의 URL&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3-변경내용-add-commit-push">
 3. 변경내용 add, commit, push
 &lt;a class="anchor" href="#3-%eb%b3%80%ea%b2%bd%eb%82%b4%ec%9a%a9-add-commit-push">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cd Blog/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git add .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git commit -m &lt;span style="color:#e6db74">&amp;#34;{커밋메시지}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>AlexNet 구현 (Pytorch)</title><link>https://yera10.github.io/docs/mystudy/deep-learning-study/alexnet-in-pytorch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/deep-learning-study/alexnet-in-pytorch/</guid><description>&lt;h1 id="alexnet-구현">
 Alexnet 구현
 &lt;a class="anchor" href="#alexnet-%ea%b5%ac%ed%98%84">#&lt;/a>
&lt;/h1>
&lt;p>최대한 이해한대로 구현해보았다. 학습해서 결과를 보는 것보다는 모델 구현에 중점을 두어 학습과정은 다소 빈약하다.&lt;/p>
&lt;h2 id="라이브러리-호출">
 라이브러리 호출
 &lt;a class="anchor" href="#%eb%9d%bc%ec%9d%b4%eb%b8%8c%eb%9f%ac%eb%a6%ac-%ed%98%b8%ec%b6%9c">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> torch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> torchvision
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> torch.nn &lt;span style="color:#66d9ef">as&lt;/span> nn
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> torch.optim &lt;span style="color:#66d9ef">as&lt;/span> optim
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> torchvision &lt;span style="color:#f92672">import&lt;/span> transforms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> numpy &lt;span style="color:#66d9ef">as&lt;/span> np
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> ssl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ssl&lt;span style="color:#f92672">.&lt;/span>_create_default_https_context &lt;span style="color:#f92672">=&lt;/span> ssl&lt;span style="color:#f92672">.&lt;/span>_create_unverified_context
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="data-augmentation">
 Data Augmentation
 &lt;a class="anchor" href="#data-augmentation">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Augmentation&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>train_transfrom &lt;span style="color:#f92672">=&lt;/span> transforms&lt;span style="color:#f92672">.&lt;/span>Compose([
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transforms&lt;span style="color:#f92672">.&lt;/span>Resize((&lt;span style="color:#ae81ff">227&lt;/span>, &lt;span style="color:#ae81ff">227&lt;/span>)), 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transforms&lt;span style="color:#f92672">.&lt;/span>ToTensor(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>test_transform &lt;span style="color:#f92672">=&lt;/span> transforms&lt;span style="color:#f92672">.&lt;/span>Compose([
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transforms&lt;span style="color:#f92672">.&lt;/span>Resize((&lt;span style="color:#ae81ff">227&lt;/span>, &lt;span style="color:#ae81ff">227&lt;/span>)),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transforms&lt;span style="color:#f92672">.&lt;/span>RandomHorizontalFlip(&lt;span style="color:#ae81ff">0.5&lt;/span>), 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transforms&lt;span style="color:#f92672">.&lt;/span>ToTensor(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>아래 데이터에서 나오겠지만, ImageNet 데이터는 너무 커서 CIFAR-100 데이터로 대체했다. 그래서 ImageNet과는 다르게 CIFAR-100은 32×32라 227×227로 resize 해주는 과정이 필요했다. (여기서부터 학습시킬 의지를 잃었다.) 그렇기 때문에 이미지에서 224×224 패치를 추출하는 방법은 사용하지 못했다.&lt;br>
그리고, RGB 뭐 방법은 이해를 못해서 구현을 못했다. 나중에 해봐야지..&lt;/p></description></item><item><title>자동 업로드</title><link>https://yera10.github.io/docs/mystudy/hugo-blog/3_%EC%9E%90%EB%8F%99%EC%97%85%EB%A1%9C%EB%93%9C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/hugo-blog/3_%EC%9E%90%EB%8F%99%EC%97%85%EB%A1%9C%EB%93%9C/</guid><description>&lt;h2 id="github-action을-사용하여-컨텐츠-업로드-자동화하기">
 Github Action을 사용하여 컨텐츠 업로드 자동화하기
 &lt;a class="anchor" href="#github-action%ec%9d%84-%ec%82%ac%ec%9a%a9%ed%95%98%ec%97%ac-%ec%bb%a8%ed%85%90%ec%b8%a0-%ec%97%85%eb%a1%9c%eb%93%9c-%ec%9e%90%eb%8f%99%ed%99%94%ed%95%98%ea%b8%b0">#&lt;/a>
&lt;/h2>
&lt;h3 id="ref">
 ref
 &lt;a class="anchor" href="#ref">#&lt;/a>
&lt;/h3>
&lt;p>&lt;a href="https://stackoverflow.com/questions/64407333/using-github-actions-to-automatically-update-the-repos-submodules">코드인용&lt;/a>&lt;br>
action 공부&lt;br>
&lt;a href="https://somaz.tistory.com/213#google_vignette">https://somaz.tistory.com/213#google_vignette&lt;/a>&lt;br>
&lt;a href="https://fe-developers.kakaoent.com/2022/220106-github-actions/">https://fe-developers.kakaoent.com/2022/220106-github-actions/&lt;/a>&lt;br>
&lt;a href="https://velog.io/@adam2/Github-Action-%EC%A3%BC%EC%9A%94-%EB%AC%B8%EB%B2%95">https://velog.io/@adam2/Github-Action-%EC%A3%BC%EC%9A%94-%EB%AC%B8%EB%B2%95&lt;/a>&lt;br>
&lt;a href="https://kotlinworld.com/400">https://kotlinworld.com/400&lt;/a>&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="1-토큰-발급">
 1. 토큰 발급
 &lt;a class="anchor" href="#1-%ed%86%a0%ed%81%b0-%eb%b0%9c%ea%b8%89">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>&lt;a href="https://github.com">https://github.com&lt;/a> 에서 우측 상단 프로필 클릭&lt;/li>
&lt;li>Settings 클릭&lt;/li>
&lt;li>좌측 바 하단의 Developer Settings 클릭&lt;/li>
&lt;li>Personal access tockens 클릭&lt;/li>
&lt;li>Generate new token 클릭&lt;/li>
&lt;li>블로그 관련 모든 레포에 대한 권한을 부여한 토큰 생성&lt;/li>
&lt;li>토큰 복사&lt;/li>
&lt;/ol>
&lt;p> &lt;/p>
&lt;h3 id="2-secret-등록">
 2. Secret 등록
 &lt;a class="anchor" href="#2-secret-%eb%93%b1%eb%a1%9d">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>github에서 Blog 저장소 접속&lt;/li>
&lt;li>상단 바에서 Settings 클릭&lt;/li>
&lt;li>좌측 네비게이션 바에서 Secrets and variables &amp;gt; Actions 클릭&lt;/li>
&lt;li>New repository secret 클릭&lt;/li>
&lt;li>NAME은 TOKEN으로 Secret에는 복사한 토큰을 붙여넣기 하여 등록&lt;/li>
&lt;li>서브모듈 저장소들에도 위와 같은 방법으로 Secret 등록&lt;/li>
&lt;/ol>
&lt;p> &lt;/p></description></item><item><title>파이썬 문법</title><link>https://yera10.github.io/docs/mystudy/basic/python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/basic/python/</guid><description>&lt;h2 id="모듈">
 모듈
 &lt;a class="anchor" href="#%eb%aa%a8%eb%93%88">#&lt;/a>
&lt;/h2>
&lt;p>모듈(module)이란?&lt;/p>
&lt;ul>
&lt;li>파이썬 소스코드 파일을 모듈이라고 한다.&lt;/li>
&lt;li>예를 들어 csv.py 파일이 있다면 이를 csv 모듈이라고 부른다&lt;/li>
&lt;/ul>
&lt;h2 id="패키지">
 패키지
 &lt;a class="anchor" href="#%ed%8c%a8%ed%82%a4%ec%a7%80">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>일반적으로 다른 프로그래밍 언어에서는 모듈과 패키지를 Library라고 부른다.&lt;/li>
&lt;li>모듈: 파이썬 단일 파일&lt;/li>
&lt;li>패키지: 디렉토리에 여러 파이썬 모듈이 있는 구조&lt;/li>
&lt;/ul>
&lt;h2 id="클래스">
 클래스
 &lt;a class="anchor" href="#%ed%81%b4%eb%9e%98%ec%8a%a4">#&lt;/a>
&lt;/h2>
&lt;p>클래스는 왜 사용할까?&lt;/p>
&lt;ul>
&lt;li>새로운 타입(type)을 만들기 위해 사용한다&lt;/li>
&lt;li>&lt;strong>데이터&lt;/strong>와 데이터를 처리하는 &lt;strong>함수&lt;/strong>를 묶어서 Type이라고 하며, Class를 만들어 나에게 맞는 Type을 구현&lt;/li>
&lt;/ul>
&lt;p>용어정리&lt;/p>
&lt;ul>
&lt;li>클래스는 붕어빵 틀&lt;/li>
&lt;li>객체, 오브젝트, 인스턴스는 붕어빵틀로부터 생성된 붕어빵&lt;/li>
&lt;/ul>
&lt;h2 id="인스턴스">
 인스턴스
 &lt;a class="anchor" href="#%ec%9d%b8%ec%8a%a4%ed%84%b4%ec%8a%a4">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>클래스가 정의됐다면 해당 타입의 인스턴스(객체)를 생성 가능&lt;/li>
&lt;li>인스턴스를 생성하면, 객체 공간이 할당됨&lt;/li>
&lt;li>객체 공간에 있는 변수를 속성(property)라고 부른다 (ex.&lt;code>붕어빵.앙꼬 = 슈크림&lt;/code>)&lt;/li>
&lt;/ul>
&lt;h2 id="메서드">
 메서드
 &lt;a class="anchor" href="#%eb%a9%94%ec%84%9c%eb%93%9c">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>클래스는 함수를 포함할 수 있으며, 그 함수를 메서드(method)라고 부른다&lt;/li>
&lt;li>메소드는 클래스 공간에 저장된다 (인스턴스는 객체 공간에 저장됨)&lt;/li>
&lt;li>메소드는 여러 객체에 의해 공유됨&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://youtu.be/urQYP92JPxE?si=-8UgKRr2UpfErQOF">참고영상&lt;/a>&lt;/p></description></item><item><title>DQN 논문</title><link>https://yera10.github.io/docs/mystudy/deep-learning-study/paper_dqn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/deep-learning-study/paper_dqn/</guid><description>&lt;h1 id="playing-atari-with-deep-reinforcement-learning">
 Playing Atari with Deep Reinforcement Learning
 &lt;a class="anchor" href="#playing-atari-with-deep-reinforcement-learning">#&lt;/a>
&lt;/h1>
&lt;p>&lt;a href="https://arxiv.org/abs/1312.5602">paper&lt;/a> (2013)&lt;/p>
&lt;h2 id="abstract">
 Abstract
 &lt;a class="anchor" href="#abstract">#&lt;/a>
&lt;/h2>
&lt;p>We present the first deep learning model to successfully learn control policies directly from high-dimensional sensory input using reinforcement learning.&lt;/p>
&lt;p>The model is a convolutional neural network, trained with a variant of Q-learning, whose input is raw pixels and whose output is a value function estimating future rewards. &lt;br>
모델은 Q-learing으로 변형 학습된 CNN인데,
raw pixel을 입력으로 받고, 미래 보상을 추정하는 value function 이다.&lt;/p></description></item><item><title>AI, Math</title><link>https://yera10.github.io/docs/mystudy/deep-learning-study/dl_aimath/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/deep-learning-study/dl_aimath/</guid><description>&lt;h1 id="ai와-math">
 AI와 Math
 &lt;a class="anchor" href="#ai%ec%99%80-math">#&lt;/a>
&lt;/h1>
&lt;h3 id="나중에-시간이-있다면-볼만한-책과-강의">
 나중에 시간이 있다면 볼만한 책과 강의
 &lt;a class="anchor" href="#%eb%82%98%ec%a4%91%ec%97%90-%ec%8b%9c%ea%b0%84%ec%9d%b4-%ec%9e%88%eb%8b%a4%eb%a9%b4-%eb%b3%bc%eb%a7%8c%ed%95%9c-%ec%b1%85%ea%b3%bc-%ea%b0%95%ec%9d%98">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>책: &lt;a href="https://mml-book.github.io/">Mathematics for Machine Learning&lt;/a>&lt;/li>
&lt;li>책: &lt;a href="https://ko.d2l.ai/index.html">Dive into Deep Learning&lt;/a>&lt;/li>
&lt;li>수학강의: &lt;a href="https://ko.khanacademy.org/">칸아카데미&lt;/a>&lt;/li>
&lt;li>수학영상: &lt;a href="https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw">3Blue1Brown(Youtube)&lt;/a>&lt;/li>
&lt;li>수학강의: &lt;a href="https://www.coursera.org/specializations/mathematics-machine-learning">Mathematics for Machine Learning&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.kmooc.kr/courses/course-v1:SKKUk&amp;#43;SKKU_45&amp;#43;2021_T1/about">인공지능을 위한 기초수학 입문(KMOOC)&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>PyTorch</title><link>https://yera10.github.io/docs/mystudy/deep-learning-study/dl_pytorch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/deep-learning-study/dl_pytorch/</guid><description>&lt;h3 id="pytorch-further-reading">
 PyTorch Further Reading
 &lt;a class="anchor" href="#pytorch-further-reading">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Comparison_of_deep_learning_software">딥러닝 프레임워크 비교&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wikidocs.net/book/2788">PyTorch로 시작하는 딥러닝 입문&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pytorch.org/tutorials/">PyTorch 튜토리얼&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pytorch.org/tutorials/beginner/pytorch_with_examples">PyTorch Autograd 튜토리얼&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pytorch.org/tutorials/beginner/blitz/autograd_tutorial">Autograd 튜토리얼&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pytorch.org/tutorials/beginner/examples_autograd/two_layer_net_autograd.html">Tensor와 Autograd 튜토리얼&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://towardsdatascience.com/linear-regression-with-pytorch-eb6dedead817">PyTorch로 Linear Regression 하기&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/dair-ai/implementing-a-logistic-regression-model-from-scratch-with-pytorch-24ea062cd856">Pytorch로 Logistic Regression 하기&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pytorch.org/tutorials/intermediate/ddp_tutorial.html">DDP(Distributed Data Parallel) 튜토리얼&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="pytorch-template">
 Pytorch Template
 &lt;a class="anchor" href="#pytorch-template">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://github.com/victoresque/pytorch-template">https://github.com/victoresque/pytorch-template&lt;/a>&lt;/li>
&lt;li>Pytorch Template2 &lt;a href="https://github.com/FrancescoSaverioZuppichini/PyTorch-Deep-Learning-Template">https://github.com/FrancescoSaverioZuppichini/PyTorch-Deep-Learning-Template&lt;/a>&lt;/li>
&lt;li>Pytorch Lightning Template &lt;a href="https://github.com/Lightning-AI/deep-learning-project-template">https://github.com/Lightning-AI/deep-learning-project-template&lt;/a>&lt;/li>
&lt;li>Pytorch Lightning &lt;a href="https://www.pytorchlightning.ai/">https://www.pytorchlightning.ai/&lt;/a>&lt;/li>
&lt;li>Pytorch Lightning + NNI Boilerplate &lt;a href="https://github.com/davinnovation/pytorch-boilerplate">https://github.com/davinnovation/pytorch-boilerplate&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="colab과-ngrok-사용하기">
 colab과 ngrok 사용하기
 &lt;a class="anchor" href="#colab%ea%b3%bc-ngrok-%ec%82%ac%ec%9a%a9%ed%95%98%ea%b8%b0">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>local에서 colab cloud에 접근할 수 있는 tool?
colab이라는 게 결국 컴퓨터잖아? 여기에 접속할 수 있음. 원격지에 있는 컴퓨터에 !
우리가 컴퓨터 환경을 쓰듯이 똑같이 쓸 수 있는데 , 그걸지원해주는 도구 중 하나가 ngrok&lt;/li>
&lt;li>가입 후, 토큰 필요&lt;/li>
&lt;li>코랩(클라우드)에 colab-ssh 설치 필요
( 내 원격 컴퓨터(colab)에 외부에서 ssh로 접속할 수있는 프로그램을 설치 )
외부에서 ssh로 접근할 수 있도록 해줌.&lt;/li>
&lt;li>vscode에서 확장프로그램으로 remote - ssh 설치 필요&lt;/li>
&lt;/ul>
&lt;h3 id="공부할-것">
 공부할 것
 &lt;a class="anchor" href="#%ea%b3%b5%eb%b6%80%ed%95%a0-%ea%b2%83">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>튜닝 도구 Ray 사용법 익히기 (딥러닝 뿐만 아니라 ML 알고리즘, RL, python의 일반적인 병렬처리에서도 많이 사용)&lt;/li>
&lt;/ul></description></item><item><title>Output Size 계산</title><link>https://yera10.github.io/docs/mystudy/deep-learning-study/outputsize/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/deep-learning-study/outputsize/</guid><description>&lt;h1 id="convolutional-layer에서-출력-크기-계산하기">
 Convolutional Layer에서 출력 크기 계산하기
 &lt;a class="anchor" href="#convolutional-layer%ec%97%90%ec%84%9c-%ec%b6%9c%eb%a0%a5-%ed%81%ac%ea%b8%b0-%ea%b3%84%ec%82%b0%ed%95%98%ea%b8%b0">#&lt;/a>
&lt;/h1>
&lt;p>
&lt;link rel="stylesheet" href="https://yera10.github.io/katex/katex.min.css" />
&lt;script defer src="https://yera10.github.io/katex/katex.min.js">&lt;/script>
&lt;script defer src="https://yera10.github.io/katex/auto-render.min.js" onload="renderMathInElement(document.body);">&lt;/script>&lt;span>
 \[OH = \frac{H &amp;#43; 2P - FH}{S} &amp;#43; 1\]
&lt;/span>

&lt;span>
 \[OW = \frac{W &amp;#43; 2P - FW}{S}&amp;#43;1\]
&lt;/span>
&lt;/p>
&lt;ul>
&lt;li>OH, OW: 출력될 피처맵의 높이(height), 너비(width)&lt;/li>
&lt;li>H, W: 입력되는 이미지(또는 피처맵)의 높이(height), 너비(width)&lt;/li>
&lt;li>P: 패딩 사이즈&lt;/li>
&lt;li>FH, FW: 필터(커널)의 높이, 너비&lt;/li>
&lt;li>S: stride 사이즈&lt;/li>
&lt;/ul></description></item><item><title/><link>https://yera10.github.io/docs/memo/commands/etc/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/memo/commands/etc/docker/</guid><description>&lt;h3 id="docker-버전-확인">
 docker 버전 확인
 &lt;a class="anchor" href="#docker-%eb%b2%84%ec%a0%84-%ed%99%95%ec%9d%b8">#&lt;/a>
&lt;/h3>
&lt;pre tabindex="0">&lt;code>docker -v
&lt;/code>&lt;/pre>&lt;h3 id="docker-image-검색-및-설치">
 docker image 검색 및 설치
 &lt;a class="anchor" href="#docker-image-%ea%b2%80%ec%83%89-%eb%b0%8f-%ec%84%a4%ec%b9%98">#&lt;/a>
&lt;/h3>
&lt;pre tabindex="0">&lt;code>docker search ubuntu

docker pull ubuntu:20.04
&lt;/code>&lt;/pre>&lt;h3 id="컨테이너-생성-및-실행">
 컨테이너 생성 및 실행
 &lt;a class="anchor" href="#%ec%bb%a8%ed%85%8c%ec%9d%b4%eb%84%88-%ec%83%9d%ec%84%b1-%eb%b0%8f-%ec%8b%a4%ed%96%89">#&lt;/a>
&lt;/h3>
&lt;pre tabindex="0">&lt;code>docker run -it --name &amp;lt;이름&amp;gt; &amp;lt;Image이름&amp;gt; /bin/bash
&lt;/code>&lt;/pre>&lt;h3 id="컨테이너-목록-확인">
 컨테이너 목록 확인
 &lt;a class="anchor" href="#%ec%bb%a8%ed%85%8c%ec%9d%b4%eb%84%88-%eb%aa%a9%eb%a1%9d-%ed%99%95%ec%9d%b8">#&lt;/a>
&lt;/h3>
&lt;pre tabindex="0">&lt;code>docker ps --all
&lt;/code>&lt;/pre></description></item><item><title/><link>https://yera10.github.io/docs/memo/commands/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/memo/commands/readme/</guid><description>&lt;h1 id="git-관련">
 Git 관련
 &lt;a class="anchor" href="#git-%ea%b4%80%eb%a0%a8">#&lt;/a>
&lt;/h1>
&lt;p>&lt;a href="Git/cancel.md">commit 취소&lt;/a>&lt;br>
&lt;a href="Git/credential.md">credentail 관련&lt;/a>&lt;br>
&lt;a href="Git/clone.md">clone 관련&lt;/a>&lt;br>
&lt;a href="Git/Initial_setup.md">최초 설정 관련&lt;/a>&lt;/p>
&lt;h1 id="linux">
 Linux
 &lt;a class="anchor" href="#linux">#&lt;/a>
&lt;/h1>
&lt;p>&lt;a href="Linux/file_dir.md">파일 생성/이동/복사/삭제&lt;/a>&lt;br>
&lt;a href="Linux/background.md">백그라운드 관련 명령어&lt;/a>&lt;br>
&lt;a href="Linux/screen.md">Ubuntu Screen 명령어&lt;/a>&lt;br>
&lt;a href="Linux/gpu.md">GPU 관련&lt;/a>&lt;br>
&lt;a href="zip_tar_gz.md">압축해제&lt;/a>&lt;/p>
&lt;h1 id="conda">
 conda
 &lt;a class="anchor" href="#conda">#&lt;/a>
&lt;/h1>
&lt;p>&lt;a href="conda/virtual_env.md">가상환경 관련&lt;/a>&lt;/p>
&lt;h1 id="poetry">
 Poetry
 &lt;a class="anchor" href="#poetry">#&lt;/a>
&lt;/h1>
&lt;p>&lt;a href="Poetry/poetry_start.md">Poetry 시작하기&lt;/a>&lt;br>
&lt;a href="Poetry/virtual_env.md">가상환경 관련&lt;/a>&lt;br>
&lt;a href="Poetry/dependency.md">의존성 관련&lt;/a>&lt;br>
&lt;a href="Poetry/export.md">내보내기(requirements.txt)&lt;/a>&lt;/p>
&lt;h1 id="기타">
 기타
 &lt;a class="anchor" href="#%ea%b8%b0%ed%83%80">#&lt;/a>
&lt;/h1>
&lt;p>&lt;a href="Etc/python-venv.md">python3의 venv 사용법&lt;/a>&lt;br>
&lt;a href="Etc/python-server.md">python3 서버열기&lt;/a>&lt;br>
&lt;a href="Etc/python-parameter.md">python의 인자값 받기&lt;/a>&lt;br>
&lt;a href="Etc/docker.md">Docker 명령어&lt;/a>&lt;br>
&lt;a href="Etc/vscode_shortcuts.md">VSCode 단축키&lt;/a>&lt;br>
&lt;a href="Etc/terminal_theme.md">터미널 테마&lt;/a>&lt;/p></description></item><item><title/><link>https://yera10.github.io/docs/memo/pytorch-study/nn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/memo/pytorch-study/nn/</guid><description>&lt;h1 id="torchnn">
 torch.nn
 &lt;a class="anchor" href="#torchnn">#&lt;/a>
&lt;/h1>
&lt;p>&lt;a href="https://pytorch.org/docs/stable/nn.html">공식문서&lt;/a>&lt;/p>
&lt;h2 id="convolutional-layers">
 Convolutional Layers
 &lt;a class="anchor" href="#convolutional-layers">#&lt;/a>
&lt;/h2>
&lt;h3 id="conv1d-conv2d-conv3d-차이">
 Conv1d, Conv2d, Conv3d 차이
 &lt;a class="anchor" href="#conv1d-conv2d-conv3d-%ec%b0%a8%ec%9d%b4">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://medium.com/@parkie0517/3d-convolution-%EC%99%84%EC%A0%84-%EC%A0%95%EB%B3%B5%ED%95%98%EA%B8%B0-using-pytorch-conv3d-4fab52c527d6">3D Convolution Ref&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leeejihyun.tistory.com/37">Conv1d, Conv2d, Conv3d 차이 설명&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://yera10.github.io/docs/mystudy/algorithm-note/part2/3_%EA%B7%B8%EB%A6%AC%EB%94%94/1%EC%9D%B4%EB%90%A0%EB%95%8C%EA%B9%8C%EC%A7%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part2/3_%EA%B7%B8%EB%A6%AC%EB%94%94/1%EC%9D%B4%EB%90%A0%EB%95%8C%EA%B9%8C%EC%A7%80/</guid><description>&lt;h1 id="1이-될-때까지">
 1이 될 때까지
 &lt;a class="anchor" href="#1%ec%9d%b4-%eb%90%a0-%eb%95%8c%ea%b9%8c%ec%a7%80">#&lt;/a>
&lt;/h1>
&lt;h3 id="input">
 INPUT
 &lt;a class="anchor" href="#input">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>2 &amp;lt;= N &amp;lt;= 100,000&lt;/li>
&lt;li>2 &amp;lt;= K &amp;lt;= 100,000&lt;/li>
&lt;li>N &amp;gt;= K&lt;/li>
&lt;/ul>
&lt;h3 id="output">
 OUTPUT
 &lt;a class="anchor" href="#output">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>N이 1이 될 때까지 수행해야 하는 과정의 최소 횟수 출력&lt;/li>
&lt;/ul>
&lt;h3 id="rule">
 Rule
 &lt;a class="anchor" href="#rule">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>둘 중 하나의 과정을 반복적으로 수행&lt;/li>
&lt;li>2번 과정은 N이 K로 나누어 떨어질 때만 선택 가능&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>N에서 1을 뺀다.&lt;/li>
&lt;li>N을 K로 나눈다.&lt;/li>
&lt;/ol>
&lt;h3 id="example">
 Example
 &lt;a class="anchor" href="#example">#&lt;/a>
&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">입력&lt;/th>
 &lt;th style="text-align: left">출력&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">25 5&lt;/td>
 &lt;td style="text-align: left">2&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">17 4&lt;/td>
 &lt;td style="text-align: left">3&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="my-solution">
 &lt;strong>My Solution&lt;/strong>
 &lt;a class="anchor" href="#my-solution">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>2번이 가능하면 2번을 수행하는 게 가장 빠른 방법&lt;/li>
&lt;li>연상되는 이유는 더 크게 줄어들기 때문에&lt;/li>
&lt;li>1번을 선택했을 때, 2번보다 빠르려면, 1번을 수행한 수가 K로 나누어 떨어질 때 =&amp;gt; 그러려면 K가 1이어야 한다? =&amp;gt; 하지만 $K&amp;gt;=2$ =&amp;gt; 불가능! 무조건 2번 먼저 수행&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># INPUT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>n, k &lt;span style="color:#f92672">=&lt;/span> map(int, input()&lt;span style="color:#f92672">.&lt;/span>split())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># SOLUTION&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">solution&lt;/span>(n, k):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> n &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> n &lt;span style="color:#f92672">%&lt;/span> k &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#f92672">//=&lt;/span> k
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#f92672">-=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> res
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># OUTPUT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(solution(n, k))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="정답코드">
 정답코드
 &lt;a class="anchor" href="#%ec%a0%95%eb%8b%b5%ec%bd%94%eb%93%9c">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>n, k &lt;span style="color:#f92672">=&lt;/span> map(int, input()&lt;span style="color:#f92672">.&lt;/span>split())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># SOLUTION&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">solution&lt;/span>(n, k):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> n &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> n &lt;span style="color:#f92672">%&lt;/span> k &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#f92672">//=&lt;/span> k
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#f92672">+=&lt;/span> (n &lt;span style="color:#f92672">%&lt;/span> k)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#f92672">-=&lt;/span> (n &lt;span style="color:#f92672">%&lt;/span> k)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> res
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># OUTPUT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(solution(n, k))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://yera10.github.io/docs/mystudy/algorithm-note/part2/3_%EA%B7%B8%EB%A6%AC%EB%94%94/%EC%88%AB%EC%9E%90%EC%B9%B4%EB%93%9C%EA%B2%8C%EC%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part2/3_%EA%B7%B8%EB%A6%AC%EB%94%94/%EC%88%AB%EC%9E%90%EC%B9%B4%EB%93%9C%EA%B2%8C%EC%9E%84/</guid><description>&lt;h1 id="숫자-카드-게임">
 숫자 카드 게임
 &lt;a class="anchor" href="#%ec%88%ab%ec%9e%90-%ec%b9%b4%eb%93%9c-%ea%b2%8c%ec%9e%84">#&lt;/a>
&lt;/h1>
&lt;h3 id="input">
 Input
 &lt;a class="anchor" href="#input">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>N, M : 숫자카드들의 행, 열의 개수, 첫째줄에 주어짐&lt;/li>
&lt;li>1 &amp;lt;= N, M &amp;lt;= 100&lt;/li>
&lt;li>각 카드에 적힌 숫자들, 둘째줄부터 주어짐&lt;/li>
&lt;li>1 &amp;lt;= 각 숫자 &amp;lt;= 10,000&lt;/li>
&lt;/ul>
&lt;h3 id="output">
 Output
 &lt;a class="anchor" href="#output">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>게임의 룰에 맞게 선택한 카드에 적힌 숫자&lt;/li>
&lt;/ul>
&lt;h3 id="rule">
 Rule
 &lt;a class="anchor" href="#rule">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>숫자카드들이 N x M 형태로 놓여있음&lt;/li>
&lt;li>뽑고자 하는 카드가 포함되어 있는 행 선택&lt;/li>
&lt;li>선택된 행에서 가장 작은 숫자카드를 뽑음&lt;/li>
&lt;li>어떤 행을 선택해야 가장 높은 숫자의 카드를 뽑을 수 있을까?&lt;/li>
&lt;/ol>
&lt;h3 id="example">
 Example
 &lt;a class="anchor" href="#example">#&lt;/a>
&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">입력&lt;/th>
 &lt;th style="text-align: left">출력&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">3 3 &lt;!-- raw HTML omitted --> 3 1 2 &lt;!-- raw HTML omitted --> 4 1 4 &lt;!-- raw HTML omitted --> 2 2 2&lt;/td>
 &lt;td style="text-align: left">2&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">2 4 &lt;!-- raw HTML omitted --> 7 3 1 8 &lt;!-- raw HTML omitted --> 3 3 3 4&lt;/td>
 &lt;td style="text-align: left">3&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="my-solution">
 &lt;strong>My Solution&lt;/strong>
 &lt;a class="anchor" href="#my-solution">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>행의 최솟값들 중 최댓값 출력&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># INPUT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>N, M &lt;span style="color:#f92672">=&lt;/span> map(int, input()&lt;span style="color:#f92672">.&lt;/span>split())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(N):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr&lt;span style="color:#f92672">.&lt;/span>append( list(map(int, input()&lt;span style="color:#f92672">.&lt;/span>split())) )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># SOLUTION&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">solution&lt;/span>(N, M, arr):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> max([min(a) &lt;span style="color:#66d9ef">for&lt;/span> a &lt;span style="color:#f92672">in&lt;/span> arr])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># OUTPUT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(solution(N, M, arr))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="정답코드">
 정답코드
 &lt;a class="anchor" href="#%ec%a0%95%eb%8b%b5%ec%bd%94%eb%93%9c">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>n, m &lt;span style="color:#f92672">=&lt;/span> map(int, input()&lt;span style="color:#f92672">.&lt;/span>split())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>result &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data &lt;span style="color:#f92672">=&lt;/span> list(map(int, input()&lt;span style="color:#f92672">.&lt;/span>split()))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> min_value &lt;span style="color:#f92672">=&lt;/span> min(data)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">=&lt;/span> max(result, min_value)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(result)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://yera10.github.io/docs/mystudy/algorithm-note/part2/3_%EA%B7%B8%EB%A6%AC%EB%94%94/%ED%81%B0%EC%88%98%EC%9D%98%EB%B2%95%EC%B9%99/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part2/3_%EA%B7%B8%EB%A6%AC%EB%94%94/%ED%81%B0%EC%88%98%EC%9D%98%EB%B2%95%EC%B9%99/</guid><description>&lt;h1 id="큰-수의-법칙">
 큰 수의 법칙
 &lt;a class="anchor" href="#%ed%81%b0-%ec%88%98%ec%9d%98-%eb%b2%95%ec%b9%99">#&lt;/a>
&lt;/h1>
&lt;h3 id="input">
 Input
 &lt;a class="anchor" href="#input">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>N : 2 $\leq$ N $\leq$ 1,000, 배열의 크기&lt;/li>
&lt;li>M : 1 $\leq$ M $\leq$ 10,000, 숫자가 더해지는 횟수&lt;/li>
&lt;li>K : 1 $\leq$ K $\leq$ 10,000, 특정 인덱스의 수가 연속해서 더해질 수 있는 횟수&lt;/li>
&lt;li>array : 주어진 배열&lt;/li>
&lt;li>항상 K &amp;lt;= M&lt;/li>
&lt;/ul>
&lt;h3 id="큰-수의-법칙-1">
 큰 수의 법칙
 &lt;a class="anchor" href="#%ed%81%b0-%ec%88%98%ec%9d%98-%eb%b2%95%ec%b9%99-1">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>배열의 숫자들을 M 번 더하여 가장 큰 수를 만드는 법칙&lt;/li>
&lt;li>&lt;strong>특정한 인덱스&lt;/strong>에 해당하는 수가 &lt;!-- raw HTML omitted -->&lt;strong>연속해서&lt;/strong>&lt;!-- raw HTML omitted --> K번을 초과하여 더해질 수 없다.&lt;/li>
&lt;/ul>
&lt;h3 id="output">
 Output
 &lt;a class="anchor" href="#output">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>큰 수의 법칙에 따른 결과&lt;/li>
&lt;/ul>
&lt;h3 id="example">
 Example
 &lt;a class="anchor" href="#example">#&lt;/a>
&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">N&lt;/th>
 &lt;th style="text-align: left">M&lt;/th>
 &lt;th style="text-align: left">K&lt;/th>
 &lt;th style="text-align: left">array&lt;/th>
 &lt;th style="text-align: left">result&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">5&lt;/td>
 &lt;td style="text-align: left">8&lt;/td>
 &lt;td style="text-align: left">3&lt;/td>
 &lt;td style="text-align: left">2 4 5 4 6&lt;/td>
 &lt;td style="text-align: left">46&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">5&lt;/td>
 &lt;td style="text-align: left">7&lt;/td>
 &lt;td style="text-align: left">2&lt;/td>
 &lt;td style="text-align: left">3 4 3 4 3&lt;/td>
 &lt;td style="text-align: left">28&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>예시1 : 6 + 6 + 6 + 5 + 6 + 6 + 6 + 5 = 46&lt;/li>
&lt;li>예시2 : 4 + 4 + 4 + 4 + 4 + 4 + 4 = 28&lt;/li>
&lt;/ul>
&lt;h3 id="my-solution">
 &lt;strong>My Solution&lt;/strong>
 &lt;a class="anchor" href="#my-solution">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>최댓값과 그다음 최댓값 외에는 쓰이지 않음&lt;br>
왜냐하면, 최댓값을 K번 만큼 더한 다음에 그 다음 최댓값을 한 번 더 더하면 최댓값 연속 더한 횟수가 초기화 되기 때문에 다른 수를 더하는 것보다 큰 수를 만들 수 있음.&lt;/li>
&lt;li>최댓값 m1과 그 다음 최댓값 m2를 구한다.&lt;/li>
&lt;li>$m1 * K + m2$ 를 최대한 반복 =&amp;gt; $(m1\times K + m2)\times {M//(K+1)}$&lt;/li>
&lt;li>$m1$ 을 더할 수 있는 만큼 더해주기 =&amp;gt; $m1 \times {M%(K+1)}$&lt;br>
(최대 K번이기 때문에 연속해서 더하는 것 가능)&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">solution&lt;/span>(N, M, K, arr):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> m1 &lt;span style="color:#f92672">=&lt;/span> max(arr)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr&lt;span style="color:#f92672">.&lt;/span>remove(m1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> m2 &lt;span style="color:#f92672">=&lt;/span> max(arr)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#f92672">=&lt;/span> (M&lt;span style="color:#f92672">//&lt;/span>(K&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)) &lt;span style="color:#f92672">*&lt;/span> (K &lt;span style="color:#f92672">*&lt;/span> m1 &lt;span style="color:#f92672">+&lt;/span> m2) &lt;span style="color:#f92672">+&lt;/span> sum(([m1] &lt;span style="color:#f92672">*&lt;/span> K &lt;span style="color:#f92672">+&lt;/span> [m2])[:M&lt;span style="color:#f92672">%&lt;/span>(K&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> res
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>python의 max 시간 복잡도 : $O(n)$&lt;/li>
&lt;li>python의 sort 시간 복잡도 : $O(n log n)$&lt;/li>
&lt;/ul>
&lt;h3 id="better-solution">
 &lt;strong>Better Solution&lt;/strong>
 &lt;a class="anchor" href="#better-solution">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">solution&lt;/span>(N, M, K, arr):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> m1 &lt;span style="color:#f92672">=&lt;/span> max(arr)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr&lt;span style="color:#f92672">.&lt;/span>remove(m1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> m2 &lt;span style="color:#f92672">=&lt;/span> max(arr)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#f92672">=&lt;/span> (M&lt;span style="color:#f92672">//&lt;/span>(K&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)) &lt;span style="color:#f92672">*&lt;/span> (K &lt;span style="color:#f92672">*&lt;/span> m1 &lt;span style="color:#f92672">+&lt;/span> m2) &lt;span style="color:#f92672">+&lt;/span> (M&lt;span style="color:#f92672">%&lt;/span>(K&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)) &lt;span style="color:#f92672">*&lt;/span> m1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> res
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://yera10.github.io/docs/mystudy/algorithm-note/part2/4_%EA%B5%AC%ED%98%84/%EA%B2%8C%EC%9E%84-%EA%B0%9C%EB%B0%9C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part2/4_%EA%B5%AC%ED%98%84/%EA%B2%8C%EC%9E%84-%EA%B0%9C%EB%B0%9C/</guid><description>&lt;h1 id="게임-개발">
 게임 개발
 &lt;a class="anchor" href="#%ea%b2%8c%ec%9e%84-%ea%b0%9c%eb%b0%9c">#&lt;/a>
&lt;/h1>
&lt;h3 id="input">
 Input
 &lt;a class="anchor" href="#input">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>N, M : 세로 크기, 가로 크기 (3 &amp;lt;= N,M &amp;lt;= 50)&lt;/li>
&lt;li>A, B, d : 게임 캐릭터가 있는 칸의 좌표 (A, B), 캐릭터가 바라보는 방향 d&lt;/li>
&lt;li>d 값 :
&lt;ul>
&lt;li>0 : 북&lt;/li>
&lt;li>1 : 동&lt;/li>
&lt;li>2 : 남&lt;/li>
&lt;li>3 : 서&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>맵의 정보 : 육지인지 바다인지 N x M 으로 나타내줌
&lt;ul>
&lt;li>0 : 육지&lt;/li>
&lt;li>1 : 바다&lt;/li>
&lt;li>맵의 외곽은 항상 바다&lt;/li>
&lt;li>게임 캐릭터가 처음 위치한 칸의 정보는 항상 육지&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="output">
 Output
 &lt;a class="anchor" href="#output">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>첫째 줄에 이동을 마친 후 캐릭터가 방문한 칸의 수&lt;/li>
&lt;/ul>
&lt;h3 id="rule">
 Rule
 &lt;a class="anchor" href="#rule">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>현재 위치에서 현재 방향을 기준으로 반시계방향부터 차례대로 갈 곳을 정함&lt;/li>
&lt;li>캐릭터의 왼쪽 방향(반시계 방향)에 가보지 않은 칸이 있다면, 왼쪽 방향으로 회전한 다음 왼쪽으로 한칸 전진.
왼쪽 방향에 가보지 않은 칸이 없다면, 왼쪽 방향으로만 회전 하고 1단계로 돌아가기&lt;/li>
&lt;li>네 방향 모두 가본 칸이거나 바다로 되어 있는 칸이라면, 바라보는 방향을 유지한 채로 한 칸 뒤로 간 뒤, 1단계로 돌아가기. 뒤가 바다 방향이면 움직임을 멈추기.&lt;/li>
&lt;/ol>
&lt;h3 id="example">
 Example
 &lt;a class="anchor" href="#example">#&lt;/a>
&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">입력&lt;/th>
 &lt;th style="text-align: left">출력&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">4 4 &lt;!-- raw HTML omitted --> 1 1 0 &lt;!-- raw HTML omitted --> 1 1 1 1 &lt;!-- raw HTML omitted --> 1 0 0 0 1 &lt;!-- raw HTML omitted --> 1 1 0 1 &lt;!-- raw HTML omitted --> 1 1 1 1&lt;/td>
 &lt;td style="text-align: left">3&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title/><link>https://yera10.github.io/docs/mystudy/algorithm-note/part2/4_%EA%B5%AC%ED%98%84/%EC%83%81%ED%95%98%EC%A2%8C%EC%9A%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part2/4_%EA%B5%AC%ED%98%84/%EC%83%81%ED%95%98%EC%A2%8C%EC%9A%B0/</guid><description>&lt;h1 id="상하좌우">
 상하좌우
 &lt;a class="anchor" href="#%ec%83%81%ed%95%98%ec%a2%8c%ec%9a%b0">#&lt;/a>
&lt;/h1>
&lt;h3 id="input">
 Input
 &lt;a class="anchor" href="#input">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>N : 공간의 크기, N x N 크기의 정사각형 공간&lt;/li>
&lt;li>이동할 계획서 : 여행가가 N x N 공간에서 이동할 계획, (1&amp;lt;= 이동횟수 &amp;lt;=100)&lt;/li>
&lt;/ul>
&lt;h3 id="output">
 Output
 &lt;a class="anchor" href="#output">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>여행가가 최종적으로 도착할 지점의 좌표를 공백으로 구분하여 출력&lt;/li>
&lt;li>이동할 때, N x N의 정사각형을 벗어나는 움직임은 무시됨
&lt;ul>
&lt;li>예를 들어, (1,1)에서 L 혹은 U의 움직임은 무시&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="example">
 Example
 &lt;a class="anchor" href="#example">#&lt;/a>
&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">입력&lt;/th>
 &lt;th style="text-align: left">출력&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">5 &lt;!-- raw HTML omitted --> R R R U D D&lt;/td>
 &lt;td style="text-align: left">3 4&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="my-solution">
 &lt;strong>My Solution&lt;/strong>
 &lt;a class="anchor" href="#my-solution">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">solution&lt;/span>(N, moves):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> now &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> moves &lt;span style="color:#f92672">=&lt;/span> moves&lt;span style="color:#f92672">.&lt;/span>split()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> m &lt;span style="color:#f92672">in&lt;/span> moves:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> m &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;R&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> now[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> m &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;L&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> now[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">-=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> m &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;U&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> now[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">-=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> now[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> now[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> max(min(now[&lt;span style="color:#ae81ff">0&lt;/span>], N), &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> now[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> max(min(now[&lt;span style="color:#ae81ff">1&lt;/span>], N), &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>now[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>now[&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>N &lt;span style="color:#f92672">=&lt;/span> int(input())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>moves &lt;span style="color:#f92672">=&lt;/span> input()&lt;span style="color:#f92672">.&lt;/span>split()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(solution(N, moves))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="문제-해설">
 문제 해설
 &lt;a class="anchor" href="#%eb%ac%b8%ec%a0%9c-%ed%95%b4%ec%84%a4">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>일련의 명령어에 따라서 개체를 차례대로 이동시키므로 시뮬레이션 유형 문제&lt;/li>
&lt;li>시뮬레이션 유형, 구현 유형, 완전 탐색 유형은 서로 유사함&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># INPUT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>N &lt;span style="color:#f92672">=&lt;/span> int(input())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>x, y &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plans &lt;span style="color:#f92672">=&lt;/span> input()&lt;span style="color:#f92672">.&lt;/span>split()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 이동을 위한 변수&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dx &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dy &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>move_types &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;L&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;R&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;U&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;D&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># solution&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> plan &lt;span style="color:#f92672">in&lt;/span> plans:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(len(move_types)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> plan &lt;span style="color:#f92672">==&lt;/span> move_types[i]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nx &lt;span style="color:#f92672">=&lt;/span> x &lt;span style="color:#f92672">+&lt;/span> dx[i]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ny &lt;span style="color:#f92672">=&lt;/span> y &lt;span style="color:#f92672">+&lt;/span> dy[i]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> nx &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">or&lt;/span> ny &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">or&lt;/span> nx &lt;span style="color:#f92672">&amp;gt;&lt;/span> n &lt;span style="color:#f92672">or&lt;/span> ny &lt;span style="color:#f92672">&amp;gt;&lt;/span> n:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x, y &lt;span style="color:#f92672">=&lt;/span> nx, ny
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(x, y)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://yera10.github.io/docs/mystudy/algorithm-note/part2/4_%EA%B5%AC%ED%98%84/%EC%8B%9C%EA%B0%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part2/4_%EA%B5%AC%ED%98%84/%EC%8B%9C%EA%B0%81/</guid><description>&lt;h1 id="시각">
 시각
 &lt;a class="anchor" href="#%ec%8b%9c%ea%b0%81">#&lt;/a>
&lt;/h1>
&lt;h3 id="input">
 Input
 &lt;a class="anchor" href="#input">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>N : 정수, 0&amp;lt;= N &amp;lt;= 23&lt;/li>
&lt;/ul>
&lt;h3 id="output">
 Output
 &lt;a class="anchor" href="#output">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>00시 00분 00초부터 N시 59분 59초 까지의 모든 시각 중 3이 하나라도 포함되는 모든 경우의수 출력&lt;/li>
&lt;/ul>
&lt;h3 id="example">
 Example
 &lt;a class="anchor" href="#example">#&lt;/a>
&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">입력&lt;/th>
 &lt;th style="text-align: left">출력&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">5&lt;/td>
 &lt;td style="text-align: left">11475&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="my-solution">
 &lt;strong>My Solution&lt;/strong>
 &lt;a class="anchor" href="#my-solution">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">solution&lt;/span>(N):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> h &lt;span style="color:#f92672">in&lt;/span> range(N&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#e6db74">&amp;#39;3&amp;#39;&lt;/span> &lt;span style="color:#f92672">in&lt;/span> str(h):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">60&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">60&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> m &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">60&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#e6db74">&amp;#39;3&amp;#39;&lt;/span> &lt;span style="color:#f92672">in&lt;/span> str(m):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">60&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> s &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">60&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#e6db74">&amp;#39;3&amp;#39;&lt;/span> &lt;span style="color:#f92672">in&lt;/span> str(s):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> res
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>N &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(solution(N))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="문제-해설">
 문제 해설
 &lt;a class="anchor" href="#%eb%ac%b8%ec%a0%9c-%ed%95%b4%ec%84%a4">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>하루는 86,400초로 모든 경우는 86,400가지밖에 존재하지 않음. 시간제한 2초 안에 해결 가능&lt;/li>
&lt;li>완전 탐색 유형&lt;/li>
&lt;li>완전 탐색 알고리즘은 비효율적인 시간복잡도를 가져 데이터 수가 큰 경우에 동작하지 않을 수 있다.&lt;/li>
&lt;li>데이터가 1,000,000개 이하일 때 적절&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># H를임력받기&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>h &lt;span style="color:#f92672">=&lt;/span> int(input())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>count &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(h &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> j &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">60&lt;/span>) : 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> k &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">60&lt;/span>) :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#매시각안에 &amp;#39;3&amp;#39;이 포함되어있다면카운트층가 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#e6db74">&amp;#39;3&amp;#39;&lt;/span> &lt;span style="color:#f92672">in&lt;/span> str(i) &lt;span style="color:#f92672">+&lt;/span> str(j) &lt;span style="color:#f92672">+&lt;/span> str(k):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print (count)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://yera10.github.io/docs/mystudy/algorithm-note/part2/4_%EA%B5%AC%ED%98%84/%EC%99%95%EC%8B%A4%EC%9D%98%EB%82%98%EC%9D%B4%ED%8A%B8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part2/4_%EA%B5%AC%ED%98%84/%EC%99%95%EC%8B%A4%EC%9D%98%EB%82%98%EC%9D%B4%ED%8A%B8/</guid><description>&lt;h1 id="왕실의-나이트">
 왕실의 나이트
 &lt;a class="anchor" href="#%ec%99%95%ec%8b%a4%ec%9d%98-%eb%82%98%ec%9d%b4%ed%8a%b8">#&lt;/a>
&lt;/h1>
&lt;h3 id="input">
 Input
 &lt;a class="anchor" href="#input">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>8 x 8 좌표평면에서 나이트가 현재 위치한 곳의 좌표&lt;/li>
&lt;li>두문자로 구성된 문자열&lt;/li>
&lt;/ul>
&lt;h3 id="output">
 Output
 &lt;a class="anchor" href="#output">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>나이트가 이동할 수 있는 경우의 수&lt;/li>
&lt;/ul>
&lt;h3 id="example">
 Example
 &lt;a class="anchor" href="#example">#&lt;/a>
&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">입력&lt;/th>
 &lt;th style="text-align: left">출력&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">a1&lt;/td>
 &lt;td style="text-align: left">2&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="my-solution">
 My Solution
 &lt;a class="anchor" href="#my-solution">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>moves &lt;span style="color:#f92672">=&lt;/span> [(&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>), (&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>), (&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>), (&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>), (&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>), (&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>), (&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>), (&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">solution&lt;/span>(x):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c, r &lt;span style="color:#f92672">=&lt;/span> ord(x[&lt;span style="color:#ae81ff">0&lt;/span>])&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">96&lt;/span>, int(x[&lt;span style="color:#ae81ff">1&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nx &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> m &lt;span style="color:#f92672">in&lt;/span> moves &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> (c&lt;span style="color:#f92672">+&lt;/span>m[&lt;span style="color:#ae81ff">0&lt;/span>]) &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">9&lt;/span>) &lt;span style="color:#f92672">and&lt;/span> (&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> (r&lt;span style="color:#f92672">+&lt;/span>m[&lt;span style="color:#ae81ff">1&lt;/span>]) &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">9&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> sum(nx)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>x &lt;span style="color:#f92672">=&lt;/span> input()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(solution(x))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="문제-해설">
 문제 해설
 &lt;a class="anchor" href="#%eb%ac%b8%ec%a0%9c-%ed%95%b4%ec%84%a4">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 현재 나이트 위치 입력&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>input_data &lt;span style="color:#f92672">=&lt;/span> input()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>row &lt;span style="color:#f92672">=&lt;/span> int(inpu_data[&lt;span style="color:#ae81ff">1&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>column &lt;span style="color:#f92672">=&lt;/span> int(ord(input_data[&lt;span style="color:#ae81ff">0&lt;/span>])) &lt;span style="color:#f92672">-&lt;/span> int(ord(&lt;span style="color:#e6db74">&amp;#39;a&amp;#39;&lt;/span>)) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 8가지 이동&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>steps &lt;span style="color:#f92672">=&lt;/span> [(&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>), (&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>), (&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>), (&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>), (&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>), (&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>), (&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>), (&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 이동가능 여부 확인&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>result &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> step &lt;span style="color:#f92672">in&lt;/span> steps:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nrow &lt;span style="color:#f92672">=&lt;/span> row &lt;span style="color:#f92672">+&lt;/span> step[&lt;span style="color:#ae81ff">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ncol &lt;span style="color:#f92672">=&lt;/span> col &lt;span style="color:#f92672">+&lt;/span> step[&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> nrow &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span> &lt;span style="color:#f92672">and&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">&amp;lt;=&lt;/span> ncol &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 출력&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(result)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://yera10.github.io/docs/mystudy/algorithm-note/part2/5_dfs_bfs/%EB%AF%B8%EB%A1%9C%ED%83%88%EC%B6%9C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part2/5_dfs_bfs/%EB%AF%B8%EB%A1%9C%ED%83%88%EC%B6%9C/</guid><description>&lt;h1 id="미로탈출">
 미로탈출
 &lt;a class="anchor" href="#%eb%af%b8%eb%a1%9c%ed%83%88%ec%b6%9c">#&lt;/a>
&lt;/h1>
&lt;h3 id="input">
 Input
 &lt;a class="anchor" href="#input">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>두 정수 N, M : 4 &amp;lt;= N, M &amp;lt;= 200&lt;/li>
&lt;li>N개의 줄, M개의 정수로 미로정보 주어짐&lt;/li>
&lt;li>공백 X&lt;/li>
&lt;li>시작과 마지막은 항상 1&lt;/li>
&lt;/ul>
&lt;h3 id="output">
 Output
 &lt;a class="anchor" href="#output">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>최소 이동 칸의 개수&lt;/li>
&lt;/ul>
&lt;h3 id="rule">
 Rule
 &lt;a class="anchor" href="#rule">#&lt;/a>
&lt;/h3>
&lt;p>N x M 크기의 직사각형 미로에 갇혀있다. &lt;br>
미로에 여러 마리의 괴물을 피해 탈출해야 함. &lt;br>
출발지점 (1,1)&lt;br>
출구위치 (N, M)&lt;br>
괴물이 있는 부분 : 0 \
괴물이 없는 부분 : 1 \
한번에 한칸씩 이동할 수 있음. &lt;br>
동빈이가 탈출하기 위해 움직여야 하는 최소 칸의 개수 구하기.&lt;br>
미로는 반드시 탈출할 수 있는 형태로 제시됨&lt;/p></description></item><item><title/><link>https://yera10.github.io/docs/mystudy/algorithm-note/part2/5_dfs_bfs/%EC%9D%8C%EB%A3%8C%EC%88%98-%EC%96%BC%EB%A0%A4-%EB%A8%B9%EA%B8%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part2/5_dfs_bfs/%EC%9D%8C%EB%A3%8C%EC%88%98-%EC%96%BC%EB%A0%A4-%EB%A8%B9%EA%B8%B0/</guid><description>&lt;h1 id="음료수-얼려-먹기">
 음료수 얼려 먹기
 &lt;a class="anchor" href="#%ec%9d%8c%eb%a3%8c%ec%88%98-%ec%96%bc%eb%a0%a4-%eb%a8%b9%ea%b8%b0">#&lt;/a>
&lt;/h1>
&lt;h3 id="input">
 Input
 &lt;a class="anchor" href="#input">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>얼음 틀의 세로길이 N, 가로길이 M (1 &amp;lt;= N, M &amp;lt;= 1,000)&lt;/li>
&lt;li>두번째 줄부터 N+1번째 줄까지 얼음 틀의 형태가 주어짐&lt;/li>
&lt;li>구멍이 뚫려있는 부분은 0, 그렇지 않은 부분은 1&lt;/li>
&lt;/ul>
&lt;h3 id="output">
 Output
 &lt;a class="anchor" href="#output">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>한 번에 만들 수 있는 아이스크림의 갯수 구하기&lt;/li>
&lt;/ul>
&lt;h3 id="example">
 Example
 &lt;a class="anchor" href="#example">#&lt;/a>
&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">입력&lt;/th>
 &lt;th style="text-align: left">출력&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">15 14 &lt;!-- raw HTML omitted --> 00000111100000 &lt;!-- raw HTML omitted -->11111101111110 &lt;!-- raw HTML omitted -->11011101101110 &lt;!-- raw HTML omitted --> 11011101100000 &lt;!-- raw HTML omitted --> 11011111111111 &lt;!-- raw HTML omitted --> 11011111111100 &lt;!-- raw HTML omitted --> 11000000011111 &lt;!-- raw HTML omitted --> 01111111111111 &lt;!-- raw HTML omitted --> 00000000011111 &lt;!-- raw HTML omitted --> 01111111111000 &lt;!-- raw HTML omitted --> 00011111111000 &lt;!-- raw HTML omitted --> 00000001111000 &lt;!-- raw HTML omitted -->11111111110011 &lt;!-- raw HTML omitted --> 11100011111111&lt;!-- raw HTML omitted -->11100011111111&lt;/td>
 &lt;td style="text-align: left">8&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="my-solution">
 My Solution
 &lt;a class="anchor" href="#my-solution">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># INPUT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>n, m &lt;span style="color:#f92672">=&lt;/span> map(int, input()&lt;span style="color:#f92672">.&lt;/span>split())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>graph &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> graph&lt;span style="color:#f92672">.&lt;/span>append(list(map(int, input())))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># SOLUTION&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> collections &lt;span style="color:#f92672">import&lt;/span> deque
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">bfs&lt;/span>(graph, start, N, M):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> start 지점에서 시작하여 0인 영역을 모두 탐색하는 함수
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q &lt;span style="color:#f92672">=&lt;/span> deque([start])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> graph[start[&lt;span style="color:#ae81ff">0&lt;/span>]][start[&lt;span style="color:#ae81ff">1&lt;/span>]] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> q:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vi, vj &lt;span style="color:#f92672">=&lt;/span> q&lt;span style="color:#f92672">.&lt;/span>popleft()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i, j &lt;span style="color:#f92672">in&lt;/span> [[vi&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, vj], [vi&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, vj], [vi, vj&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>], [vi, vj&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> i &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">or&lt;/span> i &lt;span style="color:#f92672">&amp;gt;=&lt;/span> N &lt;span style="color:#f92672">or&lt;/span> j &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">or&lt;/span> j &lt;span style="color:#f92672">&amp;gt;=&lt;/span> M:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> graph[i][j]&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#f92672">.&lt;/span>append([i, j])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> graph[i][j] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">solution&lt;/span>(N, M, frame):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i, j &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(N):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> j &lt;span style="color:#f92672">in&lt;/span> range(M):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> frame[i][j] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bfs(frame, [i, j], N, M)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> res
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># OUTPUT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print( solution(N, M, frame) )
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="solution">
 Solution
 &lt;a class="anchor" href="#solution">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># N, M을 공백을 기준으로 구분하여 입력 받기&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>n, m &lt;span style="color:#f92672">=&lt;/span> map(int, input()&lt;span style="color:#f92672">.&lt;/span>split())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 2차원 리스트의 맵 정보 입력 받기&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>graph &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> graph&lt;span style="color:#f92672">.&lt;/span>append(list(map(int, input())))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># DFS로 특정한 노드를 방문한 뒤에 연결된 모든 노드들도 방문&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">dfs&lt;/span>(x, y):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 주어진 범위를 벗어나는 경우에는 즉시 종료&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> x &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">or&lt;/span> x &lt;span style="color:#f92672">&amp;gt;=&lt;/span> n &lt;span style="color:#f92672">or&lt;/span> y &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">or&lt;/span> y &lt;span style="color:#f92672">&amp;gt;=&lt;/span> m:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 현재 노드를 아직 방문하지 않았다면&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> graph[x][y] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 해당 노드 방문 처리&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> graph[x][y] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 상, 하, 좌, 우의 위치들도 모두 재귀적으로 호출&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dfs(x &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, y)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dfs(x, y &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dfs(x &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, y)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dfs(x, y &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 모든 노드(위치)에 대하여 음료수 채우기&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>result &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> j &lt;span style="color:#f92672">in&lt;/span> range(m):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 현재 위치에서 DFS 수행&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> dfs(i, j) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(result) &lt;span style="color:#75715e"># 정답 출력&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://yera10.github.io/docs/mystudy/algorithm-note/part2/6_%EC%A0%95%EB%A0%AC/%EC%84%B1%EC%A0%81%EC%9D%B4%EB%82%AE%EC%9D%80%EC%88%9C%EC%84%9C%EB%A1%9C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part2/6_%EC%A0%95%EB%A0%AC/%EC%84%B1%EC%A0%81%EC%9D%B4%EB%82%AE%EC%9D%80%EC%88%9C%EC%84%9C%EB%A1%9C/</guid><description>&lt;h1 id="성적이-낮은-순서로-학생-출력하기">
 성적이 낮은 순서로 학생 출력하기
 &lt;a class="anchor" href="#%ec%84%b1%ec%a0%81%ec%9d%b4-%eb%82%ae%ec%9d%80-%ec%88%9c%ec%84%9c%eb%a1%9c-%ed%95%99%ec%83%9d-%ec%b6%9c%eb%a0%a5%ed%95%98%ea%b8%b0">#&lt;/a>
&lt;/h1>
&lt;h3 id="input">
 INPUT
 &lt;a class="anchor" href="#input">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>첫번째 줄 - 학생 수 N (1&amp;lt;=N&amp;lt;=100,000)&lt;/li>
&lt;li>학생의 이름 문자열 A, 학생의 성적 B가 공백으로 구분되어 입력&lt;/li>
&lt;li>학생의 성적 B는 100이하의 자연수&lt;/li>
&lt;li>학생의 이름 A는 100 이하의 길이&lt;/li>
&lt;/ul>
&lt;h3 id="output">
 OUTPUT
 &lt;a class="anchor" href="#output">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>모든 학생의 이름을 성적이 낮은 순서대로 출력&lt;/li>
&lt;li>성적이 동일한 학생의 순서는 자유롭게 출력&lt;/li>
&lt;/ul>
&lt;h3 id="my-solution">
 My Solution
 &lt;a class="anchor" href="#my-solution">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># SOLUTION&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">solution&lt;/span>(scores):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sorted_list &lt;span style="color:#f92672">=&lt;/span> [[] &lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">101&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> n, s &lt;span style="color:#f92672">in&lt;/span> scores:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sorted_list[s]&lt;span style="color:#f92672">.&lt;/span>append(n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> names &lt;span style="color:#f92672">in&lt;/span> sorted_list:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> name &lt;span style="color:#f92672">in&lt;/span> names:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(name, end&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># TEST&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>N &lt;span style="color:#f92672">=&lt;/span> int(input())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>scores &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(N):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name, score &lt;span style="color:#f92672">=&lt;/span> input()&lt;span style="color:#f92672">.&lt;/span>split()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scores&lt;span style="color:#f92672">.&lt;/span>append([name, int(score)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>solution(scores)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="solution">
 Solution
 &lt;a class="anchor" href="#solution">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>N &lt;span style="color:#f92672">=&lt;/span> int(input())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>array &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(N):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name, score &lt;span style="color:#f92672">=&lt;/span> input()&lt;span style="color:#f92672">.&lt;/span>split()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> array&lt;span style="color:#f92672">.&lt;/span>append([name, int(score)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>array &lt;span style="color:#f92672">=&lt;/span> sorted(array, key&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">lambda&lt;/span> x:x[&lt;span style="color:#ae81ff">1&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> student &lt;span style="color:#f92672">in&lt;/span> array:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(student[&lt;span style="color:#ae81ff">0&lt;/span>], end&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://yera10.github.io/docs/mystudy/algorithm-note/part2/6_%EC%A0%95%EB%A0%AC/%EC%9C%84%EC%97%90%EC%84%9C%EC%95%84%EB%9E%98%EB%A1%9C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part2/6_%EC%A0%95%EB%A0%AC/%EC%9C%84%EC%97%90%EC%84%9C%EC%95%84%EB%9E%98%EB%A1%9C/</guid><description>&lt;h1 id="위에서-아래로">
 위에서 아래로
 &lt;a class="anchor" href="#%ec%9c%84%ec%97%90%ec%84%9c-%ec%95%84%eb%9e%98%eb%a1%9c">#&lt;/a>
&lt;/h1>
&lt;h3 id="input">
 INPUT
 &lt;a class="anchor" href="#input">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>첫째줄 - 수열에 속해있는 수의 개수 N, (1 &amp;lt;= N &amp;lt;= 500)&lt;/li>
&lt;li>둘째줄부터 N개의 수 입력됨 (범위 1~100,000의 자연수)&lt;/li>
&lt;/ul>
&lt;h3 id="output">
 OUTPUT
 &lt;a class="anchor" href="#output">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>입력으로 주어진 수열이 내림차순으로 정렬된 결과를 공백으로 구분하여 출력&lt;/li>
&lt;/ul>
&lt;h3 id="example">
 Example
 &lt;a class="anchor" href="#example">#&lt;/a>
&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">INPUT&lt;/th>
 &lt;th style="text-align: left">OUTPUT&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">3&lt;!-- raw HTML omitted -->15&lt;!-- raw HTML omitted -->27&lt;!-- raw HTML omitted -->12&lt;/td>
 &lt;td style="text-align: left">27 15 12&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="my-solution">
 My Solution
 &lt;a class="anchor" href="#my-solution">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># SOLUTION&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">solution&lt;/span>(arr):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cnt_list &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">100001&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> v &lt;span style="color:#f92672">in&lt;/span> arr:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cnt_list[v] &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">100000&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(cnt_list[i]):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(i, end&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># TEST&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>N &lt;span style="color:#f92672">=&lt;/span> int(input())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(N):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr&lt;span style="color:#f92672">.&lt;/span>append(int(input()))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>solution(arr)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="solution">
 Solution
 &lt;a class="anchor" href="#solution">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># N 입력받기&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>N &lt;span style="color:#f92672">=&lt;/span> int(input())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># N개의 정수 입력받아 리스트에 저장&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(N):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr&lt;span style="color:#f92672">.&lt;/span>append(int(input()))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 정렬&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr &lt;span style="color:#f92672">=&lt;/span> sorted(arr, reverse&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> arr:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(i, end&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://yera10.github.io/docs/mystudy/algorithm-note/part2/6_%EC%A0%95%EB%A0%AC/%EC%A0%95%EB%A0%AC%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EA%B3%84%EC%88%98%EC%A0%95%EB%A0%AC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part2/6_%EC%A0%95%EB%A0%AC/%EC%A0%95%EB%A0%AC%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EA%B3%84%EC%88%98%EC%A0%95%EB%A0%AC/</guid><description>&lt;h1 id="계수-정렬">
 계수 정렬
 &lt;a class="anchor" href="#%ea%b3%84%ec%88%98-%ec%a0%95%eb%a0%ac">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>특정한 조건이 부합할 때만 사용할 수 있지만, 매우 빠른 정렬 알고리즘&lt;/li>
&lt;li>데이터가 모두 양의 정수이며, 데이터의 개수가 N, 최댓값이 K일 때, 계수 정렬은 최악의 경우에도 수행시간 $O(N+K)$을 보장함&lt;/li>
&lt;li>매우 빠르게 동작하며, 매우 간단한 원리&lt;/li>
&lt;li>데이터의 크기 범위가 제한되어 정수 형태로 표현할 수 있을 때만 사용 가능&lt;/li>
&lt;li>실수형 데이터로 주어질 때 사용하기 어려움&lt;/li>
&lt;li>일반적으로는 가장 큰 데이터와 가장 작은 데이터의 차이가 1,000,000을 넘지 않을 때 효과적&lt;/li>
&lt;li>데이터의 범위가 너무 크면 계수정렬을 사용할 수 없음.&lt;/li>
&lt;li>계수정렬을 이용할 때에는 모든 범위를 담을 수 있는 크기의 리스트(배열)를 선언하기 때문&lt;/li>
&lt;li>계수 정렬은 비교 기반의 정렬 알고리즘이 아니다.&lt;/li>
&lt;/ul>
&lt;p>계수정렬 소스코드&lt;/p></description></item><item><title/><link>https://yera10.github.io/docs/mystudy/algorithm-note/part2/6_%EC%A0%95%EB%A0%AC/%EC%A0%95%EB%A0%AC%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EC%82%BD%EC%9E%85%EC%A0%95%EB%A0%AC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part2/6_%EC%A0%95%EB%A0%AC/%EC%A0%95%EB%A0%AC%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EC%82%BD%EC%9E%85%EC%A0%95%EB%A0%AC/</guid><description>&lt;h1 id="삽입정렬">
 삽입정렬
 &lt;a class="anchor" href="#%ec%82%bd%ec%9e%85%ec%a0%95%eb%a0%ac">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>데이터를 하나씩 확인하며, 각 데이터의 적절한 위치에 삽입하면 어떨까?&lt;/li>
&lt;li>선택정렬에 비해 구현 난이도가 높은 편이지만, 실행 시간 측면에서 더 효율적인 알고리즘&lt;/li>
&lt;li>특히 삽입 정렬은 필요할 때만 위치를 바꾸기 때문에 &amp;ldquo;데이터가 거의 정렬되어 있을 때&amp;rdquo; 효율적&lt;/li>
&lt;li>특정한 데이터를 적절한 위치에 &amp;ldquo;삽입&amp;quot;한다는 의미&lt;/li>
&lt;li>삽입정렬 방법
&lt;ul>
&lt;li>특정한 데이터가 적절한 위치에 들어가기 이전에 그 앞까지의 데이터는 이미 정렬되어 있다고 가정&lt;/li>
&lt;li>정렬되어 있는 리스트에 적절한 위치를 찾은 뒤, 그 위치에 삽입&lt;/li>
&lt;li>특정 데이터가 삽입될 위치를 선정할 때(왼쪽으로 한 칸씩 이동하며 탐색할 때), 삽입될 데이터보다 작은 데이터를 만나면, 그 위치에서 멈춤&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>삽입정렬 소스코드&lt;/p></description></item><item><title/><link>https://yera10.github.io/docs/mystudy/algorithm-note/part2/6_%EC%A0%95%EB%A0%AC/%EC%A0%95%EB%A0%AC%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EC%84%A0%ED%83%9D%EC%A0%95%EB%A0%AC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part2/6_%EC%A0%95%EB%A0%AC/%EC%A0%95%EB%A0%AC%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EC%84%A0%ED%83%9D%EC%A0%95%EB%A0%AC/</guid><description>&lt;h1 id="선택-정렬">
 선택 정렬
 &lt;a class="anchor" href="#%ec%84%a0%ed%83%9d-%ec%a0%95%eb%a0%ac">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>매번 가장 작은 것을 선택한다는 의미의 알고리즘&lt;/li>
&lt;li>가장 작은 데이터를 맨 앞에 있는 데이터와 바꾸고,&lt;br>
그 다음 작은 데이터를 두 번째 데이터와 바꾸고 &amp;hellip; &lt;br>
이런 과정을 반복&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># INPUT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">7&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>, &lt;span style="color:#ae81ff">9&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>, &lt;span style="color:#ae81ff">8&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># SOLUTION&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">select_sorting&lt;/span>(arr):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(len(arr)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> min_i &lt;span style="color:#f92672">=&lt;/span> i
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> j &lt;span style="color:#f92672">in&lt;/span> range(i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, len(arr)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> arr[j] &lt;span style="color:#f92672">&amp;lt;&lt;/span> arr[min_i]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> min_i &lt;span style="color:#f92672">=&lt;/span> j
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr[i], arr[min_i] &lt;span style="color:#f92672">=&lt;/span> arr[min_i], arr[i]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># OUTPUT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>select_sorting(arr)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(arr)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>선택 정렬의 시간복잡도는 $N + (N-1) + \dots + 2$ 로 $O(N^2)$ 이다.&lt;/li>
&lt;li>만약 정렬해야할 개수가 100배 늘어마녀 이론적으로 수행시간은 10,000배 늘어난다.&lt;/li>
&lt;li>선택 정렬은 기본 라이브러리를 포함해 다른 알고리즘과 비교했을 때 매우 비효율적&lt;/li>
&lt;/ul>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: center">데이터의 개수(N)&lt;/th>
 &lt;th style="text-align: center">선택정렬&lt;/th>
 &lt;th style="text-align: center">퀵 정렬&lt;/th>
 &lt;th style="text-align: center">기본 정렬 라이브러리&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: center">N = 100&lt;/td>
 &lt;td style="text-align: center">0.0123s&lt;/td>
 &lt;td style="text-align: center">0.00156s&lt;/td>
 &lt;td style="text-align: center">0.00000753s&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: center">N = 1,000&lt;/td>
 &lt;td style="text-align: center">0.354s&lt;/td>
 &lt;td style="text-align: center">0.00343s&lt;/td>
 &lt;td style="text-align: center">0.0000365&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: center">N = 10,000&lt;/td>
 &lt;td style="text-align: center">15.475s&lt;/td>
 &lt;td style="text-align: center">0.0312&lt;/td>
 &lt;td style="text-align: center">0.00028s&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title/><link>https://yera10.github.io/docs/mystudy/algorithm-note/part2/6_%EC%A0%95%EB%A0%AC/%EC%A0%95%EB%A0%AC%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%80%B5%EC%A0%95%EB%A0%AC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part2/6_%EC%A0%95%EB%A0%AC/%EC%A0%95%EB%A0%AC%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%80%B5%EC%A0%95%EB%A0%AC/</guid><description>&lt;h1 id="퀵-정렬">
 퀵 정렬
 &lt;a class="anchor" href="#%ed%80%b5-%ec%a0%95%eb%a0%ac">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>정렬 알고리즘 중 가장 많이 사용되는 알고리즘&lt;/p>
&lt;/li>
&lt;li>
&lt;p>퀵 정렬과 비교할만큼 빠른 알고리즘으로 &amp;lsquo;병합 정렬&amp;rsquo;이 있음.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>퀵 정렬과 병합 정렬은 대부분의 프로그래밍 언어에서 정렬 라이브러리의 근간이 되는 알고리즘이기도 함.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>기준을 설정한 다음 큰 수와 작은 수를 교환한 후 리스트를 반으로 나누는 방식으로 동작&lt;/p>
&lt;/li>
&lt;li>
&lt;p>퀵 정렬에서는 피벗(Pivot)이 사용된다.&lt;br>
큰 숫자와 작은 숫자를 교환할 때, 교환하기 위한 &amp;lsquo;기준&amp;rsquo;을 피벗이라고 표현&lt;/p>
&lt;/li>
&lt;li>
&lt;p>피벗을 어떻게 설정하고 리스트를 분할하는지에 따라 여러 가지 방식의 퀵 정렬이 있다.&lt;/p></description></item><item><title/><link>https://yera10.github.io/docs/mystudy/algorithm-note/part2/7_%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89/%EB%96%A1%EB%B3%B6%EC%9D%B4%EB%96%A1%EB%A7%8C%EB%93%A4%EA%B8%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part2/7_%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89/%EB%96%A1%EB%B3%B6%EC%9D%B4%EB%96%A1%EB%A7%8C%EB%93%A4%EA%B8%B0/</guid><description>&lt;h1 id="떡볶이-떡-만들기">
 떡볶이 떡 만들기
 &lt;a class="anchor" href="#%eb%96%a1%eb%b3%b6%ec%9d%b4-%eb%96%a1-%eb%a7%8c%eb%93%a4%ea%b8%b0">#&lt;/a>
&lt;/h1>
&lt;h3 id="input">
 INPUT
 &lt;a class="anchor" href="#input">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>첫째줄: N, M = 떡의 개수, 요청한 떡의 길이&lt;br>
($1\le N \le 1,000,000, 1\le M \le 2,000,000,000$)&lt;/li>
&lt;li>둘째줄: 떡의 개별 높이
&lt;ul>
&lt;li>떡의 개별 높이의 총합은 항상 M 이상.&lt;/li>
&lt;li>높이는 1,000,000,000보다 작거나 같은 양의 정수 또는 0&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="output">
 OUTPUT
 &lt;a class="anchor" href="#output">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>적어도 M만큼 떡을 가져가기 위해 절단기에 설정할 수 있는 높이의 최댓값&lt;/li>
&lt;/ul>
&lt;h3 id="example">
 Example
 &lt;a class="anchor" href="#example">#&lt;/a>
&lt;/h3>
&lt;h3 id="문제">
 문제
 &lt;a class="anchor" href="#%eb%ac%b8%ec%a0%9c">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>절단기에 높이 H를 설정하면, 높이가 H보다 긴 떡만 H 위의 부분이 잘림.&lt;/li>
&lt;li>예) 19, 14, 14, 17cm 의 떡들을 15cm로 설정한 절단기로 자르면, 15, 14, 14, 15cm가 되고, 잘린 떡은 4, 0, 0, 2cm이며, 총 잘린 6cm의 떡을 가져갈 수 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="my-solution">
 My Solution
 &lt;a class="anchor" href="#my-solution">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">binary_search&lt;/span>(arr, target, s, e):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;이진탐색 코드의 변형
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> arr내에 target이 없을 때 없다고 반환하지 않고, 큰 값을 반환&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> s &lt;span style="color:#f92672">&amp;gt;&lt;/span> e:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> m &lt;span style="color:#f92672">=&lt;/span> (s&lt;span style="color:#f92672">+&lt;/span>e)&lt;span style="color:#f92672">//&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> arr[m] &lt;span style="color:#f92672">&amp;lt;&lt;/span> target:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> binary_search(arr, target, m&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> arr[m] &lt;span style="color:#f92672">&amp;gt;&lt;/span> target:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> binary_search(arr, target, s, m&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">solution&lt;/span>(arr, N, M):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;떡볶이 떡 길이 계산&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr&lt;span style="color:#f92672">.&lt;/span>sort(reverse&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># diff &amp;amp; cnt 만들기&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr_dup &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cnts &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> diffs &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(N&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> d &lt;span style="color:#f92672">=&lt;/span> arr[i] &lt;span style="color:#f92672">-&lt;/span> arr[i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> d &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr_dup&lt;span style="color:#f92672">.&lt;/span>append(arr[i])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cnts&lt;span style="color:#f92672">.&lt;/span>append(c)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> diffs&lt;span style="color:#f92672">.&lt;/span>append(d)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr_dup&lt;span style="color:#f92672">.&lt;/span>extend([arr[&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>], &lt;span style="color:#ae81ff">0&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cnts&lt;span style="color:#f92672">.&lt;/span>append(c&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> diffs&lt;span style="color:#f92672">.&lt;/span>append(arr[&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># dduck_diff&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dduk_diff &lt;span style="color:#f92672">=&lt;/span> [d&lt;span style="color:#f92672">*&lt;/span>c &lt;span style="color:#66d9ef">for&lt;/span> d,c &lt;span style="color:#f92672">in&lt;/span> zip(diffs, cnts)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># dduck&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dduk &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> dd &lt;span style="color:#f92672">in&lt;/span> dduk_diff:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s &lt;span style="color:#f92672">+=&lt;/span> dd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dduk&lt;span style="color:#f92672">.&lt;/span>append(s)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> idx &lt;span style="color:#f92672">=&lt;/span> binary_search(dduk, M, &lt;span style="color:#ae81ff">0&lt;/span>, len(dduk)&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> arr_dup[idx&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> (dduk[idx] &lt;span style="color:#f92672">-&lt;/span> M)&lt;span style="color:#f92672">//&lt;/span>cnts[idx]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># TEST&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>N, M &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>, &lt;span style="color:#ae81ff">6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">19&lt;/span>, &lt;span style="color:#ae81ff">15&lt;/span>, &lt;span style="color:#ae81ff">10&lt;/span>, &lt;span style="color:#ae81ff">17&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(solution(arr, N, M)) &lt;span style="color:#75715e"># 15&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>N, M &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>, &lt;span style="color:#ae81ff">6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">19&lt;/span>, &lt;span style="color:#ae81ff">15&lt;/span>, &lt;span style="color:#ae81ff">10&lt;/span>, &lt;span style="color:#ae81ff">17&lt;/span>, &lt;span style="color:#ae81ff">17&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(solution(arr, N, M)) &lt;span style="color:#75715e"># 15&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>N, M &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#ae81ff">6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">19&lt;/span>, &lt;span style="color:#ae81ff">15&lt;/span>, &lt;span style="color:#ae81ff">10&lt;/span>, &lt;span style="color:#ae81ff">17&lt;/span>, &lt;span style="color:#ae81ff">17&lt;/span>, &lt;span style="color:#ae81ff">19&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(solution(arr, N, M)) &lt;span style="color:#75715e"># 16&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>N, M &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#ae81ff">30&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">19&lt;/span>, &lt;span style="color:#ae81ff">15&lt;/span>, &lt;span style="color:#ae81ff">10&lt;/span>, &lt;span style="color:#ae81ff">17&lt;/span>, &lt;span style="color:#ae81ff">17&lt;/span>, &lt;span style="color:#ae81ff">19&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(solution(arr, N, M)) &lt;span style="color:#75715e"># 11&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>N, M &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#ae81ff">50&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">19&lt;/span>, &lt;span style="color:#ae81ff">15&lt;/span>, &lt;span style="color:#ae81ff">10&lt;/span>, &lt;span style="color:#ae81ff">17&lt;/span>, &lt;span style="color:#ae81ff">17&lt;/span>, &lt;span style="color:#ae81ff">19&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(solution(arr, N, M)) &lt;span style="color:#75715e"># 7&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>N, M &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#ae81ff">97&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">19&lt;/span>, &lt;span style="color:#ae81ff">15&lt;/span>, &lt;span style="color:#ae81ff">10&lt;/span>, &lt;span style="color:#ae81ff">17&lt;/span>, &lt;span style="color:#ae81ff">17&lt;/span>, &lt;span style="color:#ae81ff">19&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(solution(arr, N, M)) &lt;span style="color:#75715e"># 0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>시간복잡도 = $Nlog_2N + 7N + log_2N=O(Nlog_2N)$&lt;/li>
&lt;li>최악의 경우 대략 27,000,000번의 연산 필요&lt;/li>
&lt;/ul>
&lt;h3 id="문제-해설">
 문제 해설
 &lt;a class="anchor" href="#%eb%ac%b8%ec%a0%9c-%ed%95%b4%ec%84%a4">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>전형적인 이진 탐색 문제, &lt;!-- raw HTML omitted -->파라메트릭 서치&lt;!-- raw HTML omitted --> 유형의 문제&lt;/p></description></item><item><title/><link>https://yera10.github.io/docs/mystudy/algorithm-note/part2/7_%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89/%EB%B6%80%ED%92%88%EC%B0%BE%EA%B8%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part2/7_%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89/%EB%B6%80%ED%92%88%EC%B0%BE%EA%B8%B0/</guid><description>&lt;h1 id="부품-찾기">
 부품 찾기
 &lt;a class="anchor" href="#%eb%b6%80%ed%92%88-%ec%b0%be%ea%b8%b0">#&lt;/a>
&lt;/h1>
&lt;h3 id="input">
 INPUT
 &lt;a class="anchor" href="#input">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>$N$ : 탐색할 배열의 크기 ($1 \le N \le 1,000,000$)&lt;/li>
&lt;li>공백으로 구분된 N개의 정수: 탐색할 배열, $1 &amp;lt; 정수 \le 1,000,000$&lt;/li>
&lt;li>$M$ : 찾으려는 숫자의 갯수 ($1 \le M \le 100,000$)&lt;/li>
&lt;li>공백으로 구분된 M개의 정수: 탐색할 값, ($1 &amp;lt; N \le 1,000,000$)&lt;/li>
&lt;/ul>
&lt;h3 id="output">
 OUTPUT
 &lt;a class="anchor" href="#output">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>찾으려는 값들의 존재 여부를 yes, no로 출력&lt;/li>
&lt;/ul>
&lt;h3 id="example">
 Example
 &lt;a class="anchor" href="#example">#&lt;/a>
&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">Input&lt;/th>
 &lt;th style="text-align: left">Output&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">5&lt;!-- raw HTML omitted -->8 3 7 9 2&lt;!-- raw HTML omitted -->3&lt;!-- raw HTML omitted -->5 7 9&lt;/td>
 &lt;td style="text-align: left">no yes yes&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="my-solution">
 My Solution
 &lt;a class="anchor" href="#my-solution">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># SOLUTION&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">binary_search&lt;/span>(arr, target, s, e):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> e &lt;span style="color:#f92672">&amp;lt;&lt;/span> s:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> m &lt;span style="color:#f92672">=&lt;/span> (s&lt;span style="color:#f92672">+&lt;/span>e)&lt;span style="color:#f92672">//&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> arr[m] &lt;span style="color:#f92672">&amp;lt;&lt;/span> target:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> binary_search(arr, target, m&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> arr[m] &lt;span style="color:#f92672">&amp;gt;&lt;/span> target:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> binary_search(arr, target, s, m&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> arr[m]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">solution&lt;/span>(arr, targets, N):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr&lt;span style="color:#f92672">.&lt;/span>sort()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> t &lt;span style="color:#f92672">in&lt;/span> targets:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> binary_search(arr, t, &lt;span style="color:#ae81ff">0&lt;/span>, N&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;yes&amp;#34;&lt;/span>, end&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;no&amp;#34;&lt;/span>, end&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="solution">
 Solution
 &lt;a class="anchor" href="#solution">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">solution&lt;/span>(arr, targets, N):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr_sort &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">1000001&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> a &lt;span style="color:#f92672">in&lt;/span> arr:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr_sort[a] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> t &lt;span style="color:#f92672">in&lt;/span> targets:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> arr_sort[t]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;yes&amp;#34;&lt;/span>, end&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;no&amp;#34;&lt;/span>, end&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># TEST&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>N &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">8&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">7&lt;/span>, &lt;span style="color:#ae81ff">9&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>M &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>targets &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">5&lt;/span>, &lt;span style="color:#ae81ff">7&lt;/span>, &lt;span style="color:#ae81ff">9&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>solution(arr, targets, N)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://yera10.github.io/docs/mystudy/algorithm-note/part2/7_%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89/%EC%A7%95%EA%B2%80%EB%8B%A4%EB%A6%AC%EA%B1%B4%EB%84%88%EA%B8%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part2/7_%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89/%EC%A7%95%EA%B2%80%EB%8B%A4%EB%A6%AC%EA%B1%B4%EB%84%88%EA%B8%B0/</guid><description>&lt;h1 id="프로그래머스---징검다리-건너기">
 프로그래머스 - 징검다리 건너기
 &lt;a class="anchor" href="#%ed%94%84%eb%a1%9c%ea%b7%b8%eb%9e%98%eb%a8%b8%ec%8a%a4---%ec%a7%95%ea%b2%80%eb%8b%a4%eb%a6%ac-%ea%b1%b4%eb%84%88%ea%b8%b0">#&lt;/a>
&lt;/h1>
&lt;p>문제 링크 : &lt;a href="https://school.programmers.co.kr/learn/courses/30/lessons/64062">링크&lt;/a>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h3 id="input">
 &lt;strong>Input&lt;/strong>
 &lt;a class="anchor" href="#input">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>디딤돌에 적힌 숫자가 순서대로 담긴 배열 stones&lt;/li>
&lt;li>한 번에 건너뛸 수 있는 디딤돌의 최대 칸수 k&lt;/li>
&lt;li>디딤돌에는 모두 숫자가 적혀 있으며 디딤돌의 숫자는 한 번 밟을 때마다 1씩 줄어듭니다.&lt;/li>
&lt;li>디딤돌의 숫자가 0이 되면 더 이상 밟을 수 없으며 이때는 그 다음 디딤돌로 한번에 여러 칸을 건너 뛸 수 있습니다.&lt;/li>
&lt;li>단, 다음으로 밟을 수 있는 디딤돌이 여러 개인 경우 무조건 가장 가까운 디딤돌로만 건너뛸 수 있습니다&lt;/li>
&lt;/ul>
&lt;h3 id="output">
 &lt;strong>Output&lt;/strong>
 &lt;a class="anchor" href="#output">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>최대 몇 명까지 징검다리를 건널 수 있는지 return&lt;/li>
&lt;/ul>
&lt;h3 id="입력과-출력-예">
 &lt;strong>입력과 출력 예&lt;/strong>
 &lt;a class="anchor" href="#%ec%9e%85%eb%a0%a5%ea%b3%bc-%ec%b6%9c%eb%a0%a5-%ec%98%88">#&lt;/a>
&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">stones&lt;/th>
 &lt;th style="text-align: left">k&lt;/th>
 &lt;th style="text-align: left">result&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">[2, 4, 5, 3, 2, 1, 4, 2, 5, 1]&lt;/td>
 &lt;td style="text-align: left">3&lt;/td>
 &lt;td style="text-align: left">3&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="나의-풀이-코드">
 &lt;strong>나의 풀이 코드&lt;/strong>
 &lt;a class="anchor" href="#%eb%82%98%ec%9d%98-%ed%92%80%ec%9d%b4-%ec%bd%94%eb%93%9c">#&lt;/a>
&lt;/h3>
&lt;p>통과 (313.83ms, 18.6MB)&lt;/p></description></item><item><title/><link>https://yera10.github.io/docs/mystudy/algorithm-note/part2/8_%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/1%EB%A1%9C%EB%A7%8C%EB%93%A4%EA%B8%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part2/8_%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/1%EB%A1%9C%EB%A7%8C%EB%93%A4%EA%B8%B0/</guid><description>&lt;h1 id="1로-만들기">
 1로 만들기
 &lt;a class="anchor" href="#1%eb%a1%9c-%eb%a7%8c%eb%93%a4%ea%b8%b0">#&lt;/a>
&lt;/h1>
&lt;p>정수 X에 대해 4가지 연산을 사용해 1을 만들려고 함.
최소한의 연산횟수를 구하기.&lt;/p>
&lt;p>연산&lt;/p>
&lt;ol>
&lt;li>X가 5로 나누어 떨어지면, 5로 나눈다.&lt;/li>
&lt;li>X가 3로 나누어 떨어지면, 3으로 나눈다.&lt;/li>
&lt;li>X가 2로 나누어 떨어지면, 2로 나눈다.&lt;/li>
&lt;li>X에서 1을 뺀다.&lt;/li>
&lt;/ol>
&lt;h3 id="input">
 INPUT
 &lt;a class="anchor" href="#input">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>첫째줄 정수 X&lt;/li>
&lt;li>1 &amp;lt;= X &amp;lt;= 30,000&lt;/li>
&lt;/ul>
&lt;h3 id="output">
 OUTPUT
 &lt;a class="anchor" href="#output">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>최소한의 연산 횟수&lt;/li>
&lt;/ul>
&lt;h3 id="my-solution">
 My Solution
 &lt;a class="anchor" href="#my-solution">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>연산1이 항상 연산2보다 좋다고 할 수 없음.&lt;br>
(연산2가 항상 연산3보다 좋을 수 없으며, 연산3이 항상 연산4보다 좋을 수 없음.) =&amp;gt; greedy 아님&lt;/li>
&lt;li>어느정도 탐색과 모험?이 필요함.&lt;/li>
&lt;li>X가 5로 나누어 떨어진다면, f(X)는 f(X//5)+1이 될 수도 있음. f(X//5) 또한 최소한의 연산횟수일 거기 때문에&lt;/li>
&lt;li>그렇다면, 상향식이 좋을까? 하향식이 좋을까?
&lt;ul>
&lt;li>하향식이 최소한의 연산을 쓸 것 같아서 좋지만, 스택공간이 부족할 것 같기도 함&lt;/li>
&lt;li>상향식이면.. 어떻게 연산할 숫자들을 &amp;hellip;?&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># SOLUTION&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>noprs &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">30001&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">solution&lt;/span>(x):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> x &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">or&lt;/span> noprs[x]&lt;span style="color:#f92672">!=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> noprs[x]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> oprs &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> x&lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> oprs&lt;span style="color:#f92672">.&lt;/span>append(solution(x&lt;span style="color:#f92672">//&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> x&lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> oprs&lt;span style="color:#f92672">.&lt;/span>append(solution(x&lt;span style="color:#f92672">//&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> x &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> oprs&lt;span style="color:#f92672">.&lt;/span>append(solution(x&lt;span style="color:#f92672">//&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> oprs&lt;span style="color:#f92672">.&lt;/span>append(solution(x&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> noprs[x] &lt;span style="color:#f92672">=&lt;/span> min(oprs)&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> noprs[x]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># INPUT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>X &lt;span style="color:#f92672">=&lt;/span> int(input())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(solution(X))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="book-solution">
 Book Solution
 &lt;a class="anchor" href="#book-solution">#&lt;/a>
&lt;/h3>
&lt;p>Bottom-Up&lt;/p></description></item><item><title/><link>https://yera10.github.io/docs/mystudy/algorithm-note/part2/8_%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/%EA%B0%9C%EB%AF%B8%EC%A0%84%EC%82%AC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part2/8_%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/%EA%B0%9C%EB%AF%B8%EC%A0%84%EC%82%AC/</guid><description>&lt;h1 id="개미전사">
 개미전사
 &lt;a class="anchor" href="#%ea%b0%9c%eb%af%b8%ec%a0%84%ec%82%ac">#&lt;/a>
&lt;/h1>
&lt;p>메뚜기 마을의 식량창고는 일직선상에 있음. &lt;br>
개미전사가 메뚜기의 식량창고를 선택적으로 약탈하여 식량을 뺏을 예정&lt;br>
하지만, 메뚜기들은 인접한 식량창고가 털리면 바로 알아챔. &lt;br>
고로, 최소 한 칸 이상 떨어진 식량창고를 약탈할 수 있음. &lt;br>
최대한 많이 얻을 수 있는 식량은?&lt;/p>
&lt;h3 id="input">
 INPUT
 &lt;a class="anchor" href="#input">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>첫째줄에 식량창고의 개수 N,&lt;/li>
&lt;li>3 &amp;lt;= N &amp;lt;= 100&lt;/li>
&lt;li>둘째줄에 공백으로 구분된 식량창고에 저장된 식량의 개수 K&lt;/li>
&lt;li>0 &amp;lt;= K &amp;lt;= 1000&lt;/li>
&lt;/ul>
&lt;h3 id="output">
 OUTPUT
 &lt;a class="anchor" href="#output">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>개미전사가 얻을 수 있는 식량의 최댓값&lt;/li>
&lt;/ul>
&lt;h3 id="example">
 Example
 &lt;a class="anchor" href="#example">#&lt;/a>
&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">입력&lt;/th>
 &lt;th style="text-align: left">출력&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">4&lt;!-- raw HTML omitted -->1 3 1 5&lt;/td>
 &lt;td style="text-align: left">8&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="my-solution">
 My Solution
 &lt;a class="anchor" href="#my-solution">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">solution&lt;/span>(N, arr):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp_arr &lt;span style="color:#f92672">=&lt;/span> arr[:&lt;span style="color:#ae81ff">2&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> [&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">*&lt;/span>(N&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">2&lt;/span>, N):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp_arr[i] &lt;span style="color:#f92672">=&lt;/span> max(dp_arr[i&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>], dp_arr[i&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> arr[i])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> dp_arr[&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># INPUT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>N &lt;span style="color:#f92672">=&lt;/span> int(input())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr &lt;span style="color:#f92672">=&lt;/span> list(map(int, input()&lt;span style="color:#f92672">.&lt;/span>split()))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># OUTPUT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(solution(N, arr))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://yera10.github.io/docs/mystudy/algorithm-note/part2/8_%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/%EB%B0%94%EB%8B%A5%EA%B3%B5%EC%82%AC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part2/8_%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/%EB%B0%94%EB%8B%A5%EA%B3%B5%EC%82%AC/</guid><description>&lt;h1 id="바닥공사">
 바닥공사
 &lt;a class="anchor" href="#%eb%b0%94%eb%8b%a5%ea%b3%b5%ec%82%ac">#&lt;/a>
&lt;/h1>
&lt;p>세로 x 가로가 2 x N인 바닥에 1x2 2x1 2x2 인 타일을 덮는 경우의 수 구하기&lt;/p>
&lt;h3 id="input">
 INPUT
 &lt;a class="anchor" href="#input">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>가로길이 N&lt;/li>
&lt;li>1 &amp;lt;= N &amp;lt;= 1,000&lt;/li>
&lt;/ul>
&lt;h3 id="output">
 OUTPUT
 &lt;a class="anchor" href="#output">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>바닥을 채우는 방법의 수를 796,796으로 나눈 나머지 구하기&lt;/li>
&lt;/ul>
&lt;h3 id="my-solution">
 My Solution
 &lt;a class="anchor" href="#my-solution">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>세로가 무조건 2니까 2x2 공간을 덮는 경우의 수는 3가지&lt;/li>
&lt;li>하지만 무조건 2칸으로 다 나눌 수는 없다! 개미전사 문제처럼 앞에서부터 한칸씩 풀면 될까?&lt;/li>
&lt;li>가로가 N일때 경우의 수는 (N-1일 때 방법의 수) + (N-2일 때 방법의 수)*2&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">solution&lt;/span>(N):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">*&lt;/span>N
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">2&lt;/span>, N):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr[i] &lt;span style="color:#f92672">=&lt;/span> (arr[i&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">*&lt;/span>arr[i&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>]) &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">796796&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> arr[&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># INPUT &amp;amp; OUTPUT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>N &lt;span style="color:#f92672">=&lt;/span> int(input())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(solution(N))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://yera10.github.io/docs/mystudy/algorithm-note/part2/8_%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8%ED%99%94%ED%8F%90%EA%B5%AC%EC%84%B1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part2/8_%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8%ED%99%94%ED%8F%90%EA%B5%AC%EC%84%B1/</guid><description>&lt;h1 id="효율적인-화폐-구성">
 효율적인 화폐 구성
 &lt;a class="anchor" href="#%ed%9a%a8%ec%9c%a8%ec%a0%81%ec%9d%b8-%ed%99%94%ed%8f%90-%ea%b5%ac%ec%84%b1">#&lt;/a>
&lt;/h1>
&lt;p>N가지 종류의 화폐로 최소한의 갯수를 사용해서 M원 만들기.&lt;/p>
&lt;h3 id="input">
 INPUT
 &lt;a class="anchor" href="#input">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>화폐의 종류 수 N&lt;/li>
&lt;li>1 &amp;lt;= N &amp;lt;= 100&lt;/li>
&lt;li>만들려는 목표 금액 M&lt;/li>
&lt;li>1 &amp;lt;= M &amp;lt;= 10,000&lt;/li>
&lt;/ul>
&lt;h3 id="output">
 OUTPUT
 &lt;a class="anchor" href="#output">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>M원을 만들기 위한 최소한의 화폐 개수&lt;/li>
&lt;li>불가능할 때는 -1&lt;/li>
&lt;/ul>
&lt;h3 id="my-solution">
 My Solution
 &lt;a class="anchor" href="#my-solution">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">solution&lt;/span>(M, coins):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> d &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> [&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">10000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">1&lt;/span>, M&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dmin &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10001&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> c &lt;span style="color:#f92672">in&lt;/span> coins:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> i&lt;span style="color:#f92672">-&lt;/span>c &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">and&lt;/span> d[i&lt;span style="color:#f92672">-&lt;/span>c] &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dmin &lt;span style="color:#f92672">=&lt;/span> min(dmin, d[i&lt;span style="color:#f92672">-&lt;/span>c])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dmin &lt;span style="color:#f92672">=&lt;/span> dmin &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> dmin&lt;span style="color:#f92672">!=&lt;/span>&lt;span style="color:#ae81ff">10001&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> d[i] &lt;span style="color:#f92672">=&lt;/span> dmin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> d[M]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># INPUT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>N, M &lt;span style="color:#f92672">=&lt;/span> map(int, input()&lt;span style="color:#f92672">.&lt;/span>split())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>coins &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(N):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> coins&lt;span style="color:#f92672">.&lt;/span>append(int(input()))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># OUTPUT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(solution(M, coins))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://yera10.github.io/docs/mystudy/algorithm-note/part3/11_greedy/%EA%B3%B1%ED%95%98%EA%B8%B0-%ED%98%B9%EC%9D%80-%EB%8D%94%ED%95%98%EA%B8%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part3/11_greedy/%EA%B3%B1%ED%95%98%EA%B8%B0-%ED%98%B9%EC%9D%80-%EB%8D%94%ED%95%98%EA%B8%B0/</guid><description>&lt;h1 id="곱하기-혹은-더하기">
 곱하기 혹은 더하기
 &lt;a class="anchor" href="#%ea%b3%b1%ed%95%98%ea%b8%b0-%ed%98%b9%ec%9d%80-%eb%8d%94%ed%95%98%ea%b8%b0">#&lt;/a>
&lt;/h1>
&lt;h3 id="input">
 Input
 &lt;a class="anchor" href="#input">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>S : 첫째 줄에 주어지는 여러 개의 숫자로 구성된 문자열 (1 &amp;lt;= S의 길이 &amp;lt;= 20)&lt;/li>
&lt;/ul>
&lt;h3 id="output">
 Output
 &lt;a class="anchor" href="#output">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>만들어질 수 있는 가장 큰 수&lt;/li>
&lt;/ul>
&lt;h3 id="rule">
 Rule
 &lt;a class="anchor" href="#rule">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>왼쪽부터 오른쪽으로 하나씩 모든 숫자 사이에 &amp;ldquo;x&amp;rdquo; 혹은 &amp;ldquo;+&amp;rdquo; 연산자를 넣어 만들어질 수 있는 가장 큰 수 구하기&lt;/li>
&lt;li>연산 순서는 &amp;ldquo;x&amp;rdquo;, &amp;ldquo;+&amp;rdquo; 상관 없이 무조건 왼쪽부터 순서대로&lt;/li>
&lt;/ul>
&lt;h3 id="example">
 Example
 &lt;a class="anchor" href="#example">#&lt;/a>
&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">입력&lt;/th>
 &lt;th style="text-align: left">출력&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">02984&lt;/td>
 &lt;td style="text-align: left">576&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">567&lt;/td>
 &lt;td style="text-align: left">210&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="my-solution">
 My Solution
 &lt;a class="anchor" href="#my-solution">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">solution&lt;/span>(S):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> S &lt;span style="color:#f92672">=&lt;/span> list(S)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#f92672">=&lt;/span> int(S&lt;span style="color:#f92672">.&lt;/span>pop(&lt;span style="color:#ae81ff">0&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> n &lt;span style="color:#f92672">in&lt;/span> S:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#f92672">=&lt;/span> max(res&lt;span style="color:#f92672">+&lt;/span>int(n), res&lt;span style="color:#f92672">*&lt;/span>int(n))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> res
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>S &lt;span style="color:#f92672">=&lt;/span> input()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(solution(S))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="answer">
 Answer
 &lt;a class="anchor" href="#answer">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>data &lt;span style="color:#f92672">=&lt;/span> input()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 첫 번째 문자를 숫자로 변경하여 대입&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>result &lt;span style="color:#f92672">=&lt;/span> int(data[&lt;span style="color:#ae81ff">0&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">1&lt;/span>, len(data)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 두 수 중에서 하나라도 &amp;#39;0&amp;#39; 혹은 &amp;#39;1&amp;#39;인 경우, 곱하기보다는 더하기 수행&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num &lt;span style="color:#f92672">=&lt;/span> int(data[i])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> num &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">or&lt;/span> result &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">+=&lt;/span> num
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">*=&lt;/span> num
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(result)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://yera10.github.io/docs/mystudy/algorithm-note/part3/11_greedy/%EB%A7%8C%EB%93%A4%EC%88%98%EC%97%86%EB%8A%94%EA%B8%88%EC%95%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part3/11_greedy/%EB%A7%8C%EB%93%A4%EC%88%98%EC%97%86%EB%8A%94%EA%B8%88%EC%95%A1/</guid><description>&lt;h1 id="만들-수-없는-금액">
 만들 수 없는 금액
 &lt;a class="anchor" href="#%eb%a7%8c%eb%93%a4-%ec%88%98-%ec%97%86%eb%8a%94-%ea%b8%88%ec%95%a1">#&lt;/a>
&lt;/h1>
&lt;h3 id="input">
 Input
 &lt;a class="anchor" href="#input">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>첫째 줄: 에 입력되는 동전의 개수 N (1 &amp;lt;= N &amp;lt;= 1,000)&lt;/li>
&lt;li>둘째 줄: 각 동전의 화폐 단위를 나타나는 N개의 자연수,&lt;/li>
&lt;/ul>
&lt;h3 id="output">
 Output
 &lt;a class="anchor" href="#output">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>첫째 줄에 주어진 동전들로 만들 수 없는 양의 정수 금액 중 최솟값&lt;/li>
&lt;/ul>
&lt;h3 id="rule">
 Rule
 &lt;a class="anchor" href="#rule">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>N개의 동전을 이용하여 만들 수 없는 양의 정수 금액 중 최솟값을 구하는 프로그램 작성&lt;/li>
&lt;/ul>
&lt;h3 id="example">
 Example
 &lt;a class="anchor" href="#example">#&lt;/a>
&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">입력&lt;/th>
 &lt;th style="text-align: left">출력&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">5 &lt;!-- raw HTML omitted --> 3 2 1 1 9&lt;/td>
 &lt;td style="text-align: left">8&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="my-solution">
 My Solution
 &lt;a class="anchor" href="#my-solution">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> heapq
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">solution&lt;/span>(coins):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> coins&lt;span style="color:#f92672">.&lt;/span>sort(reverse &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sums &lt;span style="color:#f92672">=&lt;/span> set()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> n &lt;span style="color:#f92672">in&lt;/span> sums:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> &lt;span style="color:#f92672">not&lt;/span> coins &lt;span style="color:#f92672">or&lt;/span> (coins[&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">&amp;gt;&lt;/span> n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> n 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c &lt;span style="color:#f92672">=&lt;/span> coins&lt;span style="color:#f92672">.&lt;/span>pop()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sums &lt;span style="color:#f92672">=&lt;/span> sums&lt;span style="color:#f92672">.&lt;/span>union({s&lt;span style="color:#f92672">+&lt;/span>c &lt;span style="color:#66d9ef">for&lt;/span> s &lt;span style="color:#f92672">in&lt;/span> sums})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sums&lt;span style="color:#f92672">.&lt;/span>add(c)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>_ &lt;span style="color:#f92672">=&lt;/span> input()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>coins &lt;span style="color:#f92672">=&lt;/span> list(map(int, coins&lt;span style="color:#f92672">.&lt;/span>split()))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(solution(coins))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="answer">
 Answer
 &lt;a class="anchor" href="#answer">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>n &lt;span style="color:#f92672">=&lt;/span> int(input())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data &lt;span style="color:#f92672">=&lt;/span> list(map(int, input()&lt;span style="color:#f92672">.&lt;/span>split()))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data&lt;span style="color:#f92672">.&lt;/span>sort()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>target &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> x &lt;span style="color:#f92672">in&lt;/span> data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> target &lt;span style="color:#f92672">&amp;lt;&lt;/span> x:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> target &lt;span style="color:#f92672">+=&lt;/span> x
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(target)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>data에서 $x_i$까지 탐색했을 때, $T$원 까지 만들 수 있었다고 하자. &lt;br>
다음 $x_{i+1}$을 볼 때, &lt;br>
$x_{i+1} \leq T \Rightarrow T+1$ ~ $T+x_{i+1}$원까지도 모두 만들 수 있음. &lt;br>
$x_{i+1} &amp;gt; T \Rightarrow T+1$원을 만들 수 없음.&lt;/li>
&lt;/ul></description></item><item><title/><link>https://yera10.github.io/docs/mystudy/algorithm-note/part3/11_greedy/%EB%AA%A8%ED%97%98%EA%B0%80%EA%B8%B8%EB%93%9C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part3/11_greedy/%EB%AA%A8%ED%97%98%EA%B0%80%EA%B8%B8%EB%93%9C/</guid><description>&lt;h1 id="모험가-길드">
 모험가 길드
 &lt;a class="anchor" href="#%eb%aa%a8%ed%97%98%ea%b0%80-%ea%b8%b8%eb%93%9c">#&lt;/a>
&lt;/h1>
&lt;h3 id="input">
 Input
 &lt;a class="anchor" href="#input">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>N : 첫째 줄에 주어지는 모험가의 수&lt;/li>
&lt;li>1 &amp;lt;= N &amp;lt;= 100,000&lt;/li>
&lt;li>각 모험가의 공포도 : 둘째 줄에 주어지는 N이하의 자연수 값들, 공백으로 구분됨&lt;/li>
&lt;/ul>
&lt;h3 id="output">
 Output
 &lt;a class="anchor" href="#output">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>여행을 떠날 수 있는 그룹 수의 최대값&lt;/li>
&lt;/ul>
&lt;h3 id="rule">
 Rule
 &lt;a class="anchor" href="#rule">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>공포도가 X인 모험가는 반드시 X명 이상으로 구성한 모험가 그룹에 참여해야 여행을 떠날 수 있음&lt;/li>
&lt;li>최대로 만들 수 있는 모험감의 그룹?&lt;/li>
&lt;/ul>
&lt;h3 id="example">
 Example
 &lt;a class="anchor" href="#example">#&lt;/a>
&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">입력&lt;/th>
 &lt;th style="text-align: left">출력&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">5 &lt;!-- raw HTML omitted --> 2 3 1 2 2&lt;/td>
 &lt;td style="text-align: left">2&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title/><link>https://yera10.github.io/docs/mystudy/algorithm-note/part3/11_greedy/%EB%B3%BC%EB%A7%81%EA%B3%B5%EA%B3%A0%EB%A5%B4%EA%B8%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part3/11_greedy/%EB%B3%BC%EB%A7%81%EA%B3%B5%EA%B3%A0%EB%A5%B4%EA%B8%B0/</guid><description>&lt;h1 id="볼링공-고르기">
 볼링공 고르기
 &lt;a class="anchor" href="#%eb%b3%bc%eb%a7%81%ea%b3%b5-%ea%b3%a0%eb%a5%b4%ea%b8%b0">#&lt;/a>
&lt;/h1>
&lt;h3 id="input">
 Input
 &lt;a class="anchor" href="#input">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>첫째줄 N, M : 볼링공의 갯수 N, 공의 최대 무게 M&lt;/li>
&lt;li>둘째줄 각 볼링공의 무게 K : 순서대로 자연수&lt;/li>
&lt;li>1 &amp;lt;= N &amp;lt;= 1,000, 1 &amp;lt;= M &amp;lt;=10&lt;/li>
&lt;li>1 &amp;lt;= K &amp;lt;= M&lt;/li>
&lt;/ul>
&lt;h3 id="output">
 Output
 &lt;a class="anchor" href="#output">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>두 사람이 볼링공을 고르는 경우의 수 출력&lt;/li>
&lt;/ul>
&lt;h3 id="rule">
 Rule
 &lt;a class="anchor" href="#rule">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>두 사람이 서로 다른 무게의 볼링공을 고르도록 한다.&lt;/li>
&lt;/ul>
&lt;h3 id="example">
 Example
 &lt;a class="anchor" href="#example">#&lt;/a>
&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">입력&lt;/th>
 &lt;th style="text-align: left">출력&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">5 3 &lt;!-- raw HTML omitted --> 1 3 2 3 2&lt;/td>
 &lt;td style="text-align: left">8&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">8 5 &lt;!-- raw HTML omitted --> 1 5 4 3 2 4 5 2&lt;/td>
 &lt;td style="text-align: left">25&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="my-solution">
 My Solution
 &lt;a class="anchor" href="#my-solution">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> collections &lt;span style="color:#f92672">import&lt;/span> Counter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">solution&lt;/span>(N, data):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cnt &lt;span style="color:#f92672">=&lt;/span> Counter(data)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#f92672">=&lt;/span> N &lt;span style="color:#f92672">*&lt;/span> (N&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> k,v &lt;span style="color:#f92672">in&lt;/span> cnt&lt;span style="color:#f92672">.&lt;/span>items():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> v &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#f92672">-=&lt;/span> (v&lt;span style="color:#f92672">*&lt;/span>(v&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> res&lt;span style="color:#f92672">//&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>N, M &lt;span style="color:#f92672">=&lt;/span> map(int, input()&lt;span style="color:#f92672">.&lt;/span>split())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data &lt;span style="color:#f92672">=&lt;/span> list(map(int, input()&lt;span style="color:#f92672">.&lt;/span>split()))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(N, data)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="answer">
 Answer
 &lt;a class="anchor" href="#answer">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>n, m &lt;span style="color:#f92672">=&lt;/span> map(int, input()&lt;span style="color:#f92672">.&lt;/span>split())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data &lt;span style="color:#f92672">=&lt;/span> list(map(int, input()&lt;span style="color:#f92672">.&lt;/span>split()))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 1부터 10까지의 무게를 담을 수 있는 리스트&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>array &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">11&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> x &lt;span style="color:#f92672">in&lt;/span> data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 각 무게에 해당하는 볼링공의 개수 카운트&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> array[x] &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>result &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 1부터 m까지의 각 무게에 대하여 처리&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">1&lt;/span>, m &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#f92672">-=&lt;/span> array[i] &lt;span style="color:#75715e"># 무게가 i인 볼링공의 개수(A가 선택할 수 있는 개수) 제외&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">+=&lt;/span> array[i] &lt;span style="color:#f92672">*&lt;/span> n &lt;span style="color:#75715e"># B가 선택하는 경우의 수와 곱해주기&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(result)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://yera10.github.io/docs/mystudy/deep-learning-study/paper_lora/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/deep-learning-study/paper_lora/</guid><description>&lt;h1 id="lora-low-rank-adaptation-of-large-language-models">
 LoRA: LOW-RANK ADAPTATION OF LARGE LANGUAGE MODELS
 &lt;a class="anchor" href="#lora-low-rank-adaptation-of-large-language-models">#&lt;/a>
&lt;/h1>
&lt;blockquote>
&lt;p>&lt;a href="https://arxiv.org/pdf/2106.09685.pdf">paper&lt;/a>&lt;br>
&lt;a href="https://velog.io/@kameleon43/%EB%85%BC%EB%AC%B8%EB%A6%AC%EB%B7%B0-LORA-LOW-RANK-ADAPTATION-OF-LARGE-LANGUAGE-MODELS">참고&lt;/a>&lt;br>
&lt;a href="https://youtu.be/BJqwmDpa0wM?si=PvFFUPCHEBKeZq6H">유튜브 딥러닝논문읽기모임&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>파라미터 사이즈가 점점 커짐에 따른 Parameter Efficient Tuning 기법 중 하나&lt;/li>
&lt;li>downstream task&lt;/li>
&lt;li>fine-tuning 하는 과제&lt;/li>
&lt;li>모든 dense layer에 적용 가능&lt;/li>
&lt;li>효율적인 튜닝 달성&lt;/li>
&lt;/ul></description></item><item><title/><link>https://yera10.github.io/docs/mystudy/deep-learning-study/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/deep-learning-study/readme/</guid><description>&lt;h1 id="dl">
 DL
 &lt;a class="anchor" href="#dl">#&lt;/a>
&lt;/h1>
&lt;p>Deep Learning 공부 기록 노트&lt;/p></description></item><item><title>clone 관련</title><link>https://yera10.github.io/docs/memo/commands/git/clone/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/memo/commands/git/clone/</guid><description>&lt;h3 id="클론">
 클론
 &lt;a class="anchor" href="#%ed%81%b4%eb%a1%a0">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone &lt;span style="color:#f92672">{&lt;/span>REPO_URL&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#f92672">{&lt;/span>DIR_생략가능&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="클론-시-인증하기">
 클론 시 인증하기
 &lt;a class="anchor" href="#%ed%81%b4%eb%a1%a0-%ec%8b%9c-%ec%9d%b8%ec%a6%9d%ed%95%98%ea%b8%b0">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Username &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#e6db74">&amp;#39;https://github.com&amp;#39;&lt;/span>: &lt;span style="color:#f92672">{&lt;/span>사용자명 입력하기&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Password &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#e6db74">&amp;#39;https://NAME@github.com&amp;#39;&lt;/span>: &lt;span style="color:#f92672">{&lt;/span>토큰 붙여넣기&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>토큰발급방법: github 로그인 &amp;gt; Settings &amp;gt; Developer settings &amp;gt; Personal access tokens &amp;gt; Generate New Token &amp;gt; 필요항목 입력 후 Generate Token &lt;a href="https://velog.io/@rxdryd/git-clone-%EC%98%A4%EB%A5%98">[참고]&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>commit 취소</title><link>https://yera10.github.io/docs/memo/commands/git/cancel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/memo/commands/git/cancel/</guid><description>&lt;h3 id="commit-취소">
 commit 취소
 &lt;a class="anchor" href="#commit-%ec%b7%a8%ec%86%8c">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 꺽쇠 수만큼 전으로 돌아감&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git reset HEAD^
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git reset HEAD^^
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 숫자만큼 전으로 돌아감&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git reset HEAD~1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git reset HEAD~2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="commit-취소---push-했을-때">
 commit 취소 - push 했을 때
 &lt;a class="anchor" href="#commit-%ec%b7%a8%ec%86%8c---push-%ed%96%88%ec%9d%84-%eb%95%8c">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git reset HEAD^
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 원하는 시점으로 되돌리기&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git reflog
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git reset &lt;span style="color:#f92672">{&lt;/span>commit id&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 강제 푸시&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push origin &lt;span style="color:#f92672">{&lt;/span>branch name&lt;span style="color:#f92672">}&lt;/span> -f
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>credential 관련</title><link>https://yera10.github.io/docs/memo/commands/git/credential/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/memo/commands/git/credential/</guid><description>&lt;h3 id="credential-정보를-반영구-저장">
 Credential 정보를 반영구 저장
 &lt;a class="anchor" href="#credential-%ec%a0%95%eb%b3%b4%eb%a5%bc-%eb%b0%98%ec%98%81%ea%b5%ac-%ec%a0%80%ec%9e%a5">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git config credential.helper store
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://pinedance.github.io/blog/2019/05/29/Git-Credential">[참고]&lt;/a>&lt;/p>
&lt;h3 id="모든-설정값-확인">
 모든 설정값 확인
 &lt;a class="anchor" href="#%eb%aa%a8%eb%93%a0-%ec%84%a4%ec%a0%95%ea%b0%92-%ed%99%95%ec%9d%b8">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git config --list
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>git 기본 명령어</title><link>https://yera10.github.io/docs/memo/commands/git/basic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/memo/commands/git/basic/</guid><description>&lt;h3 id="git-상태-확인하기">
 git 상태 확인하기
 &lt;a class="anchor" href="#git-%ec%83%81%ed%83%9c-%ed%99%95%ec%9d%b8%ed%95%98%ea%b8%b0">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git status -s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="stage에-올리기">
 stage에 올리기
 &lt;a class="anchor" href="#stage%ec%97%90-%ec%98%ac%eb%a6%ac%ea%b8%b0">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone &lt;span style="color:#f92672">{&lt;/span>File_Path&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="commit-하기">
 commit 하기
 &lt;a class="anchor" href="#commit-%ed%95%98%ea%b8%b0">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git commit -m &lt;span style="color:#e6db74">&amp;#34;커밋메세지&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="push-하기">
 push 하기
 &lt;a class="anchor" href="#push-%ed%95%98%ea%b8%b0">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git push
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>GPU 관련</title><link>https://yera10.github.io/docs/memo/commands/linux/gpu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/memo/commands/linux/gpu/</guid><description>&lt;h3 id="gpu-스펙-확인">
 GPU 스펙 확인
 &lt;a class="anchor" href="#gpu-%ec%8a%a4%ed%8e%99-%ed%99%95%ec%9d%b8">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>nvidia-smi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="사용용량-확인">
 사용용량 확인
 &lt;a class="anchor" href="#%ec%82%ac%ec%9a%a9%ec%9a%a9%eb%9f%89-%ed%99%95%ec%9d%b8">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>nvidia-smi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>poetry 가상환경에 jupyter 설치 안됨</title><link>https://yera10.github.io/docs/memo/omg-error/poetry_venv_broken/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/memo/omg-error/poetry_venv_broken/</guid><description>&lt;h2 id="에러-발생">
 에러 발생
 &lt;a class="anchor" href="#%ec%97%90%eb%9f%ac-%eb%b0%9c%ec%83%9d">#&lt;/a>
&lt;/h2>
&lt;p>poetry로 의존성을 관리하고 있었고, poetry의 가상환경으로 jupyter notebook을 작성하기 위해 &lt;code>poetry add jupyter ipykernel&lt;/code> 을 입력했다.&lt;br>
&lt;code>attrs&lt;/code>라는 패키지를 설치하다가 failed.&lt;br>
또잉?&lt;br>
에러메세지를 검색해봤지만, 모르겠어서 일단 poetry 패키지를 살펴보려고 &lt;code>poetry show&lt;/code>를입력했는데, 이러한 메세지가 뜨는 것..
내 가상환경이 부러졌다고..?&lt;/p>
&lt;pre tabindex="0">&lt;code>The currently activated Python version 3.9.13 is not supported by the project (^3.11).
Trying to find and use a compatible version. 
Using python3.11 (3.11.5)
The virtual environment found in C:\git\ddareung\.venv seems to be broken.
Recreating virtualenv ddareung in C:\git\ddareung\.venv
certifi (!) 2023.11.17 Python package for providing Mozilla&amp;#39;s CA Bundle.
charset-normalizer (!) 3.3.2 The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet.
idna (!) 3.6 Internationalized Domain Names in Applications (IDNA)
requests (!) 2.31.0 Python HTTP for Humans.
urllib3 (!) 2.1.0 HTTP library with thread-safe connection pooling, file post, and more.
&lt;/code>&lt;/pre>&lt;p>나중에 확인해보니, venv 가 부러진 게 문제가 아니었다. 다시 &lt;code>poetry show&lt;/code> 해보니, 아무 문제 없었고, &lt;code>poetry add jupyter&lt;/code>를 입력했을 때, 또 같은 문제 발생.&lt;/p></description></item><item><title>Poetry 시작하기</title><link>https://yera10.github.io/docs/memo/commands/poetry/poetry_start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/memo/commands/poetry/poetry_start/</guid><description>&lt;h3 id="poetry-설치-windows">
 poetry 설치 (Windows)
 &lt;a class="anchor" href="#poetry-%ec%84%a4%ec%b9%98-windows">#&lt;/a>
&lt;/h3>
&lt;p>pip으로 설치&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmd" data-lang="cmd">&lt;span style="display:flex;">&lt;span>pip install --user poetry
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>powershell에서 아래 명령어로 설치&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>(Invoke-WebRequest -Uri https&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>//install.python-poetry.org -UseBasicParsing).Content | py -
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="poetry-환경변수-등록">
 poetry 환경변수 등록
 &lt;a class="anchor" href="#poetry-%ed%99%98%ea%b2%bd%eb%b3%80%ec%88%98-%eb%93%b1%eb%a1%9d">#&lt;/a>
&lt;/h3>
&lt;p>windows&lt;/p>
&lt;ul>
&lt;li>C:\Users\SEJONG\AppData\Roaming\Python\Scripts\ 또는 C:\Users\SEJONG\AppData\Roaming\Python\Python311\Scripts\ 또는 C:\Users\SEJONG\AppData\Roaming\pypoetry\venv\Scripts\ 에 poetry 가 있는지 확인&lt;/li>
&lt;li>poetry가 있는 주소를 환경변수에 등록&lt;/li>
&lt;/ul>
&lt;h3 id="poetry-시작">
 poetry 시작
 &lt;a class="anchor" href="#poetry-%ec%8b%9c%ec%9e%91">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmd" data-lang="cmd">&lt;span style="display:flex;">&lt;span>poetry init
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>각 입력사항에 맞게 입력하면, pyproject.toml 생성됨&lt;/p>
&lt;h3 id="poetry-config">
 poetry config
 &lt;a class="anchor" href="#poetry-config">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmd" data-lang="cmd">&lt;span style="display:flex;">&lt;span># poetry 설정값 확인
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>poetry config --list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span># 프로젝트 폴더 내에 가상환경을 저장
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>poetry config virtualenvs.in-project true 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="poetry-의존성-추가">
 poetry 의존성 추가
 &lt;a class="anchor" href="#poetry-%ec%9d%98%ec%a1%b4%ec%84%b1-%ec%b6%94%ea%b0%80">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>poetry add &lt;span style="color:#e6db74">&amp;#34;&amp;lt;패키지&amp;gt;&amp;lt;버전표기&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 예&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>poetry add &lt;span style="color:#e6db74">&amp;#34;selenium^4.10.0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 가장 최신 버전 설치할 때 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>poetry add &lt;span style="color:#f92672">{&lt;/span>패키지&lt;span style="color:#f92672">}&lt;/span>@latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="스크립트-실행">
 스크립트 실행
 &lt;a class="anchor" href="#%ec%8a%a4%ed%81%ac%eb%a6%bd%ed%8a%b8-%ec%8b%a4%ed%96%89">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>poetry run python &lt;span style="color:#f92672">{&lt;/span>실행파일&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="ref">
 Ref
 &lt;a class="anchor" href="#ref">#&lt;/a>
&lt;/h3>
&lt;p>&lt;a href="https://python-poetry.org/docs/cli/">https://python-poetry.org/docs/cli/&lt;/a>&lt;/p></description></item><item><title>python 실행파일 인자값 받기</title><link>https://yera10.github.io/docs/memo/commands/etc/python-parameter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/memo/commands/etc/python-parameter/</guid><description>&lt;h1 id="python-실행파일-인자값-받기">
 python 실행파일 인자값 받기
 &lt;a class="anchor" href="#python-%ec%8b%a4%ed%96%89%ed%8c%8c%ec%9d%bc-%ec%9d%b8%ec%9e%90%ea%b0%92-%eb%b0%9b%ea%b8%b0">#&lt;/a>
&lt;/h1>
&lt;h2 id="1-sysargv">
 1. sys.argv
 &lt;a class="anchor" href="#1-sysargv">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>test.py 가 아래와 같은 파일이고,&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> sys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(sys&lt;span style="color:#f92672">.&lt;/span>argv)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>아래 명령어를 실행하면,&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ python test.py abc hello name
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>출력은 아래와 같다.&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>[&amp;#39;test.py&amp;#39;, &amp;#39;abc&amp;#39;, &amp;#39;hello&amp;#39;, &amp;#39;name&amp;#39;]
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>sys.argv는 리스트이고, [0]은 무조건 실행파일명, 그 다움 순서대로 입력받은 인자값이 리스트에 들어감&lt;/li>
&lt;/ul>
&lt;h2 id="2-configparser">
 2. configparser
 &lt;a class="anchor" href="#2-configparser">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>아래와 같이 Section, Key, Value 값의 형태로 설정된 설정 파일을 사용
config file (확장자 .cfg)&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cfg" data-lang="cfg">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[SectionOne] # Section - 대괄호 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Status: Single # 속성 - Key : Value&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Name: Derek&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Value: Yes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Age: 30&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[SectionTwo]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">FavoriteColor&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">Green # :(콜론)을 써도 되고, =(equal)을 써도 된다. &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[SectionThree]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">FamilyName: Johnson&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>위 파일을 읽어들여 사용하는 아래 파일을 실행시키면 됨&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> configparser
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>config &lt;span style="color:#f92672">=&lt;/span> configparser&lt;span style="color:#f92672">.&lt;/span>ConfigParser()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>config&lt;span style="color:#f92672">.&lt;/span>sections() &lt;span style="color:#75715e"># 빈 List&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>config&lt;span style="color:#f92672">.&lt;/span>read(&lt;span style="color:#e6db74">&amp;#39;example.cfg&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>config&lt;span style="color:#f92672">.&lt;/span>sections() &lt;span style="color:#75715e"># Section Name들 List&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> sec &lt;span style="color:#f92672">in&lt;/span> config&lt;span style="color:#f92672">.&lt;/span>sections():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;---&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>sec&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">---&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> key &lt;span style="color:#f92672">in&lt;/span> config[sec]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> value &lt;span style="color:#f92672">=&lt;/span> config[sec][key]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">{0}&lt;/span>&lt;span style="color:#e6db74"> : &lt;/span>&lt;span style="color:#e6db74">{1}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>format(key, value))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="3-argparse">
 3. argparse
 &lt;a class="anchor" href="#3-argparse">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>args_test.py 가 아래와 같은 파일일 때,&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> argparse
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">parse_args&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parser &lt;span style="color:#f92672">=&lt;/span> argparse&lt;span style="color:#f92672">.&lt;/span>ArgumentParser(description&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ArgumentParser Tutorial&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parser&lt;span style="color:#f92672">.&lt;/span>add_argument(&lt;span style="color:#e6db74">&amp;#39;a&amp;#39;&lt;/span>, help&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;parameter description&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> group_gpus&lt;span style="color:#f92672">.&lt;/span>add_argument(&lt;span style="color:#e6db74">&amp;#34;-b&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;--bparam&amp;#34;&lt;/span>, type&lt;span style="color:#f92672">=&lt;/span>int, default&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>, help&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;b parameter description&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> args &lt;span style="color:#f92672">=&lt;/span> parser&lt;span style="color:#f92672">.&lt;/span>parse_args()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> args
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> args &lt;span style="color:#f92672">=&lt;/span> parse_args()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(args&lt;span style="color:#f92672">.&lt;/span>a)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(args&lt;span style="color:#f92672">.&lt;/span>bparam)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;__main__&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> main()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>아래와 같은 명령어를 실행하면&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ python args_test.py &lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span> -b &lt;span style="color:#e6db74">&amp;#34;world&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>아래와 같이 출력됨&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>hello
world
&lt;/code>&lt;/pre>&lt;p>&lt;a href="https://docs.python.org/3/library/argparse.html">ref&lt;/a>&lt;/p></description></item><item><title>python3 venv 사용법</title><link>https://yera10.github.io/docs/memo/commands/etc/python-venv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/memo/commands/etc/python-venv/</guid><description>&lt;h2 id="venv">
 venv
 &lt;a class="anchor" href="#venv">#&lt;/a>
&lt;/h2>
&lt;p>&lt;code>python2&lt;/code>에서는 써드파티 라이브러리인 &lt;code>virtualenv&lt;/code> 가상환경 라이브러리를 사용&lt;br>
&lt;code>python3&lt;/code>에서는 기본적으로 제공되는 &lt;code>venv&lt;/code> 가상환경 라이브러리를 사용&lt;/p>
&lt;h3 id="가상환경-생성">
 가상환경 생성
 &lt;a class="anchor" href="#%ea%b0%80%ec%83%81%ed%99%98%ea%b2%bd-%ec%83%9d%ec%84%b1">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>python -m venv &lt;span style="color:#f92672">{&lt;/span>가상환경이름&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="가상환경-활성화">
 가상환경 활성화
 &lt;a class="anchor" href="#%ea%b0%80%ec%83%81%ed%99%98%ea%b2%bd-%ed%99%9c%ec%84%b1%ed%99%94">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>가상환경이름&lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#ae81ff">\S&lt;/span>cripts&lt;span style="color:#ae81ff">\a&lt;/span>ctivate.bat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>source &lt;span style="color:#f92672">{&lt;/span>가상환경이름&lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#ae81ff">\S&lt;/span>cripts&lt;span style="color:#ae81ff">\a&lt;/span>ctivate.bat
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="가상환경-삭제">
 가상환경 삭제
 &lt;a class="anchor" href="#%ea%b0%80%ec%83%81%ed%99%98%ea%b2%bd-%ec%82%ad%ec%a0%9c">#&lt;/a>
&lt;/h3>
&lt;p>가상환경 이름의 폴더를 휴지통으로 이동 (삭제)&lt;/p></description></item><item><title>python3 서버열기</title><link>https://yera10.github.io/docs/memo/commands/etc/python-server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/memo/commands/etc/python-server/</guid><description>&lt;h3 id="python-으로-http-서버-열기">
 python 으로 http 서버 열기
 &lt;a class="anchor" href="#python-%ec%9c%bc%eb%a1%9c-http-%ec%84%9c%eb%b2%84-%ec%97%b4%ea%b8%b0">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ python3 -m http.server &amp;lt;포트번호 ex.8000&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Ubuntu Screen 명령어</title><link>https://yera10.github.io/docs/memo/commands/linux/screen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/memo/commands/linux/screen/</guid><description>&lt;h3 id="screen-tool-설치">
 screen tool 설치
 &lt;a class="anchor" href="#screen-tool-%ec%84%a4%ec%b9%98">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmd" data-lang="cmd">&lt;span style="display:flex;">&lt;span>sudo apt-get install screen
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="screen-생성">
 screen 생성
 &lt;a class="anchor" href="#screen-%ec%83%9d%ec%84%b1">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmd" data-lang="cmd">&lt;span style="display:flex;">&lt;span>screen -S &amp;lt;생성할 스크린 이름&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="screen-나가기">
 screen 나가기
 &lt;a class="anchor" href="#screen-%eb%82%98%ea%b0%80%ea%b8%b0">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>ctrl + a + d (단축키)&lt;/li>
&lt;/ul>
&lt;h3 id="screen-리스트-확인">
 screen 리스트 확인
 &lt;a class="anchor" href="#screen-%eb%a6%ac%ec%8a%a4%ed%8a%b8-%ed%99%95%ec%9d%b8">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmd" data-lang="cmd">&lt;span style="display:flex;">&lt;span>screen -ls
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="생성된-screen에-재접속">
 생성된 screen에 재접속
 &lt;a class="anchor" href="#%ec%83%9d%ec%84%b1%eb%90%9c-screen%ec%97%90-%ec%9e%ac%ec%a0%91%ec%86%8d">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmd" data-lang="cmd">&lt;span style="display:flex;">&lt;span>screen -R &amp;lt;접속할 스크린 이름&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>VSCode 단축키</title><link>https://yera10.github.io/docs/memo/commands/etc/vscode_shortcuts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/memo/commands/etc/vscode_shortcuts/</guid><description>&lt;h2 id="내가-자주-쓰는-vscode-단축키">
 내가 자주 쓰는 VSCode 단축키
 &lt;a class="anchor" href="#%eb%82%b4%ea%b0%80-%ec%9e%90%ec%a3%bc-%ec%93%b0%eb%8a%94-vscode-%eb%8b%a8%ec%b6%95%ed%82%a4">#&lt;/a>
&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">설명&lt;/th>
 &lt;th style="text-align: center">단축키&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">코드 전체 접기&lt;/td>
 &lt;td style="text-align: center">&lt;code>Ctrl&lt;/code> + &lt;code>k&lt;/code> + &lt;code>0&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">코드 전체 펼치기&lt;/td>
 &lt;td style="text-align: center">&lt;code>Ctrl&lt;/code> + &lt;code>k&lt;/code> + &lt;code>j&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title>가상환경 관련</title><link>https://yera10.github.io/docs/memo/commands/conda/virtual_env/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/memo/commands/conda/virtual_env/</guid><description>&lt;h3 id="가상환경-생성">
 가상환경 생성
 &lt;a class="anchor" href="#%ea%b0%80%ec%83%81%ed%99%98%ea%b2%bd-%ec%83%9d%ec%84%b1">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmd" data-lang="cmd">&lt;span style="display:flex;">&lt;span>conda create -n &amp;lt;가상환경명&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmd" data-lang="cmd">&lt;span style="display:flex;">&lt;span>conda create -n &amp;lt;가상환경명&amp;gt; python=3.7
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmd" data-lang="cmd">&lt;span style="display:flex;">&lt;span>conda create -n &amp;lt;가상환경명&amp;gt; --clone &amp;lt;가상환경명&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->
&lt;h3 id="가상환경-목록">
 가상환경 목록
 &lt;a class="anchor" href="#%ea%b0%80%ec%83%81%ed%99%98%ea%b2%bd-%eb%aa%a9%eb%a1%9d">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmd" data-lang="cmd">&lt;span style="display:flex;">&lt;span>conda env list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conda info envs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->
&lt;h3 id="가상환경에-jupyter-kernel-연결">
 가상환경에 jupyter kernel 연결
 &lt;a class="anchor" href="#%ea%b0%80%ec%83%81%ed%99%98%ea%b2%bd%ec%97%90-jupyter-kernel-%ec%97%b0%ea%b2%b0">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmd" data-lang="cmd">&lt;span style="display:flex;">&lt;span>python -m ipykernel install --user --name &amp;lt;가상환경명&amp;gt; --display-name &amp;lt;커널명&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;!-- raw HTML omitted -->
&lt;h3 id="가상환경-삭제">
 가상환경 삭제
 &lt;a class="anchor" href="#%ea%b0%80%ec%83%81%ed%99%98%ea%b2%bd-%ec%82%ad%ec%a0%9c">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmd" data-lang="cmd">&lt;span style="display:flex;">&lt;span>conda remove --name {가상환경명} --all
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="가상환경-활성화">
 가상환경 활성화
 &lt;a class="anchor" href="#%ea%b0%80%ec%83%81%ed%99%98%ea%b2%bd-%ed%99%9c%ec%84%b1%ed%99%94">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmd" data-lang="cmd">&lt;span style="display:flex;">&lt;span>conda activate {가상환경명}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="가상환경-비활성화">
 가상환경 비활성화
 &lt;a class="anchor" href="#%ea%b0%80%ec%83%81%ed%99%98%ea%b2%bd-%eb%b9%84%ed%99%9c%ec%84%b1%ed%99%94">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmd" data-lang="cmd">&lt;span style="display:flex;">&lt;span>conda deactivate
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>가상환경 관련</title><link>https://yera10.github.io/docs/memo/commands/poetry/virtual_env/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/memo/commands/poetry/virtual_env/</guid><description>&lt;h3 id="가상환경-비활성화">
 가상환경 비활성화
 &lt;a class="anchor" href="#%ea%b0%80%ec%83%81%ed%99%98%ea%b2%bd-%eb%b9%84%ed%99%9c%ec%84%b1%ed%99%94">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>deactivate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>exit
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="poetry-가상환경-확인">
 poetry 가상환경 확인
 &lt;a class="anchor" href="#poetry-%ea%b0%80%ec%83%81%ed%99%98%ea%b2%bd-%ed%99%95%ec%9d%b8">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>poetry env list
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="프로젝트-폴더-내에-가상환경을-저장">
 프로젝트 폴더 내에 가상환경을 저장
 &lt;a class="anchor" href="#%ed%94%84%eb%a1%9c%ec%a0%9d%ed%8a%b8-%ed%8f%b4%eb%8d%94-%eb%82%b4%ec%97%90-%ea%b0%80%ec%83%81%ed%99%98%ea%b2%bd%ec%9d%84-%ec%a0%80%ec%9e%a5">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>poetry config virtualenvs.in-project true 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="가상환경-모두-삭제">
 가상환경 모두 삭제
 &lt;a class="anchor" href="#%ea%b0%80%ec%83%81%ed%99%98%ea%b2%bd-%eb%aa%a8%eb%91%90-%ec%82%ad%ec%a0%9c">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>poetry env remove --all
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="poetry-로-가상환경virtualenv을-관리">
 poetry 로 가상환경(virtualenv)을 관리
 &lt;a class="anchor" href="#poetry-%eb%a1%9c-%ea%b0%80%ec%83%81%ed%99%98%ea%b2%bdvirtualenv%ec%9d%84-%ea%b4%80%eb%a6%ac">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>poetry env use &lt;span style="color:#f92672">{&lt;/span>파이썬경로&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>간단한 히스토그램 python</title><link>https://yera10.github.io/docs/memo/freq-used-code/histogram/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/memo/freq-used-code/histogram/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> matplotlib.pyplot &lt;span style="color:#66d9ef">as&lt;/span> plt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt&lt;span style="color:#f92672">.&lt;/span>hist(data, bins&lt;span style="color:#f92672">=&lt;/span>bin_num)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> matplotlib.pyplot &lt;span style="color:#66d9ef">as&lt;/span> plt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> numpy &lt;span style="color:#66d9ef">as&lt;/span> np
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cnts, bins &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>histogram(data, bin_num)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>plt&lt;span style="color:#f92672">.&lt;/span>his(data, bins)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>경고 무시 python</title><link>https://yera10.github.io/docs/memo/freq-used-code/warnings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/memo/freq-used-code/warnings/</guid><description>&lt;h2 id="python-경고-무시하기">
 python 경고 무시하기
 &lt;a class="anchor" href="#python-%ea%b2%bd%ea%b3%a0-%eb%ac%b4%ec%8b%9c%ed%95%98%ea%b8%b0">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> warnings
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>warnings&lt;span style="color:#f92672">.&lt;/span>filterwarnings(action&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ignore&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>내보내기 (requirements.txt)</title><link>https://yera10.github.io/docs/memo/commands/poetry/export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/memo/commands/poetry/export/</guid><description>&lt;h3 id="poetry-환경-requirementstxt로-내보내기">
 poetry 환경 requirements.txt로 내보내기
 &lt;a class="anchor" href="#poetry-%ed%99%98%ea%b2%bd-requirementstxt%eb%a1%9c-%eb%82%b4%eb%b3%b4%eb%82%b4%ea%b8%b0">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmd" data-lang="cmd">&lt;span style="display:flex;">&lt;span># 기본 활용 방식
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>poetry export -f requirements.txt --output requirements.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span># 해시 정보 없이 export 하기
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>poetry export -f requirements.txt --output requirements.txt --without-hashes
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>데이터 구조</title><link>https://yera10.github.io/docs/mystudy/algorithm-note/data_structure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/data_structure/</guid><description>&lt;h3 id="데이터-구조-생각해보기">
 데이터 구조 생각해보기
 &lt;a class="anchor" href="#%eb%8d%b0%ec%9d%b4%ed%84%b0-%ea%b5%ac%ec%a1%b0-%ec%83%9d%ea%b0%81%ed%95%b4%eb%b3%b4%ea%b8%b0">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>전화번호부 정보는 어떻게 저장하면 좋을까?&lt;/li>
&lt;li>은행 번호표 정보는 어떻게 처리하면 좋을까?&lt;/li>
&lt;li>서적 정보는 어떻게 관리하면 좋을까?&lt;/li>
&lt;li>창고에 쌓인 수화물의 위치를 역순으로 찾을 땐?&lt;/li>
&lt;/ul>
&lt;h1 id="python의-기본-데이터-구조">
 Python의 기본 데이터 구조
 &lt;a class="anchor" href="#python%ec%9d%98-%ea%b8%b0%eb%b3%b8-%eb%8d%b0%ec%9d%b4%ed%84%b0-%ea%b5%ac%ec%a1%b0">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>스택 &amp;amp; 큐&lt;/li>
&lt;li>튜플 &amp;amp; 집합&lt;/li>
&lt;li>사전 (dict)&lt;/li>
&lt;li>collections 모듈&lt;/li>
&lt;/ul>
&lt;h2 id="stack-스택">
 Stack (스택)
 &lt;a class="anchor" href="#stack-%ec%8a%a4%ed%83%9d">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>나중에 넣은 데이터를 먼저 반환하도록 설계된 메모리 구조&lt;/li>
&lt;li>Last In First Out (LIFO) - 리포구조&lt;/li>
&lt;li>Data 입력을 push, 출력을 pop이라고 함&lt;/li>
&lt;li>collections 모듈에서 deque 사용&lt;/li>
&lt;li>예제 : 입력된 문자열을 역순으로 출력&lt;/li>
&lt;/ul>
&lt;h2 id="queue-큐">
 Queue (큐)
 &lt;a class="anchor" href="#queue-%ed%81%90">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>먼저 넣은 데이터를 먼저 반환하도록 설계된 메모리 구조&lt;/li>
&lt;li>First In First Out (FIFO) - 피포구조&lt;/li>
&lt;li>Stack과 반대되는 개념&lt;/li>
&lt;/ul>
&lt;h2 id="tuple-튜플">
 Tuple (튜플)
 &lt;a class="anchor" href="#tuple-%ed%8a%9c%ed%94%8c">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>값의 변경이 불가능한 리스트&lt;/li>
&lt;li>선언시 &amp;ldquo;[ ]&amp;rdquo; 가 아닌 &amp;ldquo;( )&amp;ldquo;를 사용&lt;/li>
&lt;li>프로그램이 작동하는 동안 변경되지 않는 데이터 저장할 때 사용&lt;br>
예) 학번, 이름, 우편번호 등등&lt;/li>
&lt;li>함수의 반환 값 등 사용자의 실수에 의한 에러 사전에 방지&lt;/li>
&lt;/ul>
&lt;h2 id="set-집합">
 Set (집합)
 &lt;a class="anchor" href="#set-%ec%a7%91%ed%95%a9">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>값의 순서없이 저장&lt;/li>
&lt;li>중복 불허하는 자료형&lt;/li>
&lt;li>&lt;code>set( [1,2,3,4,5] )&lt;/code> 혹은 &lt;code>{1,2,3,4,5}&lt;/code> 로 선언&lt;/li>
&lt;/ul>
&lt;h2 id="dict-사전">
 Dict (사전)
 &lt;a class="anchor" href="#dict-%ec%82%ac%ec%a0%84">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>구분을 위한 데이터 고유 값을 Identifier 또는 key라고 한다&lt;/li>
&lt;li>Key값을 활용하여, 데이터 값 (Value)를 관리함&lt;/li>
&lt;li>다른 언어에서는 Hash Table이라는 용어를 사용&lt;/li>
&lt;/ul>
&lt;h2 id="collections-모듈">
 collections 모듈
 &lt;a class="anchor" href="#collections-%eb%aa%a8%eb%93%88">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>deque
&lt;ul>
&lt;li>rotate, reverse등 Linked List의 특성을 지원함&lt;/li>
&lt;li>기존 list 형태의 함수를 모두 지원함&lt;/li>
&lt;li>pop, push 외에 다양한 method들: rotate, extend, extendleft&lt;/li>
&lt;li>기존의 list보다 효율적인 자료구조 제공&lt;/li>
&lt;li>효율적 메모리 구조로 처리속도 향상&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>OrderedDict
&lt;ul>
&lt;li>Dict와 달리 데이터를 입력한 순서대로 dict 반환&lt;/li>
&lt;li>python 3.6버전 부터는 기본dict 도 순서를 보장하여 출력한다&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>defaultdict
&lt;ul>
&lt;li>Dict type의 값에 기본 값을 지정하여 초기값 정해줌&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Counter
&lt;ul>
&lt;li>Sequence type의 데이터 원소의 갯수를 dict 형태로 반환&lt;/li>
&lt;li>Set 의 연산들을 지원&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>namedtuple
&lt;ul>
&lt;li>Tuple 형태로 Data 구조체를 저장하는 방법&lt;/li>
&lt;li>저장되는 data의 variable을 사전에 지정해서 저장(?)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="외-기타-알면-좋은-python">
 외 기타 알면 좋은 python
 &lt;a class="anchor" href="#%ec%99%b8-%ea%b8%b0%ed%83%80-%ec%95%8c%eb%a9%b4-%ec%a2%8b%ec%9d%80-python">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code>%timeit &amp;lt;FUNC_NAME&amp;gt;()
&lt;/code>&lt;/pre>&lt;p>위 함수를 여러번 돌려봐서 평균소요시간과 분산까지 알려줌&lt;/p></description></item><item><title>백그라운드 관련</title><link>https://yera10.github.io/docs/memo/commands/linux/background/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/memo/commands/linux/background/</guid><description>&lt;h3 id="백그라운드-프로세스-목록">
 백그라운드 프로세스 목록
 &lt;a class="anchor" href="#%eb%b0%b1%ea%b7%b8%eb%9d%bc%ec%9a%b4%eb%93%9c-%ed%94%84%eb%a1%9c%ec%84%b8%ec%8a%a4-%eb%aa%a9%eb%a1%9d">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmd" data-lang="cmd">&lt;span style="display:flex;">&lt;span>jobs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>출력&lt;/p>
&lt;ul>
&lt;li>[job 번호]job기호 job상태&lt;/li>
&lt;/ul>
&lt;h3 id="백그라운드-프로세스-종료">
 백그라운드 프로세스 종료
 &lt;a class="anchor" href="#%eb%b0%b1%ea%b7%b8%eb%9d%bc%ec%9a%b4%eb%93%9c-%ed%94%84%eb%a1%9c%ec%84%b8%ec%8a%a4-%ec%a2%85%eb%a3%8c">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmd" data-lang="cmd">&lt;span style="display:flex;">&lt;span>kill %&amp;lt;job 번호&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>서브모듈 관련</title><link>https://yera10.github.io/docs/memo/commands/git/submodule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/memo/commands/git/submodule/</guid><description>&lt;p>&lt;a href="https://git-scm.com/book/ko/v2/Git-%EB%8F%84%EA%B5%AC-%EC%84%9C%EB%B8%8C%EB%AA%A8%EB%93%88">ref - git doc&lt;/a>&lt;/p>
&lt;h3 id="서브모듈-추가">
 서브모듈 추가
 &lt;a class="anchor" href="#%ec%84%9c%eb%b8%8c%eb%aa%a8%eb%93%88-%ec%b6%94%ea%b0%80">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git submodule add &lt;span style="color:#f92672">{&lt;/span>저장소 URL&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="서브모듈-끊기">
 서브모듈 끊기
 &lt;a class="anchor" href="#%ec%84%9c%eb%b8%8c%eb%aa%a8%eb%93%88-%eb%81%8a%ea%b8%b0">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 1. 모듈 deinit&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git submodule deinit -f &lt;span style="color:#f92672">{&lt;/span>모듈명&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 2. .git/modules 에서 폴더 삭제&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rm -rf .git/modules/&lt;span style="color:#f92672">{&lt;/span>모듈명&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 3. git에서 해당 폴더를 제거&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git rm -f &lt;span style="color:#f92672">{&lt;/span>모듈명&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="서브모듈까지-모두-clone">
 서브모듈까지 모두 clone
 &lt;a class="anchor" href="#%ec%84%9c%eb%b8%8c%eb%aa%a8%eb%93%88%ea%b9%8c%ec%a7%80-%eb%aa%a8%eb%91%90-clone">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone --recursive &lt;span style="color:#f92672">{&lt;/span>저장소 URL&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>또는&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone &lt;span style="color:#f92672">{&lt;/span>저장소 URL&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git submodule update --init --recursive
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="서브모듈까지-모두-업데이트pull">
 서브모듈까지 모두 업데이트(pull)
 &lt;a class="anchor" href="#%ec%84%9c%eb%b8%8c%eb%aa%a8%eb%93%88%ea%b9%8c%ec%a7%80-%eb%aa%a8%eb%91%90-%ec%97%85%eb%8d%b0%ec%9d%b4%ed%8a%b8pull">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 모든 서브모듈에 대해 동일한 명령어를 수행하고 싶을 때&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git submodule foreach &lt;span style="color:#f92672">[&lt;/span>명령어&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 모든 서브모듈에 대해 git pull&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git submodule foreach git pull origin master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>또는&lt;/p></description></item><item><title>소수 관련 코드</title><link>https://yera10.github.io/docs/mystudy/algorithm-note/prime_number_code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/prime_number_code/</guid><description>&lt;h3 id="소수-여부-확인">
 소수 여부 확인
 &lt;a class="anchor" href="#%ec%86%8c%ec%88%98-%ec%97%ac%eb%b6%80-%ed%99%95%ec%9d%b8">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">is_prime&lt;/span>(n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> n&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>: 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> d &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">2&lt;/span>, int(n&lt;span style="color:#f92672">**&lt;/span>&lt;span style="color:#ae81ff">0.5&lt;/span>)&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> n&lt;span style="color:#f92672">%&lt;/span>d&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p> &lt;/p>
&lt;h3 id="약수-구하기">
 약수 구하기
 &lt;a class="anchor" href="#%ec%95%bd%ec%88%98-%ea%b5%ac%ed%95%98%ea%b8%b0">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">solution&lt;/span>(n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> answer &lt;span style="color:#f92672">=&lt;/span> set()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> d &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">1&lt;/span>, int(n&lt;span style="color:#f92672">**&lt;/span>&lt;span style="color:#ae81ff">0.5&lt;/span>)&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> n&lt;span style="color:#f92672">%&lt;/span>d&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> answer&lt;span style="color:#f92672">.&lt;/span>add(d)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> answer&lt;span style="color:#f92672">.&lt;/span>add(n&lt;span style="color:#f92672">//&lt;/span>d)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> sorted(list(answer))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p> &lt;/p>
&lt;h3 id="최대공약수와-최소공배수">
 최대공약수와 최소공배수
 &lt;a class="anchor" href="#%ec%b5%9c%eb%8c%80%ea%b3%b5%ec%95%bd%ec%88%98%ec%99%80-%ec%b5%9c%ec%86%8c%ea%b3%b5%eb%b0%b0%ec%88%98">#&lt;/a>
&lt;/h3>




&lt;div class="book-tabs">&lt;input type="radio" class="toggle" name="tabs-gcd-lcm" id="tabs-gcd-lcm-0" checked="checked" />
 &lt;label for="tabs-gcd-lcm-0">math 사용&lt;/label>
 &lt;div class="book-tabs-content markdown-inner">&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> math
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>math&lt;span style="color:#f92672">.&lt;/span>gcd(a, b) &lt;span style="color:#75715e"># 최대공약수&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>math&lt;span style="color:#f92672">.&lt;/span>lcm(a, b) &lt;span style="color:#75715e"># 최소공배수&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;input type="radio" class="toggle" name="tabs-gcd-lcm" id="tabs-gcd-lcm-1" />
 &lt;label for="tabs-gcd-lcm-1">직접 구현&lt;/label>
 &lt;div class="book-tabs-content markdown-inner">&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 자연수 a, b의 최대공약수 구하는 함수&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">gcd&lt;/span>(a, b):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> b&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> gcd(b, a&lt;span style="color:#f92672">%&lt;/span>b)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 자연수 a, b의 최소공배수 구하는 함수&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">lcm&lt;/span>(a, b):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> a&lt;span style="color:#f92672">*&lt;/span>b&lt;span style="color:#f92672">//&lt;/span>gcd(a,b)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;/div></description></item><item><title>시간 측정 python</title><link>https://yera10.github.io/docs/memo/freq-used-code/time/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/memo/freq-used-code/time/</guid><description>&lt;h2 id="코드-시간-측정하기">
 코드 시간 측정하기
 &lt;a class="anchor" href="#%ec%bd%94%eb%93%9c-%ec%8b%9c%ea%b0%84-%ec%b8%a1%ec%a0%95%ed%95%98%ea%b8%b0">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> time
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>start &lt;span style="color:#f92672">=&lt;/span> time&lt;span style="color:#f92672">.&lt;/span>time()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">### 실행코드 ###&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>end &lt;span style="color:#f92672">=&lt;/span> time&lt;span style="color:#f92672">.&lt;/span>time()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(end&lt;span style="color:#f92672">-&lt;/span>start) &lt;span style="color:#75715e"># 초단위&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>압축 관련</title><link>https://yera10.github.io/docs/memo/commands/linux/zip_tar_gz/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/memo/commands/linux/zip_tar_gz/</guid><description>&lt;h3 id="압축-해제">
 압축 해제
 &lt;a class="anchor" href="#%ec%95%95%ec%b6%95-%ed%95%b4%ec%a0%9c">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmd" data-lang="cmd">&lt;span style="display:flex;">&lt;span>tar -zxvf [압축파일] -C [폴더이름]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>예쁘게 출력(pprint) python</title><link>https://yera10.github.io/docs/memo/freq-used-code/pretty_print/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/memo/freq-used-code/pretty_print/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> pprint
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pprint&lt;span style="color:#f92672">.&lt;/span>pprint(복잡한 json, dict 파일 등)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>의존성 관련</title><link>https://yera10.github.io/docs/memo/commands/poetry/dependency/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/memo/commands/poetry/dependency/</guid><description>&lt;h3 id="poetry-그룹에-의존성-추가">
 poetry 그룹에 의존성 추가
 &lt;a class="anchor" href="#poetry-%ea%b7%b8%eb%a3%b9%ec%97%90-%ec%9d%98%ec%a1%b4%ec%84%b1-%ec%b6%94%ea%b0%80">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>poetry add &lt;span style="color:#f92672">{&lt;/span>패키지&lt;span style="color:#f92672">}&lt;/span> --group &lt;span style="color:#f92672">{&lt;/span>그룹명&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="poetry-버전-지정하여-의존성-추가">
 poetry 버전 지정하여 의존성 추가
 &lt;a class="anchor" href="#poetry-%eb%b2%84%ec%a0%84-%ec%a7%80%ec%a0%95%ed%95%98%ec%97%ac-%ec%9d%98%ec%a1%b4%ec%84%b1-%ec%b6%94%ea%b0%80">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>poetry add &lt;span style="color:#e6db74">&amp;#34;&amp;lt;패키지&amp;gt;&amp;lt;버전표기&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 예&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>poetry add &lt;span style="color:#e6db74">&amp;#34;selenium^4.10.0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 가장 최신 버전 설치할 때 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>poetry add &lt;span style="color:#f92672">{&lt;/span>패키지&lt;span style="color:#f92672">}&lt;/span>@latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="버전-표기법">
 버전 표기법
 &lt;a class="anchor" href="#%eb%b2%84%ec%a0%84-%ed%91%9c%ea%b8%b0%eb%b2%95">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>^1.2.3 : &amp;gt;=1.2.3 &amp;lt;2.0.0&lt;/li>
&lt;li>^1.2 : 	&amp;gt;=1.2.0 &amp;lt;2.0.0&lt;/li>
&lt;li>~2.0.5 : &amp;gt;=2.0.5, &amp;lt;2.1.0&lt;/li>
&lt;li>&amp;gt;=2.0.5&lt;/li>
&lt;li>==2.0.5&lt;/li>
&lt;/ul>
&lt;h3 id="설치된-모든-패키지-확인">
 설치된 모든 패키지 확인
 &lt;a class="anchor" href="#%ec%84%a4%ec%b9%98%eb%90%9c-%eb%aa%a8%eb%93%a0-%ed%8c%a8%ed%82%a4%ec%a7%80-%ed%99%95%ec%9d%b8">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>poetry show
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 특정패키지를 지정&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>poetry show &lt;span style="color:#f92672">{&lt;/span>패키지&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 의존성 트리&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>poetry show --tree
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="의존성-꼬였을-때">
 의존성 꼬였을 때
 &lt;a class="anchor" href="#%ec%9d%98%ec%a1%b4%ec%84%b1-%ea%bc%ac%ec%98%80%ec%9d%84-%eb%95%8c">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>가상환경 삭제 &lt;code>poetry env remove --all&lt;/code>&lt;/li>
&lt;li>&lt;code>pyproject.toml&lt;/code> 삭제&lt;/li>
&lt;li>재설치 &lt;code>poetry install&lt;/code>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="ref">
 Ref
 &lt;a class="anchor" href="#ref">#&lt;/a>
&lt;/h3>
&lt;p>&lt;a href="https://python-poetry.org/docs/cli/">https://python-poetry.org/docs/cli/&lt;/a>&lt;/p></description></item><item><title>자료구조 기초</title><link>https://yera10.github.io/docs/mystudy/algorithm-note/part2/5_dfs_bfs/datastructure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part2/5_dfs_bfs/datastructure/</guid><description>&lt;h2 id="자료구조-기초">
 자료구조 기초
 &lt;a class="anchor" href="#%ec%9e%90%eb%a3%8c%ea%b5%ac%ec%a1%b0-%ea%b8%b0%ec%b4%88">#&lt;/a>
&lt;/h2>
&lt;h3 id="탐색">
 탐색
 &lt;a class="anchor" href="#%ed%83%90%ec%83%89">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>많은 양의 데이터 중 원하는 데이터를 찾는 과정&lt;/li>
&lt;li>그래프, 트리 등의 자료구조 안에서 탐색하는 문제를 자주 다룸.&lt;/li>
&lt;li>대표적인 탐색 알고리즘으로 DFS, BFS를 꼽을 수 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="자료구조">
 자료구조
 &lt;a class="anchor" href="#%ec%9e%90%eb%a3%8c%ea%b5%ac%ec%a1%b0">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>데이터를 표현하고 관리하고 처리하기 위한 구조&lt;/li>
&lt;li>스택과 큐는 자료구조의 기초개념으로 &amp;ldquo;삽입&amp;rdquo;, &amp;ldquo;삭제&amp;rdquo; 의 두 핵심 함수로 구성됨&lt;/li>
&lt;li>스택 : 선입후출 / 후입선출&lt;/li>
&lt;li>큐 : 선입선출 구조&lt;/li>
&lt;li>재귀함수
&lt;ul>
&lt;li>컴퓨터 내부에서 재귀함수의 수행은 스택 자료구조를 이용 (가장 마지막에 호출한 함수가 먼저 수행을 끝내야 그 앞의 함수 호출이 종료되기 때문에)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>스택 자료구조를 활용해야 하는 상당 수 알고리즘은 재귀 함수를 이용해 간편하게 구현될 수 있다. (ex. DFS)&lt;/li>
&lt;/ul>
&lt;h3 id="그래프">
 그래프
 &lt;a class="anchor" href="#%ea%b7%b8%eb%9e%98%ed%94%84">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>노드 Node 와 간선 Edge 으로 표현되며, 노드를 정점(Vertex)이라고도 한다.&lt;/li>
&lt;li>그래프 탐색이란 하나의 노드를 시작으로 다수의 노드를 방문하는 것을 말함.&lt;/li>
&lt;li>프로그래밍에서 그래프는 크게 2가지 방식으로 표현할 수 있다.
&lt;ul>
&lt;li>&lt;strong>인접행렬&lt;/strong> : 2차원 배열로 그래프의 연결관계를 표현하는 방식&lt;/li>
&lt;li>&lt;strong>인접 리스트&lt;/strong> : 리스트로 그래프의 연결관계를 표현하는 방식
&lt;ul>
&lt;li>&amp;ldquo;연결 리스트&amp;quot;라는 자료구조 이용&lt;/li>
&lt;li>python에서 연결리스트를 이용해 그래프를 표현하고자 할 때에도 단순히 2차원 리스트를 이용하면 됨.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>인접 행렬 방식 예제&lt;/p></description></item><item><title>초기설정 관련</title><link>https://yera10.github.io/docs/memo/commands/git/initial_setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/memo/commands/git/initial_setup/</guid><description>&lt;h3 id="모든-설정값-확인">
 모든 설정값 확인
 &lt;a class="anchor" href="#%eb%aa%a8%eb%93%a0-%ec%84%a4%ec%a0%95%ea%b0%92-%ed%99%95%ec%9d%b8">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git config --list
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>특정값 확인&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git config user.name
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="모든-설정값과-해당-위치-확인">
 모든 설정값과 해당 위치 확인
 &lt;a class="anchor" href="#%eb%aa%a8%eb%93%a0-%ec%84%a4%ec%a0%95%ea%b0%92%ea%b3%bc-%ed%95%b4%eb%8b%b9-%ec%9c%84%ec%b9%98-%ed%99%95%ec%9d%b8">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git config --list --show-origin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="사용자-이름-및-이메일-설정">
 사용자 이름 및 이메일 설정
 &lt;a class="anchor" href="#%ec%82%ac%ec%9a%a9%ec%9e%90-%ec%9d%b4%eb%a6%84-%eb%b0%8f-%ec%9d%b4%eb%a9%94%ec%9d%bc-%ec%84%a4%ec%a0%95">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git config --global user.name &lt;span style="color:#e6db74">&amp;#34;&amp;lt;사용자ID&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git config --global user.email &lt;span style="color:#f92672">{&lt;/span>이메일&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>* global 옵션을 전달할 경우 한번만 수행해도 된다.&lt;/p>
&lt;h3 id="설정값-지우기">
 설정값 지우기
 &lt;a class="anchor" href="#%ec%84%a4%ec%a0%95%ea%b0%92-%ec%a7%80%ec%9a%b0%ea%b8%b0">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git config --unset user.name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git config --unset user.email
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git config --unset --global user.name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git config --unset --global user.email
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>* global로 설정한 경우, global로 지워야 한다.&lt;/p></description></item><item><title>터미널 테마</title><link>https://yera10.github.io/docs/memo/commands/etc/terminal_theme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/memo/commands/etc/terminal_theme/</guid><description>&lt;h3 id="터미널-테마-바꾸기">
 터미널 테마 바꾸기
 &lt;a class="anchor" href="#%ed%84%b0%eb%af%b8%eb%84%90-%ed%85%8c%eb%a7%88-%eb%b0%94%ea%be%b8%ea%b8%b0">#&lt;/a>
&lt;/h3>
&lt;p>&lt;a href="https://terminalsplash.com/">https://terminalsplash.com/&lt;/a>&lt;/p></description></item><item><title>파이토치 데이터 모듈</title><link>https://yera10.github.io/docs/memo/pytorch-study/dataset_module/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/memo/pytorch-study/dataset_module/</guid><description>&lt;h2 id="dataset-관련-모듈">
 Dataset 관련 모듈
 &lt;a class="anchor" href="#dataset-%ea%b4%80%eb%a0%a8-%eb%aa%a8%eb%93%88">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>torch.utils.data
&lt;ul>
&lt;li>데이터셋의 표준을 정의하고 데이터셋을 불러오고 자르고 섞는데 쓰는 도구들이 들어있는 모듈&lt;/li>
&lt;li>파이토치 모델을 학습시키기 위한 데이터셋의 표준을 &lt;code>torch.utils.data.Datase&lt;/code>에 정의&lt;/li>
&lt;li>Dataset 모듈을 상속하는 파생 클래스는 학습에 필요한 데이터를 로딩해주는 &lt;code>torch.utils.data.DataLoader&lt;/code> 인스턴스의 입력으로 사용할 수 있다&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>torchvision.dataset
&lt;ul>
&lt;li>&lt;code>torch.utils.data.Dataset&lt;/code>을 상속하는 이미지 데이터셋의 모음으로, MNIST나 CIFAR-10과 같은 데이터셋을 제공&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>torchtext.dataset
&lt;ul>
&lt;li>&lt;code>torch.utils.data.Dataset&lt;/code>을 상속하는 텍스트 데이터셋의 모음으로, 기본적으로 IMDb나 AG_NEWS와 같은 데이터셋을 제공&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>torchvision.transforms
&lt;ul>
&lt;li>이미지 데이터셋에 쓸 수 있는 여러 가지 변환 필터를 담고 있는 모듈&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>torchvision.utils
&lt;ul>
&lt;li>이미지 데이터를 저장하고 시각화하기 위한 도구가 들어있는 모듈&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p> &lt;/p></description></item><item><title>파이토치 텐서?</title><link>https://yera10.github.io/docs/memo/pytorch-study/tensor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/memo/pytorch-study/tensor/</guid><description>&lt;h2 id="pytorch의-기본-구성-요소-tensor">
 Pytorch의 기본 구성 요소 Tensor
 &lt;a class="anchor" href="#pytorch%ec%9d%98-%ea%b8%b0%eb%b3%b8-%ea%b5%ac%ec%84%b1-%ec%9a%94%ec%86%8c-tensor">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>torch.Tensor와 torch.tensor의 차이는?&lt;/li>
&lt;/ul>
&lt;h3 id="torchtensor">
 torch.Tensor
 &lt;a class="anchor" href="#torchtensor">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>클래스(Class)이다.&lt;/li>
&lt;li>int 입력시 float로 변환&lt;/li>
&lt;/ul>
&lt;h3 id="torchtensor-1">
 torch.tensor
 &lt;a class="anchor" href="#torchtensor-1">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>함수(Function)이다.&lt;/li>
&lt;li>int 입력시 int 그대로 입력&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>클래스는 앞글자가 대문자로 시작하고, 함수는 소문자로 시작하는데, Pytorch에서는 이 규칙이 잘 적용되고 있다.&lt;/li>
&lt;/ul></description></item><item><title>파일 생성/이동/복사/삭제</title><link>https://yera10.github.io/docs/memo/commands/linux/file_dir/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/memo/commands/linux/file_dir/</guid><description>&lt;h3 id="파일-이동">
 파일 이동
 &lt;a class="anchor" href="#%ed%8c%8c%ec%9d%bc-%ec%9d%b4%eb%8f%99">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmd" data-lang="cmd">&lt;span style="display:flex;">&lt;span>mv &amp;lt;이동전 파일 path&amp;gt; &amp;lt;이동후 파일 path&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmd" data-lang="cmd">&lt;span style="display:flex;">&lt;span>mv /home/index.html /home/test/index.html
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="파일-복사">
 파일 복사
 &lt;a class="anchor" href="#%ed%8c%8c%ec%9d%bc-%eb%b3%b5%ec%82%ac">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmd" data-lang="cmd">&lt;span style="display:flex;">&lt;span>cp &amp;lt;복사전 파일 path&amp;gt; &amp;lt;복사후 파일 path&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmd" data-lang="cmd">&lt;span style="display:flex;">&lt;span>cp /home/index.html /home/test/index.html
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="디렉토리-이동">
 디렉토리 이동
 &lt;a class="anchor" href="#%eb%94%94%eb%a0%89%ed%86%a0%eb%a6%ac-%ec%9d%b4%eb%8f%99">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmd" data-lang="cmd">&lt;span style="display:flex;">&lt;span>mv &amp;lt;원본폴더&amp;gt; &amp;lt;목적지폴더&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="디렉토리-복사">
 디렉토리 복사
 &lt;a class="anchor" href="#%eb%94%94%eb%a0%89%ed%86%a0%eb%a6%ac-%eb%b3%b5%ec%82%ac">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmd" data-lang="cmd">&lt;span style="display:flex;">&lt;span>cp -r &amp;lt;복사전 dir_path&amp;gt; &amp;lt;복사될 상위 dir_path&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmd" data-lang="cmd">&lt;span style="display:flex;">&lt;span>cp -r /home/index /home/test # home/test/index 폴더가 생성됨
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="디렉토리-생성">
 디렉토리 생성
 &lt;a class="anchor" href="#%eb%94%94%eb%a0%89%ed%86%a0%eb%a6%ac-%ec%83%9d%ec%84%b1">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmd" data-lang="cmd">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">mkdir&lt;/span> &amp;lt;디렉토리명&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>옵션
&lt;ul>
&lt;li>&lt;code>-m&lt;/code> : 폴더 권한 설정&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="파일-삭제">
 파일 삭제
 &lt;a class="anchor" href="#%ed%8c%8c%ec%9d%bc-%ec%82%ad%ec%a0%9c">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmd" data-lang="cmd">&lt;span style="display:flex;">&lt;span>rm &amp;lt;파일명&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="디렉토리-삭제">
 디렉토리 삭제
 &lt;a class="anchor" href="#%eb%94%94%eb%a0%89%ed%86%a0%eb%a6%ac-%ec%82%ad%ec%a0%9c">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cmd" data-lang="cmd">&lt;span style="display:flex;">&lt;span>rm -r &amp;lt;파일명&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>-r 옵션: recursive, 폴더를 지우거나 폴더 안의 파일을 전부 지울 때&lt;/li>
&lt;li>-f 옵션 : 진짜로 지울거냐는 확인 없이 강제로 지움.&lt;/li>
&lt;/ul></description></item><item><title>파일 압축 python</title><link>https://yera10.github.io/docs/memo/freq-used-code/file_zip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/memo/freq-used-code/file_zip/</guid><description>&lt;h2 id="파일-압축">
 파일 압축
 &lt;a class="anchor" href="#%ed%8c%8c%ec%9d%bc-%ec%95%95%ec%b6%95">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> zipfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>zf &lt;span style="color:#f92672">=&lt;/span> zipfile&lt;span style="color:#f92672">.&lt;/span>ZipFile(&lt;span style="color:#e6db74">&amp;#39;.//foldername//filename.zip&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>zf&lt;span style="color:#f92672">.&lt;/span>write(&lt;span style="color:#e6db74">&amp;#39;filepath&amp;#39;&lt;/span>) &lt;span style="color:#75715e"># compress_type=zipfile.ZIP_DEFLATED&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>zf&lt;span style="color:#f92672">.&lt;/span>close()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p> &lt;/p>
&lt;h2 id="압축-해제-후-dataframe으로-변환">
 압축 해제 후 DataFrame으로 변환
 &lt;a class="anchor" href="#%ec%95%95%ec%b6%95-%ed%95%b4%ec%a0%9c-%ed%9b%84-dataframe%ec%9c%bc%eb%a1%9c-%eb%b3%80%ed%99%98">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> zipfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> pyarrow &lt;span style="color:#f92672">import&lt;/span> csv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>zf &lt;span style="color:#f92672">=&lt;/span> zipfile&lt;span style="color:#f92672">.&lt;/span>ZipFile(&lt;span style="color:#e6db74">&amp;#39;..//foldername//filename.zip&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;r&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>df &lt;span style="color:#f92672">=&lt;/span> csv&lt;span style="color:#f92672">.&lt;/span>read_csv(zf&lt;span style="color:#f92672">.&lt;/span>open(&lt;span style="color:#e6db74">&amp;#39;content_hit-2021.03.csv&amp;#39;&lt;/span>))&lt;span style="color:#f92672">.&lt;/span>to_pandas()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>파일 읽기 python</title><link>https://yera10.github.io/docs/memo/freq-used-code/file_open/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/memo/freq-used-code/file_open/</guid><description>&lt;h2 id="내장함수-open으로-파일-읽기-txt-csv-json">
 내장함수 open으로 파일 읽기 (txt, csv, json)
 &lt;a class="anchor" href="#%eb%82%b4%ec%9e%a5%ed%95%a8%ec%88%98-open%ec%9c%bc%eb%a1%9c-%ed%8c%8c%ec%9d%bc-%ec%9d%bd%ea%b8%b0-txt-csv-json">#&lt;/a>
&lt;/h2>




&lt;div class="book-tabs">&lt;input type="radio" class="toggle" name="tabs-open-file" id="tabs-open-file-0" checked="checked" />
 &lt;label for="tabs-open-file-0">readline&lt;/label>
 &lt;div class="book-tabs-content markdown-inner">&lt;h2 id="readline--함수-사용">
 readline( ) 함수 사용
 &lt;a class="anchor" href="#readline--%ed%95%a8%ec%88%98-%ec%82%ac%ec%9a%a9">#&lt;/a>
&lt;/h2>
&lt;p>제너레이터처럼 한줄씩 꺼내서 str 타입으로 읽어들인다.&lt;br>
(txt, csv, json 파일도 가능)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>f &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#34;d:&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">data&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">emp3.csv&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;r&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>file &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	line &lt;span style="color:#f92672">=&lt;/span> f&lt;span style="color:#f92672">.&lt;/span>readline()    &lt;span style="color:#75715e"># readline: 한줄씩 읽어들임&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> line: &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	file&lt;span style="color:#f92672">.&lt;/span>append(line)    &lt;span style="color:#75715e"># readline: 한줄을 문자열로 반환&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>f&lt;span style="color:#f92672">.&lt;/span>close()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(file)    &lt;span style="color:#75715e"># file : [ str, str, ..., str ] 의 형태&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;input type="radio" class="toggle" name="tabs-open-file" id="tabs-open-file-1" />
 &lt;label for="tabs-open-file-1">readlines&lt;/label>
 &lt;div class="book-tabs-content markdown-inner">&lt;h2 id="readlines--함수-사용">
 readlines( ) 함수 사용
 &lt;a class="anchor" href="#readlines--%ed%95%a8%ec%88%98-%ec%82%ac%ec%9a%a9">#&lt;/a>
&lt;/h2>
&lt;p>readline( ) 함수와는 다르게 list 타입으로 반환한다.&lt;br>
반복문을 사용하지 않아도 된다.&lt;/p></description></item></channel></rss>