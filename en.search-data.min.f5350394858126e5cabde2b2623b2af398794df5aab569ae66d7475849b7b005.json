[{"id":0,"href":"/docs/mystudy/","title":"My Study","section":"Docs","content":"\rIntroduction\r#\rFerre hinnitibus erat accipitrem dixi Troiae tollens\r#\rLorem markdownum, a quoque nutu est quodcumque mandasset veluti. Passim inportuna totidemque nympha fert; repetens pendent, poenarum guttura sed vacet non, mortali undas. Omnis pharetramque gramen portentificisque membris servatum novabis fallit de nubibus atque silvas mihi. Dixit repetitaque Quid; verrit longa; sententia mandat quascumque nescio solebat litore; noctes. Hostem haerentem circuit plenaque tamen.\nPedum ne indigenae finire invergens carpebat Velit posses summoque De fumos illa foret Est simul fameque tauri qua ad\r#\rLocum nullus nisi vomentes. Ab Persea sermone vela, miratur aratro; eandem Argolicas gener.\nMe sol\r#\rNec dis certa fuit socer, Nonacria dies manet tacitaque sibi? Sucis est iactata Castrumque iudex, et iactato quoque terraeque es tandem et maternos vittis. Lumina litus bene poenamque animos callem ne tuas in leones illam dea cadunt genus, et pleno nunc in quod. Anumque crescentesque sanguinis progenies nuribus rustica tinguet. Pater omnes liquido creditis noctem.\nif (mirrored(icmp_dvd_pim, 3, smbMirroredHard) != lion(clickImportQueue,\rviralItunesBalancing, bankruptcy_file_pptp)) {\rfile += ip_cybercrime_suffix;\r}\rif (runtimeSmartRom == netMarketingWord) {\rvirusBalancingWin *= scriptPromptBespoke + raster(post_drive,\rwindowsSli);\rcd = address_hertz_trojan;\rsoap_ccd.pcbServerGigahertz(asp_hardware_isa, offlinePeopleware, nui);\r} else {\rmegabyte.api = modem_flowchart - web + syntaxHalftoneAddress;\r}\rif (3 \u0026lt; mebibyteNetworkAnimated) {\rpharming_regular_error *= jsp_ribbon + algorithm * recycleMediaKindle(\rdvrSyntax, cdma);\radf_sla *= hoverCropDrive;\rtemplateNtfs = -1 - vertical;\r} else {\rexpressionCompressionVariable.bootMulti = white_eup_javascript(\rtable_suffix);\rguidPpiPram.tracerouteLinux += rtfTerabyteQuicktime(1,\rmanagementRosetta(webcamActivex), 740874);\r}\rvar virusTweetSsl = nullGigo;\rTrepident sitimque\r#\rSentiet et ferali errorem fessam, coercet superbus, Ascaniumque in pennis mediis; dolor? Vidit imi Aeacon perfida propositos adde, tua Somni Fluctibus errante lustrat non.\nTamen inde, vos videt e flammis Scythica parantem rupisque pectora umbras. Haec ficta canistris repercusso simul ego aris Dixit! Esse Fama trepidare hunc crescendo vigor ululasse vertice exspatiantur celer tepidique petita aversata oculis iussa est me ferro.\n"},{"id":1,"href":"/posts/creating-a-new-theme/","title":"Creating a New Theme","section":"Blog","content":"\rIntroduction\r#\rThis tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I\u0026rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won\u0026rsquo;t cover using CSS to style your theme.\nWe\u0026rsquo;ll start with creating a new site with a very basic template. Then we\u0026rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026ldquo;$\u0026rdquo; prompt. The output will follow. Lines that start with \u0026ldquo;#\u0026rdquo; are comments that I\u0026rsquo;ve added to explain a point. When I show updates to a file, the \u0026ldquo;:wq\u0026rdquo; on the last line means to save the file.\nHere\u0026rsquo;s an example:\n## this is a comment\r$ echo this is a command\rthis is a command\r## edit the file\r$ vi foo.md\r+++\rdate = \u0026#34;2014-09-28\u0026#34;\rtitle = \u0026#34;creating a new theme\u0026#34;\r+++\rbah and humbug\r:wq\r## show it\r$ cat foo.md\r+++\rdate = \u0026#34;2014-09-28\u0026#34;\rtitle = \u0026#34;creating a new theme\u0026#34;\r+++\rbah and humbug\r$ Some Definitions\r#\rThere are a few concepts that you need to understand before creating a theme.\nSkins\r#\rSkins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.\nThe Home Page\r#\rThe home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\nSite Configuration File\r#\rWhen Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent\r#\rContent is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\nFront Matter\r#\rThe front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendered into HTML.\nMarkdown\r#\rContent is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\nTemplate Files\r#\rHugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it\u0026rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nHugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Hugo’s choice of templates.\nSingle Template\r#\rA single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\nList Template\r#\rA list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\nPartial Template\r#\rA partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\nCreate a New Site\r#\rLet\u0026rsquo;s use Hugo to create a new web site. I\u0026rsquo;m a Mac user, so I\u0026rsquo;ll create mine in my home directory, in the Sites folder. If you\u0026rsquo;re using Linux, you might have to create the folder first.\nThe \u0026ldquo;new site\u0026rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n$ hugo new site ~/Sites/zafta\r$ cd ~/Sites/zafta\r$ ls -l\rtotal 8\rdrwxr-xr-x 7 quoha staff 238 Sep 29 16:49 .\rdrwxr-xr-x 3 quoha staff 102 Sep 29 16:49 ..\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes\r-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static\r$ Take a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That\u0026rsquo;s a topic for a different tutorial, so please ignore them for now.\nGenerate the HTML For the New Site\r#\rRunning the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that\u0026rsquo;s everything that\u0026rsquo;s not content). Since we have an empty site, it won\u0026rsquo;t do much, but it will do it very quickly.\n$ hugo --verbose\rINFO: 2014/09/29 Using config file: config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]\rWARN: 2014/09/29 Unable to locate layout: [404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 2 ms\r$ The \u0026ldquo;--verbose\u0026rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \u0026ldquo;INFO:\u0026rdquo; or \u0026ldquo;WARN:\u0026rdquo; is present because we used that flag. The lines that start with \u0026ldquo;WARN:\u0026rdquo; are warning messages. We\u0026rsquo;ll go over them later.\nWe can verify that the command worked by looking at the directory again.\n$ ls -l\rtotal 8\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes\r-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts\rdrwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static\r$ See that new public/ directory? Hugo placed all generated content there. When you\u0026rsquo;re ready to publish your web site, that\u0026rsquo;s the place to start. For now, though, let\u0026rsquo;s just confirm that we have what we\u0026rsquo;d expect from a site with no content.\n$ ls -l public\rtotal 16\r-rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml\r-rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml\r$ Hugo created two XML files, which is standard, but there are no HTML files.\nTest the New Site\r#\rVerify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \u0026ldquo;server\u0026rdquo; command. If it is successful, you will see output similar to the following:\n$ hugo server --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]\rWARN: 2014/09/29 Unable to locate layout: [404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 2 ms\rServing pages from /Users/quoha/Sites/zafta/public\rWeb Server is available at http://localhost:1313\rPress Ctrl+C to stop Connect to the listed URL (it\u0026rsquo;s on the line that starts with \u0026ldquo;Web Server\u0026rdquo;). If everything is working correctly, you should get a page that shows the following:\nindex.xml\rsitemap.xml That\u0026rsquo;s a listing of your public/ directory. Hugo didn\u0026rsquo;t create a home page because our site has no content. When there\u0026rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet’s go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]\rWARN: 2014/09/29 Unable to locate layout: [404.html] That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\nI like that the verbose flag causes Hugo to list the files that it\u0026rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we\u0026rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn\u0026rsquo;t find a template for the home page and it told you so.\nAt this point, you\u0026rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.\nCreate a New Theme\r#\rHugo doesn\u0026rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\nWe\u0026rsquo;re going to create a new theme called \u0026ldquo;zafta.\u0026rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, Zafta uses \u0026ldquo;post\u0026rdquo; over \u0026ldquo;blog\u0026rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\nCreate a Skeleton\r#\rUse the hugo \u0026ldquo;new\u0026rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n$ hugo new theme zafta\r$ ls -l\rtotal 8\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes\r-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts\rdrwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static\rdrwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes\r$ find themes -type f | xargs ls -l\r-rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html\r-rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml\r$ The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They\u0026rsquo;re optional, but if you\u0026rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It\u0026rsquo;s also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/zafta/theme.toml\rauthor = \u0026#34;michael d henderson\u0026#34;\rdescription = \u0026#34;a minimal working template\u0026#34;\rlicense = \u0026#34;MIT\u0026#34;\rname = \u0026#34;zafta\u0026#34;\rsource_repo = \u0026#34;\u0026#34;\rtags = [\u0026#34;tags\u0026#34;, \u0026#34;categories\u0026#34;]\r:wq\r## also edit themes/zafta/LICENSE.md and change\r## the bit that says \u0026#34;YOUR_NAME_HERE\u0026#34; Note that the the skeleton\u0026rsquo;s template files are empty. Don\u0026rsquo;t worry, we\u0026rsquo;ll be changing that shortly.\n$ find themes/zafta -name \u0026#39;*.html\u0026#39; | xargs ls -l\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html\r$ Update the Configuration File to Use the Theme\r#\rNow that we\u0026rsquo;ve got a theme to work with, it\u0026rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add \u0026ldquo;-t zafta\u0026rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don\u0026rsquo;t put it in the configuration file or specify it on the command line, you won\u0026rsquo;t use the template that you\u0026rsquo;re expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi config.toml\rtheme = \u0026#34;zafta\u0026#34;\rbaseurl = \u0026#34;\u0026#34;\rlanguageCode = \u0026#34;en-us\u0026#34;\rtitle = \u0026#34;zafta - totally refreshing\u0026#34;\rMetaDataFormat = \u0026#34;toml\u0026#34;\r:wq\r$ Generate the Site\r#\rNow that we have an empty theme, let\u0026rsquo;s generate the site again.\n$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 2 ms\r$ Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme\u0026rsquo;s directory.\nLet\u0026rsquo;s check the public/ directory to see what Hugo\u0026rsquo;s created.\n$ ls -l public\rtotal 16\rdrwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html\r-rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml\rdrwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js\r-rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml\r$ Notice four things:\nHugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn\u0026rsquo;t create any pages. That\u0026rsquo;s because it considers a \u0026ldquo;page\u0026rdquo; to be a file created directly from a content file. It doesn\u0026rsquo;t count things like the index.html files that it creates automatically. The Home Page\r#\rHugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo\u0026rsquo;s warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] If it can\u0026rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n$ find . -name index.html | xargs ls -l\r-rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html\r$ The Magic of Static\r#\rHugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo\u0026rsquo;s opinion is that you\u0026rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don\u0026rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo\u0026rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.\n$ find themes/zafta -type d | xargs ls -ld\rdrwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta\rdrwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes\rdrwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts\rdrwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default\rdrwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials\rdrwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static\rdrwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css\rdrwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js\r$ The Theme Development Cycle\r#\rWhen you\u0026rsquo;re working on a theme, you will make changes in the theme\u0026rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\nPurge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4. I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Hugo site for information on using Git with Hugo.\nPurge the public/ Directory\r#\rWhen generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you\u0026rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.\nHugo\u0026rsquo;s Watch Option\r#\rHugo\u0026rsquo;s \u0026ldquo;--watch\u0026rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\nLive Reload\r#\rHugo\u0026rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \u0026ldquo;Wow, that\u0026rsquo;s totally amazing.\u0026rdquo;\nDevelopment Commands\r#\rUse the following commands as the basis for your workflow.\n## purge old files. hugo will recreate the public directory.\r##\r$ rm -rf public\r##\r## run hugo in watch mode\r##\r$ hugo server --watch --verbose Here\u0026rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I\u0026rsquo;ve said this before, it\u0026rsquo;s amazing.\n$ rm -rf public\r$ hugo server --watch --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 2 ms\rWatching for changes in /Users/quoha/Sites/zafta/content\rServing pages from /Users/quoha/Sites/zafta/public\rWeb Server is available at http://localhost:1313\rPress Ctrl+C to stop\rINFO: 2014/09/29 File System Event: [\u0026#34;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\u0026#34;: MODIFY|ATTRIB]\rChange detected, rebuilding site\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 1 ms Update the Home Page Template\r#\rThe home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme\u0026rsquo;s layout/ directory:\nindex.html _default/list.html _default/single.html We could update one of the default templates, but a good design decision is to update the most specific template available. That\u0026rsquo;s not a hard and fast rule (in fact, we\u0026rsquo;ll break it a few times in this tutorial), but it is a good generalization.\nMake a Static Home Page\r#\rRight now, that page is empty because we don\u0026rsquo;t have any content and we don\u0026rsquo;t have any logic in the template. Let\u0026rsquo;s change that by adding some text to the template.\n$ vi themes/zafta/layouts/index.html\r\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq\r$ Build the web site and then verify the results.\n$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 2 ms\r$ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l\r-rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html\r$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/html\u0026gt; Live Reload\r#\rNote: If you\u0026rsquo;re running the server with the --watch option, you\u0026rsquo;ll see different content in the file:\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; When you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\nBuild a \u0026ldquo;Dynamic\u0026rdquo; Home Page\r#\r\u0026ldquo;Dynamic home page?\u0026rdquo; Hugo\u0026rsquo;s a static web site generator, so this seems an odd thing to say. I mean let\u0026rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We\u0026rsquo;ll use iteration in the template to do that.\nCreate New Posts\r#\rNow that we have the home page generating static content, let\u0026rsquo;s add some content to the site. We\u0026rsquo;ll display these posts as a list on the home page and on their own page, too.\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n$ hugo --verbose new post/first.md\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 attempting to create post/first.md of post\rINFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md\rERROR: 2014/09/29 Unable to Cast \u0026lt;nil\u0026gt; to map[string]interface{}\r$ That wasn\u0026rsquo;t very nice, was it?\nThe \u0026ldquo;new\u0026rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there\u0026rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n$ vi themes/zafta/archetypes/post.md\r+++\rDescription = \u0026#34;\u0026#34;\rTags = []\rCategories = []\r+++\r:wq\r$ find themes/zafta/archetypes -type f | xargs ls -l\r-rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md\r-rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md\r$ hugo --verbose new post/first.md\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 attempting to create post/first.md of post\rINFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md\rINFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md\r/Users/quoha/Sites/zafta/content/post/first.md created\r$ hugo --verbose new post/second.md\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 attempting to create post/second.md of post\rINFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md\rINFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md\r/Users/quoha/Sites/zafta/content/post/second.md created\r$ ls -l content/post\rtotal 16\r-rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md\r-rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md\r$ cat content/post/first.md +++\rCategories = []\rDescription = \u0026#34;\u0026#34;\rTags = []\rdate = \u0026#34;2014-09-29T21:54:53-05:00\u0026#34;\rtitle = \u0026#34;first\u0026#34;\r+++\rmy first post\r$ cat content/post/second.md +++\rCategories = []\rDescription = \u0026#34;\u0026#34;\rTags = []\rdate = \u0026#34;2014-09-29T21:57:09-05:00\u0026#34;\rtitle = \u0026#34;second\u0026#34;\r+++\rmy second post\r$ Build the web site and then verify the results.\n$ rm -rf public\r$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;, \u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;}\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 2 pages created 0 tags created\r0 categories created\rin 4 ms\r$ The output says that it created 2 pages. Those are our new posts:\n$ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l\r-rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html\r$ The new files are empty because because the templates used to generate the content are empty. The homepage doesn\u0026rsquo;t show the new content, either. We have to update the templates to add the posts.\nList and Single Templates\r#\rIn Hugo, we have three major kinds of templates. There\u0026rsquo;s the home page template that we updated previously. It is used only by the home page. We also have \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named \u0026ldquo;list.html\u0026rdquo; and single templates are named \u0026ldquo;single.html.\u0026rdquo;\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\nAdd Content to the Homepage\r#\rThe home page will contain a list of posts. Let\u0026rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r{{ range first 10 .Data.Pages }}\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r{{ end }}\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r:wq\r$ Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \u0026ldquo;{{\u0026rdquo; and \u0026ldquo;}}\u0026rdquo;. In our template, the commands are:\nrange .Title end The \u0026ldquo;range\u0026rdquo; command is an iterator. We\u0026rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe \u0026ldquo;.Title\u0026rdquo; command prints the value of the \u0026ldquo;title\u0026rdquo; variable. Hugo pulls it from the front matter in the Markdown file.\nThe \u0026ldquo;end\u0026rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \u0026ldquo;end.\u0026rdquo; Everything between the \u0026ldquo;range\u0026rdquo; and \u0026ldquo;end\u0026rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt\u0026rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n$ rm -rf public\r$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;}\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 2 pages created 0 tags created\r0 categories created\rin 4 ms\r$ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html\r$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt;\r\u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r$ Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let\u0026rsquo;s take a moment to appreciate what we\u0026rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you\u0026rsquo;ve learned everything you need to know to build a theme. All that\u0026rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don\u0026rsquo;t worry, though, that\u0026rsquo;s all to come.\nAdd Content to the Posts\r#\rWe\u0026rsquo;re working with posts, which are in the content/post/ directory. That means that their section is \u0026ldquo;post\u0026rdquo; (and if we don\u0026rsquo;t do something weird, their type is also \u0026ldquo;post\u0026rdquo;).\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can\u0026rsquo;t find one, then it will look in the _default/ directory. There are some twists that we\u0026rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\nNow that we know the search rule, let\u0026rsquo;s see what we actually have available:\n$ find themes/zafta -name single.html | xargs ls -l\r-rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html We could create a new template, post/single.html, or change the default. Since we don\u0026rsquo;t know of any other content types, let\u0026rsquo;s start with updating the default.\nRemember, any content that we haven\u0026rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we\u0026rsquo;re going to be adding different types of content and we\u0026rsquo;re going to end up undoing some of the changes we\u0026rsquo;ve made. It\u0026rsquo;s good because we\u0026rsquo;ll be able to see immediate results. It\u0026rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we\u0026rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we\u0026rsquo;ll accept the cost and proceed.\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you\u0026rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That\u0026rsquo;s a refreshing amount of joy right there.\nUpdate the Template File\r#\r$ vi themes/zafta/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r{{ .Content }}\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r:wq\r$ Build the web site and verify the results.\n$ rm -rf public\r$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;}\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 2 pages created 0 tags created\r0 categories created\rin 4 ms\r$ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l\r-rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html\r-rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html\r-rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html\r$ cat public/post/first/index.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;first\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;my first post\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r$ cat public/post/second/index.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;second\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;my second post\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r$ Notice that the posts now have content. You can go to localhost:1313/post/first to verify.\nLinking to Content\r#\rThe posts are on the home page. Let\u0026rsquo;s add a link from there to the post. Since this is the home page, we\u0026rsquo;ll update its template.\n$ vi themes/zafta/layouts/index.html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r{{ range first 10 .Data.Pages }}\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r{{ end }}\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt; Build the web site and verify the results.\n$ rm -rf public\r$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;}\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 2 pages created 0 tags created\r0 categories created\rin 4 ms\r$ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l\r-rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html\r-rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html\r-rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html\r$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/second/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/first/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r$ Create a Post Listing\r#\rWe have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let\u0026rsquo;s make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let\u0026rsquo;s take a quick look and see which list templates are available.\n$ find themes/zafta -name list.html | xargs ls -l\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don\u0026rsquo;t have multiple content types, so let\u0026rsquo;s stay consistent and update the default list template.\nCreating Top Level Pages\r#\rLet\u0026rsquo;s add an \u0026ldquo;about\u0026rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let\u0026rsquo;s verify that by creating an \u0026ldquo;about\u0026rdquo; page at the top level:\n$ vi content/about.md +++\rtitle = \u0026#34;about\u0026#34;\rdescription = \u0026#34;about this site\u0026#34;\rdate = \u0026#34;2014-09-27\u0026#34;\rslug = \u0026#34;about time\u0026#34;\r+++\r## about us\ri\u0026#39;m speechless\r:wq Generate the web site and verify the results.\n$ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l\r-rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html\r-rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html\r-rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html\r-rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html\r-rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html Notice that the page wasn\u0026rsquo;t created at the top level. It was created in a sub-directory named \u0026lsquo;about-time/\u0026rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It\u0026rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n$ cat public/index.html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/theme/\u0026#34;\u0026gt;creating a new theme\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/about-time/\u0026#34;\u0026gt;about\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/second-post/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/first-post/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39;\r+ (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0]\r+ \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39;\r+ \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt; Notice that the \u0026ldquo;about\u0026rdquo; link is listed with the posts? That\u0026rsquo;s not desirable, so let\u0026rsquo;s change that first.\n$ vi themes/zafta/layouts/index.html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt;\r{{ range first 10 .Data.Pages }}\r{{ if eq .Type \u0026#34;post\u0026#34;}}\r\u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt;\r{{ end }}\r{{ end }}\r\u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt;\r{{ range .Data.Pages }}\r{{ if eq .Type \u0026#34;page\u0026#34; }}\r\u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt;\r{{ end }}\r{{ end }}\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r:wq Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n$ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l\r-rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html\r-rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html\r-rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html\r-rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html\r-rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let\u0026rsquo;s do it the hard way and change the permalink in the configuration file.\n$ vi config.toml\r[permalinks]\rpage = \u0026#34;/:title/\u0026#34;\rabout = \u0026#34;/:filename/\u0026#34; Generate the web site and verify that this didn\u0026rsquo;t work. Hugo lets \u0026ldquo;slug\u0026rdquo; or \u0026ldquo;URL\u0026rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\nSharing Templates\r#\rIf you\u0026rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn\u0026rsquo;t. That\u0026rsquo;s because we didn\u0026rsquo;t put the title in the home page\u0026rsquo;s template (layouts/index.html). That\u0026rsquo;s an easy thing to do, but let\u0026rsquo;s look at a different option.\nWe can put the common bits into a shared template that\u0026rsquo;s stored in the themes/zafta/layouts/partials/ directory.\nCreate the Header and Footer Partials\r#\rIn Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme\u0026rsquo;s presentation.\n$ vi themes/zafta/layouts/partials/header.html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r:wq\r$ vi themes/zafta/layouts/partials/footer.html\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r:wq Update the Home Page Template to Use the Partials\r#\rThe most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \u0026#34;theme/partials/header.html\u0026#34; . }} versus\n{{ partial \u0026#34;header.html\u0026#34; . }} Both pass in the context.\nLet\u0026rsquo;s change the home page template to use these new partials.\n$ vi themes/zafta/layouts/index.html\r{{ partial \u0026#34;header.html\u0026#34; . }}\r\u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt;\r{{ range first 10 .Data.Pages }}\r{{ if eq .Type \u0026#34;post\u0026#34;}}\r\u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt;\r{{ end }}\r{{ end }}\r\u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt;\r{{ range .Data.Pages }}\r{{ if or (eq .Type \u0026#34;page\u0026#34;) (eq .Type \u0026#34;about\u0026#34;) }}\r\u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt;\r{{ end }}\r{{ end }}\r{{ partial \u0026#34;footer.html\u0026#34; . }}\r:wq Generate the web site and verify the results. The title on the home page is now \u0026ldquo;your title here\u0026rdquo;, which comes from the \u0026ldquo;title\u0026rdquo; variable in the config.toml file.\nUpdate the Default Single Template to Use the Partials\r#\r$ vi themes/zafta/layouts/_default/single.html\r{{ partial \u0026#34;header.html\u0026#34; . }}\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r{{ .Content }}\r{{ partial \u0026#34;footer.html\u0026#34; . }}\r:wq Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\nAdd “Date Published” to Posts\r#\rIt\u0026rsquo;s common to have posts display the date that they were written or published, so let\u0026rsquo;s add that. The front matter of our posts has a variable named \u0026ldquo;date.\u0026rdquo; It\u0026rsquo;s usually the date the content was created, but let\u0026rsquo;s pretend that\u0026rsquo;s the value we want to display.\nAdd “Date Published” to the Template\r#\rWe\u0026rsquo;ll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }} Posts use the default single template, so we\u0026rsquo;ll change that file.\n$ vi themes/zafta/layouts/_default/single.html\r{{ partial \u0026#34;header.html\u0026#34; . }}\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r\u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt;\r{{ .Content }}\r{{ partial \u0026#34;footer.html\u0026#34; . }}\r:wq Generate the web site and verify the results. The posts now have the date displayed in them. There\u0026rsquo;s a problem, though. The \u0026ldquo;about\u0026rdquo; page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \u0026ldquo;if\u0026rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.\nThe \u0026ldquo;if\u0026rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of \u0026ldquo;code for today,\u0026rdquo; too.\nLet\u0026rsquo;s assume, though, that we\u0026rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we\u0026rsquo;re going to create a section template.\nLet\u0026rsquo;s restore the default single template before we forget.\n$ mkdir themes/zafta/layouts/post\r$ vi themes/zafta/layouts/_default/single.html\r{{ partial \u0026#34;header.html\u0026#34; . }}\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r{{ .Content }}\r{{ partial \u0026#34;footer.html\u0026#34; . }}\r:wq Now we\u0026rsquo;ll update the post\u0026rsquo;s version of the single template. If you remember Hugo\u0026rsquo;s rules, the template engine will use this version over the default.\n$ vi themes/zafta/layouts/post/single.html\r{{ partial \u0026#34;header.html\u0026#34; . }}\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r\u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt;\r{{ .Content }}\r{{ partial \u0026#34;footer.html\u0026#34; . }}\r:wq Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn\u0026rsquo;t.\nDon\u0026rsquo;t Repeat Yourself\r#\rDRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you\u0026rsquo;re figuring that out, accept that you\u0026rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it\u0026rsquo;s okay to delay splitting up a template.\n"},{"id":2,"href":"/posts/migrate-from-jekyll/","title":"Migrating from Jekyll","section":"Blog","content":"\rMove static content to static\r#\rJekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like\n▾ \u0026lt;root\u0026gt;/\r▾ images/\rlogo.png\rshould become\n▾ \u0026lt;root\u0026gt;/\r▾ static/\r▾ images/\rlogo.png\rAdditionally, you\u0026rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.\nCreate your Hugo configuration file\r#\rHugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details.\nSet your configuration publish folder to _site\r#\rThe default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you\u0026rsquo;ll want to do one of two alternatives:\nChange your submodule to point to map gh-pages to public instead of _site (recommended).\ngit submodule deinit _site\rgit rm _site\rgit submodule add -b gh-pages git@github.com:your-username/your-repo.git public\rOr, change the Hugo configuration to use _site instead of public.\n{\r..\r\u0026quot;publishdir\u0026quot;: \u0026quot;_site\u0026quot;,\r..\r}\rConvert Jekyll templates to Hugo templates\r#\rThat\u0026rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to Jekyll\u0026rsquo;s template documentation if you need to refresh your memory on how you built your blog and Hugo\u0026rsquo;s template to learn Hugo\u0026rsquo;s way.\nAs a single reference data point, converting my templates for heyitsalex.net took me no more than a few hours.\nConvert Jekyll plugins to Hugo shortcodes\r#\rJekyll has plugins; Hugo has shortcodes. It\u0026rsquo;s fairly trivial to do a port.\nImplementation\r#\rAs an example, I was using a custom image_tag plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.\nJekyll\u0026rsquo;s plugin:\nmodule Jekyll\rclass ImageTag \u0026lt; Liquid::Tag\r@url = nil\r@caption = nil\r@class = nil\r@link = nil\r// Patterns\rIMAGE_URL_WITH_CLASS_AND_CAPTION =\rIMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;(\\s+)-\u0026gt;((https?:\\/\\/|\\/)(\\S+))(\\s*)/i\rIMAGE_URL_WITH_CAPTION = /((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;/i\rIMAGE_URL_WITH_CLASS = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))/i\rIMAGE_URL = /((https?:\\/\\/|\\/)(\\S+))/i\rdef initialize(tag_name, markup, tokens)\rsuper\rif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK\r@class = $1\r@url = $3\r@caption = $7\r@link = $9\relsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION\r@class = $1\r@url = $3\r@caption = $7\relsif markup =~ IMAGE_URL_WITH_CAPTION\r@url = $1\r@caption = $5\relsif markup =~ IMAGE_URL_WITH_CLASS\r@class = $1\r@url = $3\relsif markup =~ IMAGE_URL\r@url = $1\rend\rend\rdef render(context)\rif @class\rsource = \u0026quot;\u0026lt;figure class='#{@class}'\u0026gt;\u0026quot;\relse\rsource = \u0026quot;\u0026lt;figure\u0026gt;\u0026quot;\rend\rif @link\rsource += \u0026quot;\u0026lt;a href=\\\u0026quot;#{@link}\\\u0026quot;\u0026gt;\u0026quot;\rend\rsource += \u0026quot;\u0026lt;img src=\\\u0026quot;#{@url}\\\u0026quot;\u0026gt;\u0026quot;\rif @link\rsource += \u0026quot;\u0026lt;/a\u0026gt;\u0026quot;\rend\rsource += \u0026quot;\u0026lt;figcaption\u0026gt;#{@caption}\u0026lt;/figcaption\u0026gt;\u0026quot; if @caption\rsource += \u0026quot;\u0026lt;/figure\u0026gt;\u0026quot;\rsource\rend\rend\rend\rLiquid::Template.register_tag('image', Jekyll::ImageTag)\ris written as this Hugo shortcode:\n\u0026lt;!-- image --\u0026gt;\r\u0026lt;figure {{ with .Get \u0026quot;class\u0026quot; }}class=\u0026quot;{{.}}\u0026quot;{{ end }}\u0026gt;\r{{ with .Get \u0026quot;link\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt;{{ end }}\r\u0026lt;img src=\u0026quot;{{ .Get \u0026quot;src\u0026quot; }}\u0026quot; {{ if or (.Get \u0026quot;alt\u0026quot;) (.Get \u0026quot;caption\u0026quot;) }}alt=\u0026quot;{{ with .Get \u0026quot;alt\u0026quot;}}{{.}}{{else}}{{ .Get \u0026quot;caption\u0026quot; }}{{ end }}\u0026quot;{{ end }} /\u0026gt;\r{{ if .Get \u0026quot;link\u0026quot;}}\u0026lt;/a\u0026gt;{{ end }}\r{{ if or (or (.Get \u0026quot;title\u0026quot;) (.Get \u0026quot;caption\u0026quot;)) (.Get \u0026quot;attr\u0026quot;)}}\r\u0026lt;figcaption\u0026gt;{{ if isset .Params \u0026quot;title\u0026quot; }}\r{{ .Get \u0026quot;title\u0026quot; }}{{ end }}\r{{ if or (.Get \u0026quot;caption\u0026quot;) (.Get \u0026quot;attr\u0026quot;)}}\u0026lt;p\u0026gt;\r{{ .Get \u0026quot;caption\u0026quot; }}\r{{ with .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt; {{ end }}\r{{ .Get \u0026quot;attr\u0026quot; }}\r{{ if .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;/a\u0026gt; {{ end }}\r\u0026lt;/p\u0026gt; {{ end }}\r\u0026lt;/figcaption\u0026gt;\r{{ end }}\r\u0026lt;/figure\u0026gt;\r\u0026lt;!-- image --\u0026gt;\rUsage\r#\rI simply changed:\n{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg \u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were \u0026quot;having fun\u0026quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; -\u0026gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}\rto this (this example uses a slightly extended version named fig, different than the built-in figure):\n{{% fig class=\u0026quot;full\u0026quot; src=\u0026quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg\u0026quot; title=\u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; link=\u0026quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/\u0026quot; %}}\rAs a bonus, the shortcode named parameters are, arguably, more readable.\nFinishing touches\r#\rFix content\r#\rDepending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that hugo server --watch is your friend. Test your changes and fix errors as needed.\nClean up\r#\rYou\u0026rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn\u0026rsquo;t used, delete it.\nA practical example in a diff\r#\rHey, it\u0026rsquo;s Alex was migrated in less than a father-with-kids day from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this diff.\n"},{"id":3,"href":"/posts/goisforlovers/","title":"(Hu)go Template Primer","section":"Blog","content":"Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.\nThis document is a brief primer on using Go templates. The Go docs provide more details.\nIntroduction to Go Templates\r#\rGo templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that Go templates parse very quickly.\nA unique characteristic of Go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the Go docs.\nBasic Syntax\r#\rGolang templates are HTML files with the addition of variables and functions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable \u0026ldquo;foo\u0026rdquo;:\n{{ foo }}\rParameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }}\rMethods and fields are accessed via dot notation\nAccessing the Page Parameter \u0026ldquo;bar\u0026rdquo;\n{{ .Params.bar }}\rParentheses can be used to group items together\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }}\rVariables\r#\rEach Go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.\nA variable is accessed by referencing the variable name.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;\rVariables can also be defined and referenced.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}}\r{{ $address }}\rFunctions\r#\rGo template ship with a few functions which provide basic functionality. The Go template system also provides a mechanism for applications to extend the available functions with their own. Hugo template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling hugo.\nExample:\n{{ add 1 2 }}\rIncludes\r#\rWhen including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Hugo.\nExample:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }}\rLogic\r#\rGo templates provide the most basic iteration and conditional logic.\nIteration\r#\rJust like in Go, the Go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range.\nExample 1: Using Context\n{{ range array }}\r{{ . }}\r{{ end }}\rExample 2: Declaring value variable name\n{{range $element := array}}\r{{ $element }}\r{{ end }}\rExample 2: Declaring key and value variable name\n{{range $index, $element := array}}\r{{ $index }}\r{{ $element }}\r{{ end }}\rConditionals\r#\rIf, else, with, or, \u0026amp; and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end.\nGo Templates treat the following values as false:\nfalse 0 any array, slice, map, or string of length zero Example 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }}\rExample 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }}\r{{ index .Params \u0026quot;alt\u0026quot; }}\r{{else}}\r{{ index .Params \u0026quot;caption\u0026quot; }}\r{{ end }}\rExample 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}}\rExample 4: With\nAn alternative way of writing \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent.\nThe first example above could be simplified as:\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }}\rExample 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }}\r{{ index .Params \u0026quot;alt\u0026quot; }}\r{{ else if isset .Params \u0026quot;caption\u0026quot; }}\r{{ index .Params \u0026quot;caption\u0026quot; }}\r{{ end }}\rPipes\r#\rOne of the most powerful components of Go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline\u0026rsquo;s output becomes the input of the following pipe.\nBecause of the very simple syntax of Go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1 :\n{{ if eq 1 1 }} Same {{ end }}\ris the same as\n{{ eq 1 1 | if }} Same {{ end }}\rIt does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes.\nExample 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }}\rAccess the page parameter called \u0026ldquo;disqus_url\u0026rdquo; and escape the HTML.\nExample 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}}\rStuff Here\r{{ end }}\rCould be rewritten as\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; | or isset .Params \u0026quot;attr\u0026quot; | if }}\rStuff Here\r{{ end }}\rContext (aka. the dot)\r#\rThe most easily overlooked concept to understand about Go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context.\nExample:\n{{ $title := .Site.Title }}\r{{ range .Params.tags }}\r\u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt;\r{{ end }}\rNotice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop.\nHugo Parameters\r#\rHugo provides the option of passing values to the template language through the site configuration (for sitewide values), or through the meta data of each specific piece of content. You can define any values of any type (supported by your front matter/config format) and use them however you want to inside of your templates.\nUsing Content (page) Parameters\r#\rIn each piece of content you can provide variables to be used by the templates. This happens in the front matter.\nAn example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn\u0026rsquo;t make a lot of sense. We\u0026rsquo;ve defined a variable in our front matter of some pages to turn off the TOC from being displayed.\nHere is the example front matter:\n---\rtitle: \u0026#34;Permalinks\u0026#34;\rdate: \u0026#34;2013-11-18\u0026#34;\raliases:\r- \u0026#34;/doc/permalinks/\u0026#34;\rgroups: [\u0026#34;extras\u0026#34;]\rgroups_weight: 30\rnotoc: true\r--- Here is the corresponding code inside of the template:\n{{ if not .Params.notoc }}\r\u0026lt;div id=\u0026quot;toc\u0026quot; class=\u0026quot;well col-md-4 col-sm-6\u0026quot;\u0026gt;\r{{ .TableOfContents }}\r\u0026lt;/div\u0026gt;\r{{ end }}\rUsing Site (config) Parameters\r#\rIn your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome.\nFor instance, you might declare:\nparams: CopyrightHTML: \u0026#34;Copyright \u0026amp;#xA9; 2013 John Doe. All Rights Reserved.\u0026#34; TwitterUser: \u0026#34;spf13\u0026#34; SidebarRecentLimit: 5 Within a footer layout, you might then declare a \u0026lt;footer\u0026gt; which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates.\n{{if .Site.Params.CopyrightHTML}}\u0026lt;footer\u0026gt;\r\u0026lt;div class=\u0026#34;text-center\u0026#34;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt;\r\u0026lt;/footer\u0026gt;{{end}} An alternative way of writing the \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent:\n{{with .Site.Params.TwitterUser}}\u0026lt;span class=\u0026#34;twitter\u0026#34;\u0026gt;\r\u0026lt;a href=\u0026#34;https://twitter.com/{{.}}\u0026#34; rel=\u0026#34;author\u0026#34;\u0026gt;\r\u0026lt;img src=\u0026#34;/images/twitter.png\u0026#34; width=\u0026#34;48\u0026#34; height=\u0026#34;48\u0026#34; title=\u0026#34;Twitter: {{.}}\u0026#34;\ralt=\u0026#34;Twitter\u0026#34;\u0026gt;\u0026lt;/a\u0026gt;\r\u0026lt;/span\u0026gt;{{end}} Finally, if you want to pull \u0026ldquo;magic constants\u0026rdquo; out of your layouts, you can do so, such as in this example:\n\u0026lt;nav class=\u0026#34;recent\u0026#34;\u0026gt;\r\u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt;\r\u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}\r\u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{.RelPermalink}}\u0026#34;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\r{{end}}\u0026lt;/ul\u0026gt;\r\u0026lt;/nav\u0026gt; "},{"id":4,"href":"/posts/hugoisforlovers/","title":"Getting Started with Hugo","section":"Blog","content":"\rStep 1. Install Hugo\r#\rGo to Hugo releases and download the appropriate version for your OS and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at Install Hugo\nStep 2. Build the Docs\r#\rHugo has its own example site which happens to also be the documentation site you are reading right now.\nFollow the following steps:\nClone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313 Corresponding pseudo commands:\ngit clone https://github.com/spf13/hugo\rcd hugo\r/path/to/where/you/installed/hugo server --source=./docs\r\u0026gt; 29 pages created\r\u0026gt; 0 tags index created\r\u0026gt; in 27 ms\r\u0026gt; Web Server is available at http://localhost:1313\r\u0026gt; Press ctrl+c to stop\rOnce you\u0026rsquo;ve gotten here, follow along the rest of this page on your local build.\nStep 3. Change the docs site\r#\rStop the Hugo process by hitting Ctrl+C.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch\r\u0026gt; 29 pages created\r\u0026gt; 0 tags index created\r\u0026gt; in 27 ms\r\u0026gt; Web Server is available at http://localhost:1313\r\u0026gt; Watching for changes in /Users/spf13/Code/hugo/docs/content\r\u0026gt; Press ctrl+c to stop\rOpen your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n\u0026gt; Change detected, rebuilding site\r\u0026gt; 29 pages created\r\u0026gt; 0 tags index created\r\u0026gt; in 26 ms\rRefresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it\u0026rsquo;s finished building. I double dare you. Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.\nStep 4. Have fun\r#\rThe best way to learn something is to play with it.\n"},{"id":5,"href":"/docs/mystudy/algorithm-note/part2/3_%EA%B7%B8%EB%A6%AC%EB%94%94/1%EC%9D%B4%EB%90%A0%EB%95%8C%EA%B9%8C%EC%A7%80/","title":"1이될때까지","section":"3. 그리디 알고리즘","content":"\r1이 될 때까지\r#\rINPUT\r#\r2 \u0026lt;= N \u0026lt;= 100,000 2 \u0026lt;= K \u0026lt;= 100,000 N \u0026gt;= K OUTPUT\r#\rN이 1이 될 때까지 수행해야 하는 과정의 최소 횟수 출력 Rule\r#\r둘 중 하나의 과정을 반복적으로 수행 2번 과정은 N이 K로 나누어 떨어질 때만 선택 가능 N에서 1을 뺀다. N을 K로 나눈다. Example\r#\r입력 출력 25 5 2 17 4 3 My Solution\r#\r2번이 가능하면 2번을 수행하는 게 가장 빠른 방법 연상되는 이유는 더 크게 줄어들기 때문에 1번을 선택했을 때, 2번보다 빠르려면, 1번을 수행한 수가 K로 나누어 떨어질 때 =\u0026gt; 그러려면 K가 1이어야 한다? =\u0026gt; 하지만 $K\u0026gt;=2$ =\u0026gt; 불가능! 무조건 2번 먼저 수행 # INPUT n, k = map(int, input().split()) # SOLUTION def solution(n, k): res = 0 while n \u0026gt; 1: if n % k == 0: n //= k else: n -= 1 res += 1 return res # OUTPUT print(solution(n, k)) 정답코드\r#\rn, k = map(int, input().split()) # SOLUTION def solution(n, k): res = 0 while n \u0026gt; 1: if n % k == 0: n //= k res += 1 else: res += (n % k) n -= (n % k) return res # OUTPUT print(solution(n, k)) "},{"id":6,"href":"/docs/mystudy/algorithm-note/part2/3_%EA%B7%B8%EB%A6%AC%EB%94%94/%EC%88%AB%EC%9E%90%EC%B9%B4%EB%93%9C%EA%B2%8C%EC%9E%84/","title":"숫자카드게임","section":"3. 그리디 알고리즘","content":"\r숫자 카드 게임\r#\rInput\r#\rN, M : 숫자카드들의 행, 열의 개수, 첫째줄에 주어짐 1 \u0026lt;= N, M \u0026lt;= 100 각 카드에 적힌 숫자들, 둘째줄부터 주어짐 1 \u0026lt;= 각 숫자 \u0026lt;= 10,000 Output\r#\r게임의 룰에 맞게 선택한 카드에 적힌 숫자 Rule\r#\r숫자카드들이 N x M 형태로 놓여있음 뽑고자 하는 카드가 포함되어 있는 행 선택 선택된 행에서 가장 작은 숫자카드를 뽑음 어떤 행을 선택해야 가장 높은 숫자의 카드를 뽑을 수 있을까? Example\r#\r입력 출력 3 3 3 1 2 4 1 4 2 2 2 2 2 4 7 3 1 8 3 3 3 4 3 My Solution\r#\r행의 최솟값들 중 최댓값 출력 # INPUT N, M = map(int, input().split()) arr = [] for _ in range(N): arr.append( list(map(int, input().split())) ) # SOLUTION def solution(N, M, arr): return max([min(a) for a in arr]) # OUTPUT print(solution(N, M, arr)) 정답코드\r#\rn, m = map(int, input().split()) result = 0 for i in range(n): data = list(map(int, input().split())) min_value = min(data) result = max(result, min_value) print(result) "},{"id":7,"href":"/docs/mystudy/algorithm-note/part2/3_%EA%B7%B8%EB%A6%AC%EB%94%94/%ED%81%B0%EC%88%98%EC%9D%98%EB%B2%95%EC%B9%99/","title":"큰수의법칙","section":"3. 그리디 알고리즘","content":"\r큰 수의 법칙\r#\rInput\r#\rN : 2 $\\leq$ N $\\leq$ 1,000, 배열의 크기 M : 1 $\\leq$ M $\\leq$ 10,000, 숫자가 더해지는 횟수 K : 1 $\\leq$ K $\\leq$ 10,000, 특정 인덱스의 수가 연속해서 더해질 수 있는 횟수 array : 주어진 배열 항상 K \u0026lt;= M 큰 수의 법칙\r#\r배열의 숫자들을 M 번 더하여 가장 큰 수를 만드는 법칙 특정한 인덱스에 해당하는 수가 연속해서 K번을 초과하여 더해질 수 없다. Output\r#\r큰 수의 법칙에 따른 결과 Example\r#\rN M K array result 5 8 3 2 4 5 4 6 46 5 7 2 3 4 3 4 3 28 예시1 : 6 + 6 + 6 + 5 + 6 + 6 + 6 + 5 = 46 예시2 : 4 + 4 + 4 + 4 + 4 + 4 + 4 = 28 My Solution\r#\r최댓값과 그다음 최댓값 외에는 쓰이지 않음\n왜냐하면, 최댓값을 K번 만큼 더한 다음에 그 다음 최댓값을 한 번 더 더하면 최댓값 연속 더한 횟수가 초기화 되기 때문에 다른 수를 더하는 것보다 큰 수를 만들 수 있음. 최댓값 m1과 그 다음 최댓값 m2를 구한다. $m1 * K + m2$ 를 최대한 반복 =\u0026gt; $(m1\\times K + m2)\\times {M//(K+1)}$ $m1$ 을 더할 수 있는 만큼 더해주기 =\u0026gt; $m1 \\times {M%(K+1)}$\n(최대 K번이기 때문에 연속해서 더하는 것 가능) def solution(N, M, K, arr): m1 = max(arr) arr.remove(m1) m2 = max(arr) res = (M//(K+1)) * (K * m1 + m2) + sum(([m1] * K + [m2])[:M%(K+1)]) return res python의 max 시간 복잡도 : $O(n)$ python의 sort 시간 복잡도 : $O(n log n)$ Better Solution\r#\rdef solution(N, M, K, arr): m1 = max(arr) arr.remove(m1) m2 = max(arr) res = (M//(K+1)) * (K * m1 + m2) + (M%(K+1)) * m1 return res "},{"id":8,"href":"/docs/mystudy/algorithm-note/part2/4_%EA%B5%AC%ED%98%84/%EA%B2%8C%EC%9E%84-%EA%B0%9C%EB%B0%9C/","title":"게임 개발","section":"4. 구현","content":"\r게임 개발\r#\rInput\r#\rN, M : 세로 크기, 가로 크기 (3 \u0026lt;= N,M \u0026lt;= 50) A, B, d : 게임 캐릭터가 있는 칸의 좌표 (A, B), 캐릭터가 바라보는 방향 d d 값 : 0 : 북 1 : 동 2 : 남 3 : 서 맵의 정보 : 육지인지 바다인지 N x M 으로 나타내줌 0 : 육지 1 : 바다 맵의 외곽은 항상 바다 게임 캐릭터가 처음 위치한 칸의 정보는 항상 육지 Output\r#\r첫째 줄에 이동을 마친 후 캐릭터가 방문한 칸의 수 Rule\r#\r현재 위치에서 현재 방향을 기준으로 반시계방향부터 차례대로 갈 곳을 정함 캐릭터의 왼쪽 방향(반시계 방향)에 가보지 않은 칸이 있다면, 왼쪽 방향으로 회전한 다음 왼쪽으로 한칸 전진. 왼쪽 방향에 가보지 않은 칸이 없다면, 왼쪽 방향으로만 회전 하고 1단계로 돌아가기 네 방향 모두 가본 칸이거나 바다로 되어 있는 칸이라면, 바라보는 방향을 유지한 채로 한 칸 뒤로 간 뒤, 1단계로 돌아가기. 뒤가 바다 방향이면 움직임을 멈추기. Example\r#\r입력 출력 4 4 1 1 0 1 1 1 1 1 0 0 0 1 1 1 0 1 1 1 1 1 3 "},{"id":9,"href":"/docs/mystudy/algorithm-note/part2/4_%EA%B5%AC%ED%98%84/%EC%83%81%ED%95%98%EC%A2%8C%EC%9A%B0/","title":"상하좌우","section":"4. 구현","content":"\r상하좌우\r#\rInput\r#\rN : 공간의 크기, N x N 크기의 정사각형 공간 이동할 계획서 : 여행가가 N x N 공간에서 이동할 계획, (1\u0026lt;= 이동횟수 \u0026lt;=100) Output\r#\r여행가가 최종적으로 도착할 지점의 좌표를 공백으로 구분하여 출력 이동할 때, N x N의 정사각형을 벗어나는 움직임은 무시됨 예를 들어, (1,1)에서 L 혹은 U의 움직임은 무시 Example\r#\r입력 출력 5 R R R U D D 3 4 My Solution\r#\rdef solution(N, moves): now = [1, 1] moves = moves.split() for m in moves: if m == \u0026#34;R\u0026#34;: now[1] += 1 elif m == \u0026#34;L\u0026#34;: now[1] -= 1 elif m == \u0026#34;U\u0026#34;: now[0] -= 1 else: now[0] += 1 now[0] = max(min(now[0], N), 1) now[1] = max(min(now[1], N), 1) return f\u0026#34;{now[0]} {now[1]}\u0026#34; N = int(input()) moves = input().split() print(solution(N, moves)) 문제 해설\r#\r일련의 명령어에 따라서 개체를 차례대로 이동시키므로 시뮬레이션 유형 문제 시뮬레이션 유형, 구현 유형, 완전 탐색 유형은 서로 유사함 # INPUT N = int(input()) x, y = 1, 1 plans = input().split() # 이동을 위한 변수 dx = [0, 0, -1, 1] dy = [-1, 1, 0, 0] move_types = [\u0026#39;L\u0026#39;, \u0026#39;R\u0026#39;, \u0026#39;U\u0026#39;, \u0026#39;D\u0026#39;] # solution for plan in plans: for i in range(len(move_types)): if plan == move_types[i]: nx = x + dx[i] ny = y + dy[i] if nx \u0026lt; 1 or ny \u0026lt; 1 or nx \u0026gt; n or ny \u0026gt; n: continue x, y = nx, ny print(x, y) "},{"id":10,"href":"/docs/mystudy/algorithm-note/part2/4_%EA%B5%AC%ED%98%84/%EC%8B%9C%EA%B0%81/","title":"시각","section":"4. 구현","content":"\r시각\r#\rInput\r#\rN : 정수, 0\u0026lt;= N \u0026lt;= 23 Output\r#\r00시 00분 00초부터 N시 59분 59초 까지의 모든 시각 중 3이 하나라도 포함되는 모든 경우의수 출력 Example\r#\r입력 출력 5 11475 My Solution\r#\rdef solution(N): res = 0 for h in range(N+1): if \u0026#39;3\u0026#39; in str(h): res += 60*60 continue for m in range(60): if \u0026#39;3\u0026#39; in str(m): res += 60 continue for s in range(60): if \u0026#39;3\u0026#39; in str(s): res += 1 return res N = 5 print(solution(N)) 문제 해설\r#\r하루는 86,400초로 모든 경우는 86,400가지밖에 존재하지 않음. 시간제한 2초 안에 해결 가능 완전 탐색 유형 완전 탐색 알고리즘은 비효율적인 시간복잡도를 가져 데이터 수가 큰 경우에 동작하지 않을 수 있다. 데이터가 1,000,000개 이하일 때 적절 # H를임력받기 h = int(input()) count = 0 for i in range(h + 1): for j in range(60) : for k in range(60) : #매시각안에 \u0026#39;3\u0026#39;이 포함되어있다면카운트층가 if \u0026#39;3\u0026#39; in str(i) + str(j) + str(k): count += 1 print (count) "},{"id":11,"href":"/docs/mystudy/algorithm-note/part2/4_%EA%B5%AC%ED%98%84/%EC%99%95%EC%8B%A4%EC%9D%98%EB%82%98%EC%9D%B4%ED%8A%B8/","title":"왕실의나이트","section":"4. 구현","content":"\r왕실의 나이트\r#\rInput\r#\r8 x 8 좌표평면에서 나이트가 현재 위치한 곳의 좌표 두문자로 구성된 문자열 Output\r#\r나이트가 이동할 수 있는 경우의 수 Example\r#\r입력 출력 a1 2 My Solution\r#\rmoves = [(2, 1), (2, -1), (-2, 1), (-2, 1), (1, 2), (1, -2), (-1, 2), (-1, -2)] def solution(x): c, r = ord(x[0])-96, int(x[1]) nx = [1 for m in moves if (0 \u0026lt; (c+m[0]) \u0026lt; 9) and (0 \u0026lt; (r+m[1]) \u0026lt; 9)] return sum(nx) x = input() print(solution(x)) 문제 해설\r#\r# 현재 나이트 위치 입력 input_data = input() row = int(inpu_data[1]) column = int(ord(input_data[0])) - int(ord(\u0026#39;a\u0026#39;)) + 1 # 8가지 이동 steps = [(2, 1), (2, -1), (-2, 1), (-2, 1), (1, 2), (1, -2), (-1, 2), (-1, -2)] # 이동가능 여부 확인 result = 0 for step in steps: nrow = row + step[0] ncol = col + step[1] if 1 \u0026lt;= nrow \u0026lt;= 8 and 1\u0026lt;= ncol \u0026lt;= 8: result += 1 # 출력 print(result) "},{"id":12,"href":"/docs/mystudy/algorithm-note/part2/5_dfs_bfs/datastructure/","title":"Data Structure","section":"5. DFS \u0026 BFS","content":"\r자료구조 기초\r#\r탐색\r#\r많은 양의 데이터 중 원하는 데이터를 찾는 과정 그래프, 트리 등의 자료구조 안에서 탐색하는 문제를 자주 다룸. 대표적인 탐색 알고리즘으로 DFS, BFS를 꼽을 수 있다. 자료구조\r#\r데이터를 표현하고 관리하고 처리하기 위한 구조 스택과 큐는 자료구조의 기초개념으로 \u0026ldquo;삽입\u0026rdquo;, \u0026ldquo;삭제\u0026rdquo; 의 두 핵심 함수로 구성됨 스택 : 선입후출 / 후입선출 큐 : 선입선출 구조 재귀함수 컴퓨터 내부에서 재귀함수의 수행은 스택 자료구조를 이용 (가장 마지막에 호출한 함수가 먼저 수행을 끝내야 그 앞의 함수 호출이 종료되기 때문에) 스택 자료구조를 활용해야 하는 상당 수 알고리즘은 재귀 함수를 이용해 간편하게 구현될 수 있다. (ex. DFS) 그래프\r#\r노드 Node 와 간선 Edge 으로 표현되며, 노드를 정점(Vertex)이라고도 한다. 그래프 탐색이란 하나의 노드를 시작으로 다수의 노드를 방문하는 것을 말함. 프로그래밍에서 그래프는 크게 2가지 방식으로 표현할 수 있다. 인접행렬 : 2차원 배열로 그래프의 연결관계를 표현하는 방식 인접 리스트 : 리스트로 그래프의 연결관계를 표현하는 방식 \u0026ldquo;연결 리스트\u0026quot;라는 자료구조 이용 python에서 연결리스트를 이용해 그래프를 표현하고자 할 때에도 단순히 2차원 리스트를 이용하면 됨. 인접 행렬 방식 예제\nINF = 999999999 graph = [ [0, 7, 5], [7, 0, INF], [5, INF, 0] ] print(graph) 인접 리스트 방식 예제\ngraph = [[] for _ in range(3)] # 노드 0에 연결된 노드 정보 (노드, 거리) graph[0].append((1, 7)) graph[0].append((2, 5)) # 노드 2에 연결된 노드 정보 (노드, 거리) graph[1].append((0, 7)) # 노드 2에 연결된 노드 정보 (노드, 거리) graph[2].append((0, 5)) print(graph) 인접 행렬과 인접 리스트 방식의 차이 메모리 측면에서 인접 행렬 방식은 노드 개수가 많을수록 메모리가 불필요하게 낭비되지만, 인접리스트 방식은 메모리를 효율적으로 사용함. 인접리스트 방식은 인접 행렬 방식에 비해 두 노드가 연결되어 있는지에 대한 정보를 얻는 속도가 느림. "},{"id":13,"href":"/docs/mystudy/algorithm-note/part2/5_dfs_bfs/readme/","title":"Readme","section":"5. DFS \u0026 BFS","content":"자료구조 기초\nDFS\r#\rDepth-First Search, 깊이 우선 탐색 그래프에서 깊은 부분을 우선적으로 탐색하는 알고리즘 특정한 경로로 탐색하다가 특정한 상황에서 최대한 깊숙이 들어가서 노드를 방문한 후, 다시 돌아가 다른 경로로 탐색하는 알고리즘 DFS는 스택 자료구조를 이용하며 구체적인 동작 과정은 다음과 같다 탐색 시작 노드를 스택에 삽입하고, 방문 처리한다. 스택의 최상단 노드에 방문하지 않은 인접 노드가 있으면 그 인접 노드를 스택에 넣고, 방문 처리를 한다. 방문하지 않은 인접 노드가 없으면 스택에서 최상단 노드를 꺼낸다. 2번의 과정을 더 이상 수행할 수 없을 때까지 반복한다. 방문 처리 : 스택에 한 번 삽입되어 처리된 노드가 다시 삽입되지 않게 체크하는 것. 방문처리를 함으로써 각 노드를 한 번씩만 처리한다. 스택 자료구조에 기초해 구현이 간단함. 실제로는 스택을 쓰지 않아도 됨. N개의 데이터가 있을 때, $O(N)$의 시간이 소요됨 재귀함수를 이용했을 때 매우 간결하게 구현할 수 있음. dfs 구현 (재귀함수)\ndef dfs(graph, v, visited): visited[v] = True print(v, end=\u0026#39; \u0026#39;) for i in graph[v]: if not visited[i]: dfs(graph, i, visited) graph = [ [], [2, 3, 8], [1, 7], [1, 4, 5], [3, 5], [3, 4], [7], [2, 6, 8], [1, 7] ] visited = [False] * 9 dfs(graph, 1, visited) BFS\r#\rBreadth First Search, 너비 우선 탐색 DFS가 최대한 멀리 있는 노드를 우선으로 탐색하는 방식이었다면, BFS는 가까운 노드부터 탐색하는 알고리즘 BFS는 큐 자료구조를 이용해서 구현하는 것이 정석 인접한 노드를 반복적으로 큐에 넣도록 알고리즘을 작성하면 자연스럽게 먼저 들어온 것이 먼저 나가게 되어 가까운 노드부터 탐색하게 됨 동작 방식 탐색 시작 노드를 큐에 삽입 후, 방문 처리 큐에서 노드를 꺼내 해당 노드의 인접 노드 중 방문하지 않은 노드를 큐에 삽입하고, 방문 처리 2번의 과정을 더 이상 수행할 수 없을 때까지 반복 큐 자료구조에 기초한다는 점에서 구현이 간단, deque 라이브러리를 사용하는 것이 좋음 N개의 데이터에 대해, $O(N)$의 시간이 소요됨. 일반적인 경우 실제 수행시간은 DFS보다 좋은 편이다. 왜냐하면, DFS를 재귀함수로 구현하면서 컴퓨터 시스템의 동작 특성상 실제 프로그램 수행시간은 느려진다. 스택 라이브러리를 이용해 시간 복잡도를 완화하는 테크닉이 필요하기도 하다. BFS 구현\nfrom collections import deque def bfs(graph, start, visited): queue = deque([start]) visited[start] = True while queue: v = queue.popleft() for i in graph[v]: print(v, end=\u0026#39; \u0026#39;) if not visited[i]: queue.append(i) visited[i] = True graph = [ [], [2, 3, 8], [1, 7], [1, 4, 5], [3, 5], [3, 4], [7], [2, 6, 8], [1, 7] ] visited = [False] * 9 bfs(graph, 1, visited) DFS BFS 동작 원리 스택 큐 구현 방법 재귀 함수 큐 자료구조 "},{"id":14,"href":"/docs/mystudy/algorithm-note/part2/5_dfs_bfs/%EB%AF%B8%EB%A1%9C%ED%83%88%EC%B6%9C/","title":"미로탈출","section":"5. DFS \u0026 BFS","content":"\r미로탈출\r#\rInput\r#\r두 정수 N, M : 4 \u0026lt;= N, M \u0026lt;= 200 N개의 줄, M개의 정수로 미로정보 주어짐 공백 X 시작과 마지막은 항상 1 Output\r#\r최소 이동 칸의 개수 Rule\r#\rN x M 크기의 직사각형 미로에 갇혀있다. 미로에 여러 마리의 괴물을 피해 탈출해야 함. 출발지점 (1,1)\n출구위치 (N, M)\n괴물이 있는 부분 : 0 \\ 괴물이 없는 부분 : 1 \\ 한번에 한칸씩 이동할 수 있음. 동빈이가 탈출하기 위해 움직여야 하는 최소 칸의 개수 구하기.\n미로는 반드시 탈출할 수 있는 형태로 제시됨\nExample\r#\r입력 출력 5 6101010111111000001111111111111 10 My Solution\r#\r# SOLUTION from collections import deque def bfs(graph, start, N, M): queue = deque([start]) lv = deque([1]) while queue: i, j = queue.popleft() l = lv.popleft() if graph[i][j]: # 출구에 도착하면 return if i==(N-1) and j==(M-1): return l # 주변 탐색 for ni, nj in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]: if (ni \u0026gt;= 0) and (ni \u0026lt; N) and (nj \u0026gt;=0) and (nj \u0026lt; M): queue.append([ni, nj]) lv.append(l+1) graph[i][j] = 0 # INPUT N, M = map(int, input().split()) miro = [input() for _ in range(N)] # OUTPUT print(bfs(miro, [0,0], N, M)) Solutin\r#\rfrom collections import deque # INPUT n, m = map(int, input().split()) graph = [] for i in range(n): graph.append(list(map(int, input()))) # 이동방향 dx = [-1, 1, 0, 0] dy = [0, 0, -1, 1] # BFS def bfs(x,y): queue = deque() queue.append((x, y)) while queue: x, y = queue.popleft() for i in range(4): nx = x + dx[i] ny = y + dy[i] if nx \u0026lt; 0 or ny \u0026lt; 0 or nx \u0026gt;= n ny \u0026gt;= m: continue if graph[nx][ny]==0: continue if graph[nx][ny]==1: graph[nx][ny] = graph[x][y] + 1 queue.append((nx, ny)) return graph[n-1][m-1] "},{"id":15,"href":"/docs/mystudy/algorithm-note/part2/5_dfs_bfs/%EC%9D%8C%EB%A3%8C%EC%88%98-%EC%96%BC%EB%A0%A4-%EB%A8%B9%EA%B8%B0/","title":"음료수 얼려 먹기","section":"5. DFS \u0026 BFS","content":"\r음료수 얼려 먹기\r#\rInput\r#\r얼음 틀의 세로길이 N, 가로길이 M (1 \u0026lt;= N, M \u0026lt;= 1,000) 두번째 줄부터 N+1번째 줄까지 얼음 틀의 형태가 주어짐 구멍이 뚫려있는 부분은 0, 그렇지 않은 부분은 1 Output\r#\r한 번에 만들 수 있는 아이스크림의 갯수 구하기 Example\r#\r입력 출력 15 14 00000111100000 11111101111110 11011101101110 11011101100000 11011111111111 11011111111100 11000000011111 01111111111111 00000000011111 01111111111000 00011111111000 00000001111000 11111111110011 1110001111111111100011111111 8 My Solution\r#\r# INPUT n, m = map(int, input().split()) graph = [] for i in range(n): graph.append(list(map(int, input()))) # SOLUTION from collections import deque def bfs(graph, start, N, M): \u0026#34;\u0026#34;\u0026#34; start 지점에서 시작하여 0인 영역을 모두 탐색하는 함수 \u0026#34;\u0026#34;\u0026#34; q = deque([start]) graph[start[0]][start[1]] = 0 while q: vi, vj = q.popleft() for i, j in [[vi+1, vj], [vi-1, vj], [vi, vj+1], [vi, vj-1]]: if i \u0026lt; 0 or i \u0026gt;= N or j \u0026lt; 0 or j \u0026gt;= M: continue if graph[i][j]==0: q.append([i, j]) graph[i][j] = 1 def solution(N, M, frame): i, j = 0, 0 res = 0 for i in range(N): for j in range(M): if frame[i][j] == 0: bfs(frame, [i, j], N, M) res += 1 else: continue return res # OUTPUT print( solution(N, M, frame) ) Solution\r#\r# N, M을 공백을 기준으로 구분하여 입력 받기 n, m = map(int, input().split()) # 2차원 리스트의 맵 정보 입력 받기 graph = [] for i in range(n): graph.append(list(map(int, input()))) # DFS로 특정한 노드를 방문한 뒤에 연결된 모든 노드들도 방문 def dfs(x, y): # 주어진 범위를 벗어나는 경우에는 즉시 종료 if x \u0026lt;= -1 or x \u0026gt;= n or y \u0026lt;= -1 or y \u0026gt;= m: return False # 현재 노드를 아직 방문하지 않았다면 if graph[x][y] == 0: # 해당 노드 방문 처리 graph[x][y] = 1 # 상, 하, 좌, 우의 위치들도 모두 재귀적으로 호출 dfs(x - 1, y) dfs(x, y - 1) dfs(x + 1, y) dfs(x, y + 1) return True return False # 모든 노드(위치)에 대하여 음료수 채우기 result = 0 for i in range(n): for j in range(m): # 현재 위치에서 DFS 수행 if dfs(i, j) == True: result += 1 print(result) # 정답 출력 "},{"id":16,"href":"/docs/mystudy/algorithm-note/part2/6_%EC%A0%95%EB%A0%AC/readme/","title":"Readme","section":"6. 정렬","content":"\r정렬\r#\r데이터를 특정한 기준에 따라 나열하는 것 프로그램 작성할 때 가장 많이 사용되는 알고리즘 이진탐색의 전처리 과정이기도 함 알고리즘의 효율성을 쉽게 이해할 수 있음 일반적으로 문제에서 요구하는 조건에 따라 적절한 정렬 알고리즘이 공식처럼 사용된다. 정렬 알고리즘의 종류\r#\r선택 정렬 삽입 정렬 퀵 정렬 계수 정렬 파이썬의 기본 정렬 라이브러리로 더 효과적인 정렬 하기\r#\r정렬 알고리즘은 이 밖에도 매우 다양한 종류가 있음. 정렬 알고리즘을 직접 작성하게 되는 경우도 있지만, 미리 만들어진 라이브러리를 이용하는 것이 효과적인 경우가 더 많다. 파이썬의 기본 정렬 라이브러리인 sorted()는 퀵 정렬과 동작 방식이 비슷한 병합 정렬을 기반으로 만들어졌다. 병합 정렬은 일반적으로는 퀵 정렬보다 느리지만 최악의 경우에도 시간복잡도 $O(NlogN)$을 보장한다. "},{"id":17,"href":"/docs/mystudy/algorithm-note/part2/6_%EC%A0%95%EB%A0%AC/%EA%B3%84%EC%88%98%EC%A0%95%EB%A0%AC/","title":"계수정렬","section":"6. 정렬","content":"\r계수 정렬\r#\r특정한 조건이 부합할 때만 사용할 수 있지만, 매우 빠른 정렬 알고리즘 데이터가 모두 양의 정수이며, 데이터의 개수가 N, 최댓값이 K일 때, 계수 정렬은 최악의 경우에도 수행시간 $O(N+K)$을 보장함 매우 빠르게 동작하며, 매우 간단한 원리 데이터의 크기 범위가 제한되어 정수 형태로 표현할 수 있을 때만 사용 가능 실수형 데이터로 주어질 때 사용하기 어려움 일반적으로는 가장 큰 데이터와 가장 작은 데이터의 차이가 1,000,000을 넘지 않을 때 효과적 데이터의 범위가 너무 크면 계수정렬을 사용할 수 없음. 계수정렬을 이용할 때에는 모든 범위를 담을 수 있는 크기의 리스트(배열)를 선언하기 때문 계수 정렬은 비교 기반의 정렬 알고리즘이 아니다. 계수정렬 소스코드\n# SOLUTION def sorting(arr): a, b = min(arr), max(arr) cnt_list = [0 for _ in range(b-a+1)] for v in arr: cnt_list[v-a] += 1 sorted_list = [] for i in range(b-a+1): for _ in range(cnt_list[i]): sorted_list.append(a+i) return sorted_list 시간복잡도\r#\r데이터가 정수, 데이터의 개수가 N, 최대값이 K일 때, $O(N+K)$ 데이터를 하나씩 확인하면서 최소, 최댓값을 확인하며, 인덱스의 값을 1씩 증가시키는 동작을 하며, 리스트의 각 인덱스에 해당하는 값들을 확인할 때 최댓값의 크기만큼 반복 수행하기 때문 사실 상 현존하는 정렬 알고리즘 중 기수 정렬과 더불어 가장 빠르다. 공간복잡도\r#\r때에 따라 심각한 비효율성을 초래할 수도 있음. (ex. 데이터가 0과 999,999 만 있을 때) 동일한 값을 가지는 데이터가 여러 개 등장할 때 적합 (ex. 성적) 크기가 한정되어 있고, 데이터가 많이 중복되어 있을수록 유리 "},{"id":18,"href":"/docs/mystudy/algorithm-note/part2/6_%EC%A0%95%EB%A0%AC/%EC%82%BD%EC%9E%85%EC%A0%95%EB%A0%AC/","title":"삽입정렬","section":"6. 정렬","content":"\r삽입정렬\r#\r데이터를 하나씩 확인하며, 각 데이터의 적절한 위치에 삽입하면 어떨까? 선택정렬에 비해 구현 난이도가 높은 편이지만, 실행 시간 측면에서 더 효율적인 알고리즘 특히 삽입 정렬은 필요할 때만 위치를 바꾸기 때문에 \u0026ldquo;데이터가 거의 정렬되어 있을 때\u0026rdquo; 효율적 특정한 데이터를 적절한 위치에 \u0026ldquo;삽입\u0026quot;한다는 의미 삽입정렬 방법 특정한 데이터가 적절한 위치에 들어가기 이전에 그 앞까지의 데이터는 이미 정렬되어 있다고 가정 정렬되어 있는 리스트에 적절한 위치를 찾은 뒤, 그 위치에 삽입 특정 데이터가 삽입될 위치를 선정할 때(왼쪽으로 한 칸씩 이동하며 탐색할 때), 삽입될 데이터보다 작은 데이터를 만나면, 그 위치에서 멈춤 삽입정렬 소스코드\n# INPUT arr = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8] # SOLUTION def insert_sorting(arr): for i in range(1, len(arr)): for j in range(i-1, -1, -1): if arr[i] \u0026gt; arr[j]: arr.insert(j+1, arr.pop(i)) break else: arr.insert(0, arr.pop(i)) # OUTPUT insert_sorting(arr) print(arr) 삽입정렬의 시간복잡도도 $O(N^2)$ 이지만, 리스트가 거의 정렬되어 있는 상태라면 퀵 정렬보다 빠를 수 있다. "},{"id":19,"href":"/docs/mystudy/algorithm-note/part2/6_%EC%A0%95%EB%A0%AC/%EC%84%A0%ED%83%9D%EC%A0%95%EB%A0%AC/","title":"선택정렬","section":"6. 정렬","content":"\r선택 정렬\r#\r매번 가장 작은 것을 선택한다는 의미의 알고리즘 가장 작은 데이터를 맨 앞에 있는 데이터와 바꾸고,\n그 다음 작은 데이터를 두 번째 데이터와 바꾸고 \u0026hellip; 이런 과정을 반복 # INPUT arr = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8] # SOLUTION def select_sorting(arr): for i in range(len(arr)): min_i = i for j in range(i+1, len(arr)): if arr[j] \u0026lt; arr[min_i]: min_i = j arr[i], arr[min_i] = arr[min_i], arr[i] # OUTPUT select_sorting(arr) print(arr) 선택 정렬의 시간복잡도는 $N + (N-1) + \\dots + 2$ 로 $O(N^2)$ 이다. 만약 정렬해야할 개수가 100배 늘어마녀 이론적으로 수행시간은 10,000배 늘어난다. 선택 정렬은 기본 라이브러리를 포함해 다른 알고리즘과 비교했을 때 매우 비효율적 데이터의 개수(N) 선택정렬 퀵 정렬 기본 정렬 라이브러리 N = 100 0.0123s 0.00156s 0.00000753s N = 1,000 0.354s 0.00343s 0.0000365 N = 10,000 15.475s 0.0312 0.00028s "},{"id":20,"href":"/docs/mystudy/algorithm-note/part2/6_%EC%A0%95%EB%A0%AC/%EC%84%B1%EC%A0%81%EC%9D%B4%EB%82%AE%EC%9D%80%EC%88%9C%EC%84%9C%EB%A1%9C/","title":"성적이낮은순서로","section":"6. 정렬","content":"\r성적이 낮은 순서로 학생 출력하기\r#\rINPUT\r#\r첫번째 줄 - 학생 수 N (1\u0026lt;=N\u0026lt;=100,000) 학생의 이름 문자열 A, 학생의 성적 B가 공백으로 구분되어 입력 학생의 성적 B는 100이하의 자연수 학생의 이름 A는 100 이하의 길이 OUTPUT\r#\r모든 학생의 이름을 성적이 낮은 순서대로 출력 성적이 동일한 학생의 순서는 자유롭게 출력 My Solution\r#\r# SOLUTION def solution(scores): sorted_list = [[] for _ in range(101)] for n, s in scores: sorted_list[s].append(n) for names in sorted_list: for name in names: print(name, end=\u0026#39; \u0026#39;) # TEST N = int(input()) scores = [] for _ in range(N): name, score = input().split() scores.append([name, int(score)]) solution(scores) Solution\r#\rN = int(input()) array = [] for _ in range(N): name, score = input().split() array.append([name, int(score)]) array = sorted(array, key=lambda x:x[1]) for student in array: print(student[0], end=\u0026#39; \u0026#39;) "},{"id":21,"href":"/docs/mystudy/algorithm-note/part2/6_%EC%A0%95%EB%A0%AC/%EC%9C%84%EC%97%90%EC%84%9C%EC%95%84%EB%9E%98%EB%A1%9C/","title":"위에서아래로","section":"6. 정렬","content":"\r위에서 아래로\r#\rINPUT\r#\r첫째줄 - 수열에 속해있는 수의 개수 N, (1 \u0026lt;= N \u0026lt;= 500) 둘째줄부터 N개의 수 입력됨 (범위 1~100,000의 자연수) OUTPUT\r#\r입력으로 주어진 수열이 내림차순으로 정렬된 결과를 공백으로 구분하여 출력 Example\r#\rINPUT OUTPUT 3152712 27 15 12 My Solution\r#\r# SOLUTION def solution(arr): cnt_list = [0 for _ in range(100001)] for v in arr: cnt_list[v] += 1 for i in range(100000, -1, -1): for _ in range(cnt_list[i]): print(i, end=\u0026#39; \u0026#39;) # TEST N = int(input()) arr = [] for _ in range(N): arr.append(int(input())) solution(arr) Solution\r#\r# N 입력받기 N = int(input()) # N개의 정수 입력받아 리스트에 저장 arr = [] for _ in range(N): arr.append(int(input())) # 정렬 arr = sorted(arr, reverse=True) for i in arr: print(i, end=\u0026#39; \u0026#39;) "},{"id":22,"href":"/docs/mystudy/algorithm-note/part2/6_%EC%A0%95%EB%A0%AC/%ED%80%B5%EC%A0%95%EB%A0%AC/","title":"퀵정렬","section":"6. 정렬","content":"\r퀵 정렬\r#\r정렬 알고리즘 중 가장 많이 사용되는 알고리즘\n퀵 정렬과 비교할만큼 빠른 알고리즘으로 \u0026lsquo;병합 정렬\u0026rsquo;이 있음.\n퀵 정렬과 병합 정렬은 대부분의 프로그래밍 언어에서 정렬 라이브러리의 근간이 되는 알고리즘이기도 함.\n기준을 설정한 다음 큰 수와 작은 수를 교환한 후 리스트를 반으로 나누는 방식으로 동작\n퀵 정렬에서는 피벗(Pivot)이 사용된다.\n큰 숫자와 작은 숫자를 교환할 때, 교환하기 위한 \u0026lsquo;기준\u0026rsquo;을 피벗이라고 표현\n피벗을 어떻게 설정하고 리스트를 분할하는지에 따라 여러 가지 방식의 퀵 정렬이 있다.\n호어 분할 방식\n리스트에서 첫 번째 데이터를 피벗으로 정함 왼쪽에서부터 피벗보다 큰 데이터를 찾고, 오른쪽에서부터 피벗보다 작은 데이터를 찾음 큰 데이터와 작은 데이터의 위치를 서로 교환 이어서 왼쪽부터 큰 데이터를, 오른쪽부터 작은 데이터를 찾은 뒤 교환 이 과정을 반복 왼쪽에서 찾던 값과 오른쪽에서 찾던 값이 엇갈릴 때, 작은 데이터와 피벗의 위치를 교환한다. 그러면 피벗을 기준으로 왼쪽은 모두 피벗보다 작은 데이터들, 오른쪽은 모두 피벗보다 큰 데이터들로 이루어져 있다. (분할 완료) 이 상태에서 왼쪽리스트와 오른쪽 리스트에서도 각각 피벗을 설정하여 동일한 방식으로 정렬 수행 반복 퀵정렬 소스코드\ndef quick_sort(arr, start, end): if start \u0026gt;= end: return pv = start l = start + 1 r = end while l \u0026lt;= r: # 인덱스 찾기 while l \u0026lt;= end and arr[l] \u0026lt;= arr[pv]: l += 1 while r \u0026gt; start and arr[r] \u0026gt;= arr[pv]: r -= 1 # 교환 if l \u0026gt; r: arr[pv], arr[r] = arr[r], arr[pv] else: arr[r], arr[l] = arr[l], arr[r] quick_sort(arr, start, r-1) quick_sort(arr, r+1, end) python의 장점을 살린 퀵 정렬 소스코드\ndef quick_sort(arr): if len(arr) \u0026lt;= 1: return arr pv = arr[0] tail = arr[1:] left = [x for x in tail if x \u0026lt;= pv] right = [x for x in tail if x \u0026gt; pv] return quick_sort(left) + [pv] + quick_sort(right) 시간 복잡도\r#\r선택정렬, 삽입정렬의 시간복잡도 $=O(N^2)$ 퀵 정렬의 평균적인 시간 복잡도 $=O(NlogN)$ 퀵 정렬의 최악의 경우 시간 복잡도 $=O(N^2)$ 무작위로 입력되는 데이터에서는 빠르게 동작할 확률이 높지만, 이미 데이터가 정렬되어 있는 경우에는 매우 느리게 동작한다. (삽입 정렬과 반대) "},{"id":23,"href":"/docs/mystudy/algorithm-note/part2/7_%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89/readme/","title":"Readme","section":"7. 이진탐색","content":"\r이진탐색\r#\r1. 범위를 반씩 좁혀가는 탐색\r#\r순차탐색\r#\rN개의 데이터가 있을 때, 그 데이터를 하나씩 확인하며 어떠한 처리를 해준 것이 순차 탐색 그자체 순차 탐색이란 리스트 안에 있는 특정한 데이터를 찾기 위해 앞에서부터 데이터를 하나씩 차례대로 확인하는 방법 보통 정렬되지 않은 리스트에서 데이터를 찾아야 할 때 사용한다. 순차 탐색은 리스트에 특정 값의 원소가 있는지 체크할 때도 쓰며, 리스트 자료형에서 특정한 원소의 개수를 세는 count() 메서드를 사용할 때도 쓰인다. 순차탐색의 최악의 경우 시간복잡도는 $O(N)$ 이진 탐색\r#\r데이터가 정렬되어 있어야만 사용할 수 있음. 이미 정렬되어 있다면, 매우 빠르게 데이터를 찾을 수 있다는 장점 탐색 범위를 절반씩 좁혀가며 탐색 이진 탐색은 위치를 나타내는 변수 3개를 사용. 탐색하고자 하는 범위의 시작점, 끝점, 중간점. 찾으려는 데이터와 중간점 위치에 있는 데이터를 반복적으로 비교해서 원하는 데이터를 찾는 것. 이진 탐색의 시간 복잡도는 한 번 확인할 때마다 원소의 개수가 절반씩 줄어든다는 점에서 $O(logN)$이다. 이진탐색을 구현하는 2가지 방법. 재귀 함수 이용, 반복문 이용 반복문을 사용한 이진탐색 소스코드\ndef binary_search(arr, target): s, e = 0, len(arr)-1 m = (s+e)//2 while arr[m]!=target: if s \u0026gt; e: return -1 if target \u0026lt; arr[m]: e = m-1 m = (s+e)//2 else: s = m+1 m = (s+e)//2 return m 재귀함수 소스코드\n# SOLUTION def binary_search(arr, target, s, e): if e \u0026lt; s: return -1 m = (s+e)//2 if arr[m] \u0026lt; target: return binary_search(arr, target, m+1, e) elif arr[m] \u0026gt; target: return binary_search(arr, target, s, m-1) else: return arr[m] # TEST N = 10 arr = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19] target = 7 print(binary_search(arr, target, 0, N-1)) 이진탐색을 쓸 수 있는 조건\r#\r단조 증가 함수 / 정렬되어 있을 때 코딩테스트에서 이진탐색\r#\r제대로 이진 탐색 코드를 작성한 프로그래머는 10% 내외라 할 정도로 까다로운 구현 코딩테스트에서 단골로 나오는 문제 이진 탐색의 원리는 다른 알고리즘에서도 폭넓게 적용되는 원리와 유사 높은 난이도의 문제에서는 이진탐색 알고리즘과 다른 알고리즘과 함께 사용되기도 함. 탐색 범위가 큰 상황에서 많이 쓰임. 탐색범위가 2,000만을 넘어가면 이진 탐색으로 접근해보기 처리해야할 데이터의 개수나 값이 1,000만 단위 이상으로 넘어가면 이진 탐색과 같이 $O(logN)$ 의 속도를 내야 하는 알고리즘을 떠올려야 한다. 트리 자료구조\r#\r이진 탐색의 전제 조건은 \u0026ldquo;정렬\u0026rdquo; 데이터베이스는 내부적으로 대용량 데이터 처리에 적합한 트리 자료구조를 이용하여 항상 데이터가 정령되어 있다. 데이터베이스에서는 이진 탐색과는 조금 다르지만, 이진 탐색과 유사한 방법을 이용해 탐색을 항상 빠르게 수행하도록 설계되어 있어 데이터가 많아도 탐색 속도가 빠름 트리 자료구조란? 노드와 노드의 연결로 표현 노드 : 어떤 정보의 단위로서 어떠한 정보를 가지고 있는 개체 트리 자료구조는 그래프 자료구조의 일종으로 데이터베이스 시스템이나 파일 시스템과 같은 곳에서 많은 양의 데이터를 관리하기 위한 목적으로 사용 트리 자료구조의 특징 트리는 부모 노드와 자식 노드의 관계로 표현됨 트리의 최상단 노드를 루트 노드라고 함 트리의 최하단 노드를 단말 노드라고 함 트리에서 일부를 떼어내도 트리 구조이며, 이를 서브 트리라 함 트리는 파일 시스템과 같이 계층적이고 정렬된 데이터를 다루기에 적합 =\u0026gt; 큰 데이터를 처리하는 소프트웨어는 대부분 데이터를 트리 자료구조로 저장해 이진 탐색과 같은 탐색 기법을 이용해 빠르게 탐색한다. 이진 탐색 트리\r#\r트리 자료구조 중에서 가장 간단한 형태 이진 탐색이 동작할 수 있도록 고안된 효율적인 탐색이 가능한 자료구조 모든 트리가 다 이진 탐색 트리는 아니다. 이진 탐색 트리의 특징 부모 노드보다 왼쪽 자식 노드가 작다. 부모 노드보다 오른쪽 자식 노드가 크다. "},{"id":24,"href":"/docs/mystudy/algorithm-note/part2/7_%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89/%EB%96%A1%EB%B3%B6%EC%9D%B4%EB%96%A1%EB%A7%8C%EB%93%A4%EA%B8%B0/","title":"떡볶이떡만들기","section":"7. 이진탐색","content":"\r떡볶이 떡 만들기\r#\rINPUT\r#\r첫째줄: N, M = 떡의 개수, 요청한 떡의 길이\n($1\\le N \\le 1,000,000, 1\\le M \\le 2,000,000,000$) 둘째줄: 떡의 개별 높이 떡의 개별 높이의 총합은 항상 M 이상. 높이는 1,000,000,000보다 작거나 같은 양의 정수 또는 0 OUTPUT\r#\r적어도 M만큼 떡을 가져가기 위해 절단기에 설정할 수 있는 높이의 최댓값 Example\r#\r문제\r#\r절단기에 높이 H를 설정하면, 높이가 H보다 긴 떡만 H 위의 부분이 잘림. 예) 19, 14, 14, 17cm 의 떡들을 15cm로 설정한 절단기로 자르면, 15, 14, 14, 15cm가 되고, 잘린 떡은 4, 0, 0, 2cm이며, 총 잘린 6cm의 떡을 가져갈 수 있다. My Solution\r#\rdef binary_search(arr, target, s, e): \u0026#34;\u0026#34;\u0026#34;이진탐색 코드의 변형 arr내에 target이 없을 때 없다고 반환하지 않고, 큰 값을 반환\u0026#34;\u0026#34;\u0026#34; if s \u0026gt; e: return s m = (s+e)//2 if arr[m] \u0026lt; target: return binary_search(arr, target, m+1, e) elif arr[m] \u0026gt; target: return binary_search(arr, target, s, m-1) else: return m def solution(arr, N, M): \u0026#34;\u0026#34;\u0026#34;떡볶이 떡 길이 계산\u0026#34;\u0026#34;\u0026#34; arr.sort(reverse=True) # diff \u0026amp; cnt 만들기 arr_dup = [] cnts = [] diffs = [] c = 0 for i in range(N-1): d = arr[i] - arr[i+1] c += 1 if d != 0: arr_dup.append(arr[i]) cnts.append(c) diffs.append(d) arr_dup.extend([arr[-1], 0]) cnts.append(c+1) diffs.append(arr[-1]) # dduck_diff dduk_diff = [d*c for d,c in zip(diffs, cnts)] # dduck s = 0 dduk = [] for dd in dduk_diff: s += dd dduk.append(s) idx = binary_search(dduk, M, 0, len(dduk)-1) return arr_dup[idx+1] + (dduk[idx] - M)//cnts[idx] # TEST N, M = 4, 6 arr = [19, 15, 10, 17] print(solution(arr, N, M)) # 15 N, M = 5, 6 arr = [19, 15, 10, 17, 17] print(solution(arr, N, M)) # 15 N, M = 6, 6 arr = [19, 15, 10, 17, 17, 19] print(solution(arr, N, M)) # 16 N, M = 6, 30 arr = [19, 15, 10, 17, 17, 19] print(solution(arr, N, M)) # 11 N, M = 6, 50 arr = [19, 15, 10, 17, 17, 19] print(solution(arr, N, M)) # 7 N, M = 6, 97 arr = [19, 15, 10, 17, 17, 19] print(solution(arr, N, M)) # 0 시간복잡도 = $Nlog_2N + 7N + log_2N=O(Nlog_2N)$ 최악의 경우 대략 27,000,000번의 연산 필요 문제 해설\r#\r전형적인 이진 탐색 문제, 파라메트릭 서치 유형의 문제\n파라메트릭 서치 : 최적화 문제를 결정문제로 바꾸어 해결하는 기법\n\u0026ldquo;원하는 조건을 만족하는 가장 알맞은 값을 찾는 문제\u0026quot;에 주로 파라메트릭 서치를 사용\n예를 들어, 범위 내에서 조건을 만족하는 가장 큰 값을 찾으라는 최적화 문제라면 이진탐색으로 결정 문제를 해결하면서 범위를 좁혀갈 수 있다.\n코테나 대회에서는 보통 파라메트릭 서치 유형은 이진 탐색을 이용하여 해결\n이 문제의 풀이 아이디어 - 적절한 높이를 찾을 때까지 절단기의 높이 H를 반복해서 조정하는 것\n높이 H를 이진 탐색으로 찾으면 $log_21,000,000,000 = 29.9$으로 대략 31번(?)만에 찾을 수 있다.\n이때 떡의 개수 N 이 최대 1,000,000개 이므로 높이 한번에 1,000,000번 연산이 필요하므로 대략 최대 3,000만번 정도의 연산으로 문제를 풀 수 있다.\n# 입력받기 n, m = list(map(int, input().split(\u0026#39; \u0026#39;))) array = list(map(int, input().split())) # 이진탐색의 시작과 끝점 start = 0 end = max(array) # 이진 탐색 수행 result = 0 while start \u0026lt;= end: total = 0 mid = (start + end) // 2 for x in array: if x \u0026gt; mid: total += (x - mid) if total \u0026lt; m: end = mid - 1 else: result = mid start = mid + 1 print(result) 해설 읽고 작성한 코드\ndef calcul(arr, H): S = 0 for a in arr: S += a - H if a \u0026gt; H else 0 return S def solution(arr, N, M): s, e = 0, max(arr) while True: if s \u0026gt; e: return e m = (s+e)//2 D = calcul(arr, m) if D \u0026lt; M: e = m - 1 elif D \u0026gt; M: s = m + 1 else: return m "},{"id":25,"href":"/docs/mystudy/algorithm-note/part2/7_%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89/%EB%B6%80%ED%92%88%EC%B0%BE%EA%B8%B0/","title":"부품찾기","section":"7. 이진탐색","content":"\r부품 찾기\r#\rINPUT\r#\r$N$ : 탐색할 배열의 크기 ($1 \\le N \\le 1,000,000$) 공백으로 구분된 N개의 정수: 탐색할 배열, $1 \u0026lt; 정수 \\le 1,000,000$ $M$ : 찾으려는 숫자의 갯수 ($1 \\le M \\le 100,000$) 공백으로 구분된 M개의 정수: 탐색할 값, ($1 \u0026lt; N \\le 1,000,000$) OUTPUT\r#\r찾으려는 값들의 존재 여부를 yes, no로 출력 Example\r#\rInput Output 58 3 7 9 235 7 9 no yes yes My Solution\r#\r# SOLUTION def binary_search(arr, target, s, e): if e \u0026lt; s: return -1 m = (s+e)//2 if arr[m] \u0026lt; target: return binary_search(arr, target, m+1, e) elif arr[m] \u0026gt; target: return binary_search(arr, target, s, m-1) else: return arr[m] def solution(arr, targets, N): arr.sort() for t in targets: if binary_search(arr, t, 0, N-1) != -1: print(\u0026#34;yes\u0026#34;, end=\u0026#34; \u0026#34;) else: print(\u0026#34;no\u0026#34;, end=\u0026#34; \u0026#34;) Solution\r#\rdef solution(arr, targets, N): arr_sort = [0] * 1000001 for a in arr: arr_sort[a] = 1 for t in targets: if arr_sort[t]: print(\u0026#34;yes\u0026#34;, end=\u0026#34; \u0026#34;) else: print(\u0026#34;no\u0026#34;, end=\u0026#34; \u0026#34;) # TEST N = 5 arr = [8, 3, 7, 9, 2] M = 3 targets = [5, 7, 9] solution(arr, targets, N) "},{"id":26,"href":"/docs/mystudy/algorithm-note/part2/7_%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89/%EC%A7%95%EA%B2%80%EB%8B%A4%EB%A6%AC%EA%B1%B4%EB%84%88%EA%B8%B0/","title":"징검다리건너기","section":"7. 이진탐색","content":"\r프로그래머스 - 징검다리 건너기\r#\r문제 링크 : 링크\nInput\r#\r디딤돌에 적힌 숫자가 순서대로 담긴 배열 stones 한 번에 건너뛸 수 있는 디딤돌의 최대 칸수 k 디딤돌에는 모두 숫자가 적혀 있으며 디딤돌의 숫자는 한 번 밟을 때마다 1씩 줄어듭니다. 디딤돌의 숫자가 0이 되면 더 이상 밟을 수 없으며 이때는 그 다음 디딤돌로 한번에 여러 칸을 건너 뛸 수 있습니다. 단, 다음으로 밟을 수 있는 디딤돌이 여러 개인 경우 무조건 가장 가까운 디딤돌로만 건너뛸 수 있습니다 Output\r#\r최대 몇 명까지 징검다리를 건널 수 있는지 return 입력과 출력 예\r#\rstones k result [2, 4, 5, 3, 2, 1, 4, 2, 5, 1] 3 3 나의 풀이 코드\r#\r통과 (313.83ms, 18.6MB)\ndef check(stones, k, mid): cnt = 0 for stone in stones: if stone \u0026lt;= mid: cnt += 1 else: cnt = 0 if cnt \u0026gt;= k: return False return True def binary_search(stones, k, s, e): while s \u0026lt;= e: mid = (s+e)//2 if check(stones, k, mid): s = mid + 1 else: e = mid - 1 return s def solution(stones, k): s = 1 e = max(stones) return binary_search(stones, k, s, e) $O(?)$ 이게 왜 빠르지..? 솔루션 보고 풀었다. 이진탐색을 데이터를 탐색하는 데 쓴 것이 아닌 정답을 찾아가는 데 이진탐색을 썼다. 정답이 mid보다 큰지 작은지 확인하고, s,e를 조정해가며 정답을 찾는 방법 함수 binary_search - 이진탐색 함수의 변형 check - mid명이 지나갈 수 있는지 확인하는 함수 binary_search 에서 mid 값이 정답일때는 어떻게 되나 생각했는데,\ns = e 로 수렴하고, 마지막 loop에서 s + 1을 return 하게되면서 해결 더 빠른 풀이 코드\r#\r통과 (19.82ms, 18.5MB)\ndef solution(stones, k): cnt = 200000000 pointer = 0 change = 0 while pointer \u0026lt; len(stones) - (k-1): pointer += stones[pointer:pointer+k].index(max(stones[pointer:pointer+k])) if cnt \u0026gt; stones[pointer]: cnt = stones[pointer] change+=1 pointer += 1 if change \u0026gt;= 15: break if change \u0026lt; 15: return cnt else: cnt = [] pointer = 0 while pointer \u0026lt; len(stones) - (k-1): cnt.append(max(stones[pointer:pointer+k])) pointer += k return min(cnt) $O(S \\times k)$ $S$ : stones의 길이 $k$ : input k 처음에 생각했던 방법과 비슷하지만, 효율성에서 통과하지 못했던 것 이 코드는 조금 더 불필요한 계산들을 쳐낸 듯 좀 더 공부해야 함! 이진탐색\r#\r이진탐색이 적용가능한 경우\r#\r단조증가 함수일때 한 점에서만 변하는 조건함수를 정의할 수 있을 때\n$g(x) = \\begin{cases} 0, ;(x\u0026lt;0)\\ 1, ;(x\\geq 0) \\end{cases}$ 이진탐색 조건 설정하기\r#\rlow, high 불변의 법칙? $g(low)=0$, $g(high)=1$ 를 항상 만족하도록 하면 됨. (반대일 경우라도) low, high 를 계속 수정해 나갈때에 위 조건을 만족하도록 low 또는 high를 수정하면 됨. "},{"id":27,"href":"/docs/mystudy/algorithm-note/part2/8_%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/1%EB%A1%9C%EB%A7%8C%EB%93%A4%EA%B8%B0/","title":"1로만들기","section":"8. DP","content":"\r1로 만들기\r#\r정수 X에 대해 4가지 연산을 사용해 1을 만들려고 함. 최소한의 연산횟수를 구하기.\n연산\nX가 5로 나누어 떨어지면, 5로 나눈다. X가 3로 나누어 떨어지면, 3으로 나눈다. X가 2로 나누어 떨어지면, 2로 나눈다. X에서 1을 뺀다. INPUT\r#\r첫째줄 정수 X 1 \u0026lt;= X \u0026lt;= 30,000 OUTPUT\r#\r최소한의 연산 횟수 My Solution\r#\r연산1이 항상 연산2보다 좋다고 할 수 없음.\n(연산2가 항상 연산3보다 좋을 수 없으며, 연산3이 항상 연산4보다 좋을 수 없음.) =\u0026gt; greedy 아님 어느정도 탐색과 모험?이 필요함. X가 5로 나누어 떨어진다면, f(X)는 f(X//5)+1이 될 수도 있음. f(X//5) 또한 최소한의 연산횟수일 거기 때문에 그렇다면, 상향식이 좋을까? 하향식이 좋을까? 하향식이 최소한의 연산을 쓸 것 같아서 좋지만, 스택공간이 부족할 것 같기도 함 상향식이면.. 어떻게 연산할 숫자들을 \u0026hellip;? # SOLUTION noprs = [0]*30001 def solution(x): if x == 1 or noprs[x]!=0: return noprs[x] oprs = [] if x%5==0: oprs.append(solution(x//5)) if x%3==0: oprs.append(solution(x//3)) if x % 2 == 0: oprs.append(solution(x//2)) oprs.append(solution(x-1)) noprs[x] = min(oprs)+1 return noprs[x] # INPUT X = int(input()) print(solution(X)) Book Solution\r#\rBottom-Up\nx = int(input()) # DP 테이블 d = [0] * 30001 # Bottom-Up for i in range(2, x+1): d[i] = d[i-1] + 1 if i % 2 == 0: d[i] = min(d[i], d[i//2] + 1) if i % 3 == 0: d[i] = min(d[i], d[i//3] + 1) if i % 5 == 0: d[i] = min(d[i], d[i//5] + 1) print(d[x]) 시간복잡도 = $4X = O(X)$ "},{"id":28,"href":"/docs/mystudy/algorithm-note/part2/8_%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/readme/","title":"Readme","section":"8. DP","content":"\r다이나믹 프로그래밍\r#\r중복되는 연산을 줄이자\r#\r최적의 해를 구하기에 시간이 매우 많이 필요하거나 메모리 공간이 매우 많이 필요한문제는 컴퓨터로도 해결하기 어렵다. 연산 속도와 메모리 공간을 최대한으로 활용할 수 있는 효율적인 알고리즘 작성 필요 메모리 공간을 약간 더 사용하면서 연산 속도를 비약적으로 증가시키는 대표적인 방법 Dynamic Programming 동적 계획법이라고 표현하기도 한다. 다이나믹 프로그래밍으로 해결할 수 있는 대표적인 예시: 피보나치 수열 ** 파이썬의 경우 기본 자료형인 리스트 자료형이 연결 리스트 기능을 포함하고 있음.\n심각한 시간 복잡도를 발생시키는 재귀함수\r#\r재귀함수로 구현한 피보나치 함수\ndef fibo(x): if x==1 or x==2: return 1 return fibo(x-1) + fibo(x-2) 위와 같이 피보나치 수열의 소스코드를 짜면 시간복잡도가 $O(2^N)$ N=30 이면 약 10억 가량의 연산 수행 필요 동일한 함수가 반복적으로 호출되며 불필요한 연산 발생 이러한 문제를 다이나믹 프로그래밍으로 효율적으로 해결 다이나믹 프로그래밍을 사용할 수 있는 조건\r#\r큰 문제를 작은 문제로 나눌 수 있다. 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 동일하다. 메모제이션(Memoization) 기법\r#\r다이나믹 프로그래밍 구현할 수 있는 기법 중 하나 한 번 구한 결과를 메모리 공간에 메모해 두고 다시 호출 메모한 결과를 그대로 가져오는 기법 값을 저장하는 방법이므로 캐싱(Caching)이라고도 함 메모제이션 기법을 사용한 피보나치 수열\nd = [0] * 100 def fibo(x): if x==1 or x==2: return 1 if d[x]!=0: return d[x] d[x] = fibo(x-1) + fibo(x-2) return d[x] 반복문을 사용한 DP\r#\r재귀 함수를 사용하면 함수를 다시 호출했을 때, 메모리 상에 적재되는 일련의 과정을 따라야 하기 때문에 오버헤드가 발생할 수도 있다. 일반적으로 반복문을 이용한 DP가 더 성능이 좋다. DP를 적용했을 때 피보나치 수열 알고리즘의 시간복잡도? $O(N)$ 재귀 함수를 이용한 DP는 **Top-Down 방식(하향식)**이며, 반복문을 이용한 DP는 Bottom-Up 방식(상향식) 결론\r#\r가능하다면 탑다운 보다는 보텀업 방식 권장 재귀함수는 스택의 크기가 한정되어 있을 수도 있기 때문 문제\r#\r1. 1로만들기\n2. 개미전사\n3. 바닥공사\n4. 효율적인 화폐구성\n"},{"id":29,"href":"/docs/mystudy/algorithm-note/part2/8_%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/%EA%B0%9C%EB%AF%B8%EC%A0%84%EC%82%AC/","title":"개미전사","section":"8. DP","content":"\r개미전사\r#\r메뚜기 마을의 식량창고는 일직선상에 있음. 개미전사가 메뚜기의 식량창고를 선택적으로 약탈하여 식량을 뺏을 예정\n하지만, 메뚜기들은 인접한 식량창고가 털리면 바로 알아챔. 고로, 최소 한 칸 이상 떨어진 식량창고를 약탈할 수 있음. 최대한 많이 얻을 수 있는 식량은?\nINPUT\r#\r첫째줄에 식량창고의 개수 N, 3 \u0026lt;= N \u0026lt;= 100 둘째줄에 공백으로 구분된 식량창고에 저장된 식량의 개수 K 0 \u0026lt;= K \u0026lt;= 1000 OUTPUT\r#\r개미전사가 얻을 수 있는 식량의 최댓값 Example\r#\r입력 출력 41 3 1 5 8 My Solution\r#\rdef solution(N, arr): dp_arr = arr[:2] + [0]*(N-2) for i in range(2, N): dp_arr[i] = max(dp_arr[i-1], dp_arr[i-2] + arr[i]) return dp_arr[-1] # INPUT N = int(input()) arr = list(map(int, input().split())) # OUTPUT print(solution(N, arr)) "},{"id":30,"href":"/docs/mystudy/algorithm-note/part2/8_%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/%EB%B0%94%EB%8B%A5%EA%B3%B5%EC%82%AC/","title":"바닥공사","section":"8. DP","content":"\r바닥공사\r#\r세로 x 가로가 2 x N인 바닥에 1x2 2x1 2x2 인 타일을 덮는 경우의 수 구하기\nINPUT\r#\r가로길이 N 1 \u0026lt;= N \u0026lt;= 1,000 OUTPUT\r#\r바닥을 채우는 방법의 수를 796,796으로 나눈 나머지 구하기 My Solution\r#\r세로가 무조건 2니까 2x2 공간을 덮는 경우의 수는 3가지 하지만 무조건 2칸으로 다 나눌 수는 없다! 개미전사 문제처럼 앞에서부터 한칸씩 풀면 될까? 가로가 N일때 경우의 수는 (N-1일 때 방법의 수) + (N-2일 때 방법의 수)*2 def solution(N): arr = [0]*N arr[0] = 1 arr[1] = 3 for i in range(2, N): arr[i] = (arr[i-1] + 2*arr[i-2]) % 796796 return arr[-1] # INPUT \u0026amp; OUTPUT N = int(input()) print(solution(N)) "},{"id":31,"href":"/docs/mystudy/algorithm-note/part2/8_%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8%ED%99%94%ED%8F%90%EA%B5%AC%EC%84%B1/","title":"효율적인화폐구성","section":"8. DP","content":"\r효율적인 화폐 구성\r#\rN가지 종류의 화폐로 최소한의 갯수를 사용해서 M원 만들기.\nINPUT\r#\r화폐의 종류 수 N 1 \u0026lt;= N \u0026lt;= 100 만들려는 목표 금액 M 1 \u0026lt;= M \u0026lt;= 10,000 OUTPUT\r#\rM원을 만들기 위한 최소한의 화폐 개수 불가능할 때는 -1 My Solution\r#\rdef solution(M, coins): d = [0] + [-1]*10000 for i in range(1, M+1): dmin = 10001 for c in coins: if i-c \u0026gt;= 0 and d[i-c] \u0026gt;= 0: dmin = min(dmin, d[i-c]) dmin = dmin + 1 if dmin!=10001 else -1 d[i] = dmin return d[M] # INPUT N, M = map(int, input().split()) coins = [] for _ in range(N): coins.append(int(input())) # OUTPUT print(solution(M, coins)) "},{"id":32,"href":"/docs/mystudy/algorithm-note/part2/9_%EC%B5%9C%EB%8B%A8%EA%B2%BD%EB%A1%9C/readme/","title":"Readme","section":"9. 최단경로","content":"\r최단 경로\r#\r가장 짧은 경로를 찾는 알고리즘, \u0026ldquo;길찾기\u0026rdquo; 문제라고도 불림. 최단 경로 알고리즘 유형에도 다양한 종류가 있음. 예를 들어 \u0026lsquo;한 지점에서 다른 특정 지점까지의 최단 경로 구하기\u0026rsquo; 또는 \u0026lsquo;모든 지점에서 다른 모든 지점까지의 최단 경로 구하기\u0026rsquo; 등.. 최단 경로 문제는 보통 그래프를 이용해 표현하며, 그래프는 \u0026ldquo;노드\u0026quot;와 \u0026ldquo;간선\u0026quot;으로 구성된다. 최단 거리 알고리즘\r#\r다익스트라 최단 경로 플로이드 워셜 벨만 포드 알고리즘 (최단 거리 알고리즘은 그리디, 다이나믹 프로그래밍 알고리즘의 한 유형이다.)\n다익스트라 최단 경로\r#\r특정한 노드에서 출발하여 다른 노드로 가는 각각의 최단 경로를 구해주는 알고리즘 \u0026lsquo;음의 간선\u0026rsquo;이 없을 때 정상적으로 동작됨\n(\u0026lsquo;음의 간선\u0026rsquo;: 0보다 작은 값을 가지는 간선) 현실세계의 길은 음의 간선으로 표현되지 않기 때문에 실제로 GPS 소프트웨어 기본 알고리즘으로 채택됨 그리디 알고리즘으로 분류 다익스트라 최단 경로의 순서\r#\r출발 노드 설정 최단 거리 테이블 초기화 방문하지 않은 노드 중 최단거리가 가장 짧은 노드 선택 해당 노드를 거쳐 다른 노드로 가는 비용을 계산하여 최단 거리 테이블 갱신 3,4번을 반복 다익스트라 최단 경로의 특징\r#\r최단 경로를 구하는 과정에서 \u0026lsquo;각 노드에 대한 현재까지의 최단 거리\u0026rsquo; 정보를 항상 1차원 리스트에 저장하며 리스트를 계속 갱신 매번 현재 처리하고 있는 노드를 기준으로 주변 간선 확인 데이크스트라와 같은 알고리즘 방문하지 않은 노드 중에서 가장 최단 거리가 짧은 노드를 선택하는 과정을 반복 위 과정에서 선택된 노드는 \u0026lsquo;최단거리\u0026rsquo;가 완전히 선택된 노드이므로, 더 이상 알고리즘을 반복해도 최단 거리가 줄어들지 않는다. (\u0026raquo;정말?) \u0026gt;\u0026gt;한 단계당 하나의 노드에 대한 최단 거리를 확실히 찾는 것으로 이해할 수 있음. \u0026gt; 그렇기 때문에 사실 마지막 노드에 대해서는 해당 노드를 거쳐 다른 노드로 가는 경우를 확인할 필요가 없다. 다익스트라 소스코드\nINF = int(1e9) def Dijkstra(g, N, start): distance = [0] + [INF] * (N-1) not_visited = {i for i in range(N)} while not_visited: # 최단거리가 가장 짧은 노드 선택 v = -1 mind = INF for nv in not_visited: if distance[nv] \u0026lt; mind: v = nv mind = distance[nv] not_visited.remove(v) # 최단거리 테이블 갱신 for i,d in enumerate(g[v]): if (d != -1) and (mind + d \u0026lt; distance[i]): distance[i] = mind + d return distance # TEST N = 6 g = [ [0, 2, 5, 1, -1, -1], [-1, 0, 3, 2, -1, -1], [-1, 3, 0, -1, -1, 5], [-1, -1, 3, 0, 1, -1], [-1, -1, 1, -1, 0, 2], [-1, -1, -1, -1, -1, 0] ] print(Dijkstra(g, N, 1)) "},{"id":33,"href":"/docs/mystudy/algorithm-note/part3/11_greedy/%EA%B3%B1%ED%95%98%EA%B8%B0-%ED%98%B9%EC%9D%80-%EB%8D%94%ED%95%98%EA%B8%B0/","title":"곱하기 혹은 더하기","section":"그리디 알고리즘","content":"\r곱하기 혹은 더하기\r#\rInput\r#\rS : 첫째 줄에 주어지는 여러 개의 숫자로 구성된 문자열 (1 \u0026lt;= S의 길이 \u0026lt;= 20) Output\r#\r만들어질 수 있는 가장 큰 수 Rule\r#\r왼쪽부터 오른쪽으로 하나씩 모든 숫자 사이에 \u0026ldquo;x\u0026rdquo; 혹은 \u0026ldquo;+\u0026rdquo; 연산자를 넣어 만들어질 수 있는 가장 큰 수 구하기 연산 순서는 \u0026ldquo;x\u0026rdquo;, \u0026ldquo;+\u0026rdquo; 상관 없이 무조건 왼쪽부터 순서대로 Example\r#\r입력 출력 02984 576 567 210 My Solution\r#\rdef solution(S): S = list(S) res = int(S.pop(0)) for n in S: res = max(res+int(n), res*int(n)) return res S = input() print(solution(S)) Answer\r#\rdata = input() # 첫 번째 문자를 숫자로 변경하여 대입 result = int(data[0]) for i in range(1, len(data)): # 두 수 중에서 하나라도 \u0026#39;0\u0026#39; 혹은 \u0026#39;1\u0026#39;인 경우, 곱하기보다는 더하기 수행 num = int(data[i]) if num \u0026lt;= 1 or result \u0026lt;= 1: result += num else: result *= num print(result) "},{"id":34,"href":"/docs/mystudy/algorithm-note/part3/11_greedy/%EB%A7%8C%EB%93%A4%EC%88%98%EC%97%86%EB%8A%94%EA%B8%88%EC%95%A1/","title":"만들수없는금액","section":"그리디 알고리즘","content":"\r만들 수 없는 금액\r#\rInput\r#\r첫째 줄: 에 입력되는 동전의 개수 N (1 \u0026lt;= N \u0026lt;= 1,000) 둘째 줄: 각 동전의 화폐 단위를 나타나는 N개의 자연수, Output\r#\r첫째 줄에 주어진 동전들로 만들 수 없는 양의 정수 금액 중 최솟값 Rule\r#\rN개의 동전을 이용하여 만들 수 없는 양의 정수 금액 중 최솟값을 구하는 프로그램 작성 Example\r#\r입력 출력 5 3 2 1 1 9 8 My Solution\r#\rimport heapq def solution(coins): coins.sort(reverse = True) sums = set() n = 1 while True: if n in sums: n += 1 continue elif not coins or (coins[-1] \u0026gt; n): return n else: c = coins.pop() sums = sums.union({s+c for s in sums}) sums.add(c) _ = input() coins = list(map(int, coins.split())) print(solution(coins)) Answer\r#\rn = int(input()) data = list(map(int, input().split())) data.sort() target = 1 for x in data: if target \u0026lt; x: break target += x print(target) data에서 $x_i$까지 탐색했을 때, $T$원 까지 만들 수 있었다고 하자. 다음 $x_{i+1}$을 볼 때, $x_{i+1} \\leq T \\Rightarrow T+1$ ~ $T+x_{i+1}$원까지도 모두 만들 수 있음. $x_{i+1} \u0026gt; T \\Rightarrow T+1$원을 만들 수 없음. "},{"id":35,"href":"/docs/mystudy/algorithm-note/part3/11_greedy/%EB%AA%A8%ED%97%98%EA%B0%80%EA%B8%B8%EB%93%9C/","title":"모험가길드","section":"그리디 알고리즘","content":"\r모험가 길드\r#\rInput\r#\rN : 첫째 줄에 주어지는 모험가의 수 1 \u0026lt;= N \u0026lt;= 100,000 각 모험가의 공포도 : 둘째 줄에 주어지는 N이하의 자연수 값들, 공백으로 구분됨 Output\r#\r여행을 떠날 수 있는 그룹 수의 최대값 Rule\r#\r공포도가 X인 모험가는 반드시 X명 이상으로 구성한 모험가 그룹에 참여해야 여행을 떠날 수 있음 최대로 만들 수 있는 모험감의 그룹? Example\r#\r입력 출력 5 2 3 1 2 2 2 "},{"id":36,"href":"/docs/mystudy/algorithm-note/part3/11_greedy/%EB%B3%BC%EB%A7%81%EA%B3%B5%EA%B3%A0%EB%A5%B4%EA%B8%B0/","title":"볼링공고르기","section":"그리디 알고리즘","content":"\r볼링공 고르기\r#\rInput\r#\r첫째줄 N, M : 볼링공의 갯수 N, 공의 최대 무게 M 둘째줄 각 볼링공의 무게 K : 순서대로 자연수 1 \u0026lt;= N \u0026lt;= 1,000, 1 \u0026lt;= M \u0026lt;=10 1 \u0026lt;= K \u0026lt;= M Output\r#\r두 사람이 볼링공을 고르는 경우의 수 출력 Rule\r#\r두 사람이 서로 다른 무게의 볼링공을 고르도록 한다. Example\r#\r입력 출력 5 3 1 3 2 3 2 8 8 5 1 5 4 3 2 4 5 2 25 My Solution\r#\rfrom collections import Counter def solution(N, data): cnt = Counter(data) res = N * (N-1) for k,v in cnt.items(): if v \u0026gt; 1: res -= (v*(v-1)) return res//2 N, M = map(int, input().split()) data = list(map(int, input().split())) print(N, data) Answer\r#\rn, m = map(int, input().split()) data = list(map(int, input().split())) # 1부터 10까지의 무게를 담을 수 있는 리스트 array = [0] * 11 for x in data: # 각 무게에 해당하는 볼링공의 개수 카운트 array[x] += 1 result = 0 # 1부터 m까지의 각 무게에 대하여 처리 for i in range(1, m + 1): n -= array[i] # 무게가 i인 볼링공의 개수(A가 선택할 수 있는 개수) 제외 result += array[i] * n # B가 선택하는 경우의 수와 곱해주기 print(result) "},{"id":37,"href":"/docs/mystudy/command/3rd-level/4th-level/","title":"4th Level","section":"3rd Level","content":"\r4th Level of Menu\r#\rCaesorum illa tu sentit micat vestes papyriferi\r#\rInde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"},{"id":38,"href":"/docs/mystudy/command/3rd-level/","title":"3rd Level","section":"Command","content":"\r3rd Level of Menu\r#\rNefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral),\rnorthbridge_services_troubleshooting, personal(\rfirmware_rw.trash_rw_crm.device(interactive_gopher_personal,\rsoftware, -1), megabit, ergonomicsSoftware(cmyk_usb_panel,\rmips_whitelist_duplex, cpa)));\rif (5) {\rmanagementNetwork += dma - boolean;\rkilohertz_token = 2;\rhoneypot_affiliate_ergonomics = fiber;\r}\rmouseNorthbridge = byte(nybble_xmp_modem.horse_subnet(\ranalogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet),\rgateway_ospf), repository.domain_key.mouse(serverData(fileNetwork,\rtrim_duplex_file), cellTapeDirect, token_tooltip_mashup(\rripcordingMashup)));\rmodule_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) +\rcoreLog.joystick(componentUdpLink), windows_expansion_touchscreen);\rbashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling(\rciscNavigationBacklink, table + cleanDriver), indexProtocolIsp);\r"},{"id":39,"href":"/docs/mystudy/hidden/","title":"Hidden","section":"My Study","content":"\rThis page is hidden in menu\r#\rQuondam non pater est dignior ille Eurotas\r#\rLatent te facies\r#\rLorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\nPater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor Cum honorum Latona\r#\rO fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer),\rpad.property_data_programming.sectorBrowserPpga(dataMask, 37,\rrecycleRup));\rintellectualVaporwareUser += -5 * 4;\rtraceroute_key_upnp /= lag_optical(android.smb(thyristorTftp));\rsurge_host_golden = mca_compact_device(dual_dpi_opengl, 33,\rcommerce_add_ppc);\rif (lun_ipv) {\rverticalExtranet(1, thumbnail_ttl, 3);\rbar_graphics_jpeg(chipset - sector_xmp_beta);\r}\rFronde cetera dextrae sequens pennis voce muneris\r#\rActa cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software;\rif (internic \u0026gt; disk) {\remoticonLockCron += 37 + bps - 4;\rwan_ansi_honeypot.cardGigaflops = artificialStorageCgi;\rsimplex -= downloadAccess;\r}\rvar volumeHardeningAndroid = pixel + tftp + onProcessorUnmount;\rsector(memory(firewire + interlaced, wired)); "},{"id":40,"href":"/docs/shortcodes/buttons/","title":"Buttons","section":"Shortcodes","content":"\rButtons\r#\rButtons are styled links that can lead to local page or external link.\nExample\r#\r{{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}} Get Home\rContribute\r"},{"id":41,"href":"/docs/shortcodes/columns/","title":"Columns","section":"Shortcodes","content":"\rColumns\r#\rColumns help organize shorter pieces of content horizontally for readability.\n{{\u0026lt; columns \u0026gt;}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Mid Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Right Content Lorem markdownum insigne... {{\u0026lt; /columns \u0026gt;}} Example\r#\rLeft Content\r#\rLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\rMid Content\r#\rLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!\rRight Content\r#\rLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\r"},{"id":42,"href":"/docs/shortcodes/details/","title":"Details","section":"Shortcodes","content":"\rDetails\r#\rDetails shortcode is a helper for details html5 element. It is going to replace expand shortcode.\nExample\r#\r{{\u0026lt; details \u0026#34;Title\u0026#34; [open] \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} {{\u0026lt; details title=\u0026#34;Title\u0026#34; open=true \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} Title\rMarkdown content\r#\rLorem markdownum insigne\u0026hellip;\r"},{"id":43,"href":"/docs/shortcodes/expand/","title":"Expand","section":"Shortcodes","content":"\rExpand\r#\rExpand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.\nExample\r#\rDefault\r#\r{{\u0026lt; expand \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}} Expand\r↕\rMarkdown content\r#\rLorem markdownum insigne\u0026hellip;\rWith Custom Label\r#\r{{\u0026lt; expand \u0026#34;Custom Label\u0026#34; \u0026#34;...\u0026#34; \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}} Custom Label\r...\rMarkdown content\r#\rLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\r"},{"id":44,"href":"/docs/shortcodes/hints/","title":"Hints","section":"Shortcodes","content":"\rHints\r#\rHint shortcode can be used as hint/alerts/notification block.\nThere are 3 colors to choose: info, warning and danger.\n{{\u0026lt; hint [info|warning|danger] \u0026gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{\u0026lt; /hint \u0026gt;}} Example\r#\rMarkdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\rMarkdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\rMarkdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\r"},{"id":45,"href":"/docs/shortcodes/katex/","title":"Katex","section":"Shortcodes","content":"\rKaTeX\r#\rKaTeX shortcode let you render math typesetting in markdown document. See KaTeX\nExample\r#\r{{\u0026lt;/* katex [display] [class=\u0026#34;text-center\u0026#34;] */\u0026gt;}} f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi {{\u0026lt;/* /katex */\u0026gt;}} Display Mode Example\r#\rHere is some inline example: \\(\\pi(x)\\)\r, rendered in the same line. And below is display example, having display: block \\[\rf(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\r\\]\rText continues here.\n"},{"id":46,"href":"/docs/shortcodes/mermaid/","title":"Mermaid","section":"Shortcodes","content":"\rMermaid Chart\r#\rMermaidJS is library for generating svg charts and diagrams from text.\nOverride Mermaid Initialization Config\nTo override the initialization config for Mermaid, create a mermaid.json file in your assets folder!\nExample\r#\r{{\u0026lt;/* mermaid [class=\u0026#34;text-center\u0026#34;]*/\u0026gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u0026gt; State2 note left of State2 : This is the note to the left. {{\u0026lt;/* /mermaid */\u0026gt;}} "},{"id":47,"href":"/docs/shortcodes/section/","title":"Section","section":"Shortcodes","content":"\rSection\r#\rSection renders pages in section as definition list, using title and description. Optional param summary can be used to show or hide page summary\nExample\r#\r{{\u0026lt; section [summary] \u0026gt;}} First Page\rFirst page\r#\rLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\rSecond Page\rSecond Page\r#\rLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r"},{"id":48,"href":"/docs/shortcodes/section/first-page/","title":"First Page","section":"Section","content":"\rFirst page\r#\rLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"id":49,"href":"/docs/shortcodes/section/second-page/","title":"Second Page","section":"Section","content":"\rSecond Page\r#\rLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"id":50,"href":"/docs/shortcodes/tabs/","title":"Tabs","section":"Shortcodes","content":"\rTabs\r#\rTabs let you organize content by context, for example installation instructions for each supported platform.\n{{\u0026lt; tabs \u0026#34;uniqueid\u0026#34; \u0026gt;}} {{\u0026lt; tab \u0026#34;MacOS\u0026#34; \u0026gt;}} # MacOS Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Linux\u0026#34; \u0026gt;}} # Linux Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Windows\u0026#34; \u0026gt;}} # Windows Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; /tabs \u0026gt;}} Example\r#\rMacOS\rMacOS\r#\rThis is tab MacOS content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nLinux\rLinux\r#\rThis is tab Linux content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nWindows\rWindows\r#\rThis is tab Windows content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n"},{"id":51,"href":"/docs/mystudy/algorithm-note/part2/3_%EA%B7%B8%EB%A6%AC%EB%94%94/","title":"3. 그리디 알고리즘","section":"Part 2","content":"\rGreedy\r#\r단순하지만 강력한 문제 해결 방법 현재 상황에서 지금 당장 좋은 것만 고르는 방법 현재의 선택이 나중에 미칠 영향에 대해서는 고려하지 않음 다익스트라 알고리즘은 엄밀히 말하면 Greedy 알고리즘 보통 코딩테스트에서 출제되는 Greedy 알고리즘 유형의 문제는 창의력, 문제를 풀기 위한 최소한의 아이디어를 떠올릴 수 있는 능력을 요구 Greedy 알고리즘의 정당성\r#\rgreedy 알고리즘을 모든 문제에 적용할 수 있는 것은 아니다. Greedy로 정확한 답을 찾을 수 있다는 보장이 있을 때는 매우 효과적이고 직관적\n(greedy로 정확한 답이 도출된다는 증명을 머릿속으로 빠르게 할 수 있어야 함) 거스름돈 문제를 그리디 알고리즘으로 해결할 수 있는 이유:\n큰 단위의 동전이 항상 작은 단위 동전의 배수이므로 작은 단위의 동전들을 종합해 더 좋은 해가 나올 수 없기 때문이다. 대부분의 그리디 알고리즘 문제에서는 이처럼 문제 풀이를 위한 최소한의 아이디어를 떠올리고, 이것이 정당한지 검토할 수 있어야 답을 도출할 수 있다. 문제\r#\r큰 수의 법칙 숫자 카드 게임 1이 될 때까지 Reference\r#\r책 : 이것이 취업을 위한 코딩테스트다 with 파이썬 "},{"id":52,"href":"/docs/mystudy/algorithm-note/part2/4_%EA%B5%AC%ED%98%84/","title":"4. 구현","section":"Part 2","content":"\rImplementation\r#\r구현? 머릿속에 있는 알고리즘을 소스코드로 바꾸는 과정 어떤 문제를 풀든 소스코드를 작성하는 과정은 필수이기 때문에 구현 문제는 모든 범위의 문제 유형을 포함한다. 취업 코딩테스트에서는 자주 출제됨 문제에 대한 정확한 풀이 방법이 떠오르면, 프로그래밍 언어로 정확히 구현해내야 함.\n프로그래밍 언어의 문법을 정확히 알고 있어야 하며, 문제의 요구사항에 어긋나지 않는 답안 코드를 작성해야함 구현 유형 문제 : 풀이를 떠올리는 것은 쉽지만, 소스코드로 옮기기 어려운 문제 흔히 개발할 때 프로그래밍 언어의 문법에 능숙하고 코드 작성속도가 빠른 사람을 보고 \u0026ldquo;피지컬이 좋다\u0026quot;고 한다. 그런 의미에서 구현 유형의 문제는 \u0026ldquo;피지컬을 요구하는\u0026rdquo; 문제라고도 할 수 있다. 대체로 사소한 조건 설정이 많은 문제일수록 코드로 구현하기 까다로움 문법을 정확하게 숙지하지 못했거나, 라이브러리 사용 경험이 부족하면 구현 유형에 불리 \u0026lsquo;구현\u0026rsquo; 유형으로 풀 수 있는 문제 완전탐색 : 모든 경우의 수를 주저 없이 다 계산하는 해결 방법 시뮬레이션 : 문제에서 제시한 알고리즘을 한 단계씩 차례대로 직접 수행하는 방법 C/C++/JAVA 보다 파이썬에서 상대적으로 쉽게 해결할 수 있다. 구현 시 고려해야 할 메모리 제약 사항\r#\rC/C++/JAVA 정수형 표현 범위\r#\r정수형 종류 자료형의 크기 자료형의 범위 int 4bytes -2,147,483,648~2,147,438,647 long 8bytes -9,223,372,036,854,775,808~9,223,372,036,854,775,807 BigInterger (클래스) 가변적 제한 없음 대체로 long 에서 다룰 수 있는 수보다 더 큰 정수를 처리하는 문제는 잘 출제되지 않는다. python에서는 직접 자료형을 지정할 필요가 없고, 매우 큰 수의 연산을 기본으로 지원 python에서 실수형 변수는 유효숫자에 따라서 연산 결과가 원하는 값이 나오지 않을 수 있다 (???) Python에서 리스트 크기에 따른 메모리 사용량\r#\r리스트의 길이 (int 자료형일때) 메모리 사용량 1,000 약 4KB 1,000,000 약 4MB 10,000,000 약 40MB 대체로 코딩테스트에서는 128~512MB로 메모리 제한 리스트 중 크기가 1,000만 이상인 리스트가 있다면 메모리 용량 제한으로 문제를 풀 수 없을 수도 있다. (드뭄) 채점환경\r#\r일반적으로 시간제한 및 메모리 제한 정보가 적혀있음. python3.7 기준으로 1초에 2,000만번의 연산을 수행한다고 가정하면 큰 무리 없음 시간제한이 1초이고, 데이터 개수가 100만개인 문제가 있다면 시간 복잡도 $O(Nlog_2 N)$ 내에 풀어야 한다. ($log_2 1,000,000$) 시간 제한과 데이터의 개수를 먼저 확인하고, 어느 정도의 시간복잡도 알고리즘을 작성해야할지 예측할 수 있어야 한다. 문제\r#\r상하좌우 게임개발 시각 왕실의나이트 "},{"id":53,"href":"/docs/mystudy/algorithm-note/part2/5_dfs_bfs/","title":"5. DFS \u0026 BFS","section":"Part 2","content":"자료구조 기초\nDFS\r#\rDepth-First Search, 깊이 우선 탐색 그래프에서 깊은 부분을 우선적으로 탐색하는 알고리즘 특정한 경로로 탐색하다가 특정한 상황에서 최대한 깊숙이 들어가서 노드를 방문한 후, 다시 돌아가 다른 경로로 탐색하는 알고리즘 DFS는 스택 자료구조를 이용하며 구체적인 동작 과정은 다음과 같다 탐색 시작 노드를 스택에 삽입하고, 방문 처리한다. 스택의 최상단 노드에 방문하지 않은 인접 노드가 있으면 그 인접 노드를 스택에 넣고, 방문 처리를 한다. 방문하지 않은 인접 노드가 없으면 스택에서 최상단 노드를 꺼낸다. 2번의 과정을 더 이상 수행할 수 없을 때까지 반복한다. 방문 처리 : 스택에 한 번 삽입되어 처리된 노드가 다시 삽입되지 않게 체크하는 것. 방문처리를 함으로써 각 노드를 한 번씩만 처리한다. 스택 자료구조에 기초해 구현이 간단함. 실제로는 스택을 쓰지 않아도 됨. N개의 데이터가 있을 때, $O(N)$의 시간이 소요됨 재귀함수를 이용했을 때 매우 간결하게 구현할 수 있음. dfs 구현 (재귀함수)\ndef dfs(graph, v, visited): visited[v] = True print(v, end=\u0026#39; \u0026#39;) for i in graph[v]: if not visited[i]: dfs(graph, i, visited) graph = [ [], [2, 3, 8], [1, 7], [1, 4, 5], [3, 5], [3, 4], [7], [2, 6, 8], [1, 7] ] visited = [False] * 9 dfs(graph, 1, visited) BFS\r#\rBreadth First Search, 너비 우선 탐색 DFS가 최대한 멀리 있는 노드를 우선으로 탐색하는 방식이었다면, BFS는 가까운 노드부터 탐색하는 알고리즘 BFS는 큐 자료구조를 이용해서 구현하는 것이 정석 인접한 노드를 반복적으로 큐에 넣도록 알고리즘을 작성하면 자연스럽게 먼저 들어온 것이 먼저 나가게 되어 가까운 노드부터 탐색하게 됨 동작 방식 탐색 시작 노드를 큐에 삽입 후, 방문 처리 큐에서 노드를 꺼내 해당 노드의 인접 노드 중 방문하지 않은 노드를 큐에 삽입하고, 방문 처리 2번의 과정을 더 이상 수행할 수 없을 때까지 반복 큐 자료구조에 기초한다는 점에서 구현이 간단, deque 라이브러리를 사용하는 것이 좋음 N개의 데이터에 대해, $O(N)$의 시간이 소요됨. 일반적인 경우 실제 수행시간은 DFS보다 좋은 편이다. 왜냐하면, DFS를 재귀함수로 구현하면서 컴퓨터 시스템의 동작 특성상 실제 프로그램 수행시간은 느려진다. 스택 라이브러리를 이용해 시간 복잡도를 완화하는 테크닉이 필요하기도 하다. BFS 구현\nfrom collections import deque def bfs(graph, start, visited): queue = deque([start]) visited[start] = True while queue: v = queue.popleft() for i in graph[v]: print(v, end=\u0026#39; \u0026#39;) if not visited[i]: queue.append(i) visited[i] = True graph = [ [], [2, 3, 8], [1, 7], [1, 4, 5], [3, 5], [3, 4], [7], [2, 6, 8], [1, 7] ] visited = [False] * 9 bfs(graph, 1, visited) DFS BFS 동작 원리 스택 큐 구현 방법 재귀 함수 큐 자료구조 문제\r#\r미로탈출 음료수 얼려 먹기 "},{"id":54,"href":"/docs/mystudy/algorithm-note/part2/6_%EC%A0%95%EB%A0%AC/","title":"6. 정렬","section":"Part 2","content":"\r정렬\r#\r데이터를 특정한 기준에 따라 나열하는 것 프로그램 작성할 때 가장 많이 사용되는 알고리즘 이진탐색의 전처리 과정이기도 함 알고리즘의 효율성을 쉽게 이해할 수 있음 일반적으로 문제에서 요구하는 조건에 따라 적절한 정렬 알고리즘이 공식처럼 사용된다. 정렬 알고리즘의 종류\r#\r선택 정렬 삽입 정렬 퀵 정렬 계수 정렬 파이썬의 기본 정렬 라이브러리로 더 효과적인 정렬 하기\r#\r정렬 알고리즘은 이 밖에도 매우 다양한 종류가 있음. 정렬 알고리즘을 직접 작성하게 되는 경우도 있지만, 미리 만들어진 라이브러리를 이용하는 것이 효과적인 경우가 더 많다. 파이썬의 기본 정렬 라이브러리인 sorted()는 퀵 정렬과 동작 방식이 비슷한 병합 정렬을 기반으로 만들어졌다. 병합 정렬은 일반적으로는 퀵 정렬보다 느리지만 최악의 경우에도 시간복잡도 $O(NlogN)$을 보장한다. 문제\r#\r선택정렬 삽입정렬 퀵정렬 계수정렬 성적이낮은순서로 위에서아래로 "},{"id":55,"href":"/docs/mystudy/algorithm-note/part2/7_%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89/","title":"7. 이진탐색","section":"Part 2","content":"\r이진탐색\r#\r1. 범위를 반씩 좁혀가는 탐색\r#\r순차탐색\r#\rN개의 데이터가 있을 때, 그 데이터를 하나씩 확인하며 어떠한 처리를 해준 것이 순차 탐색 그자체 순차 탐색이란 리스트 안에 있는 특정한 데이터를 찾기 위해 앞에서부터 데이터를 하나씩 차례대로 확인하는 방법 보통 정렬되지 않은 리스트에서 데이터를 찾아야 할 때 사용한다. 순차 탐색은 리스트에 특정 값의 원소가 있는지 체크할 때도 쓰며, 리스트 자료형에서 특정한 원소의 개수를 세는 count() 메서드를 사용할 때도 쓰인다. 순차탐색의 최악의 경우 시간복잡도는 $O(N)$ 이진 탐색\r#\r데이터가 정렬되어 있어야만 사용할 수 있음. 이미 정렬되어 있다면, 매우 빠르게 데이터를 찾을 수 있다는 장점 탐색 범위를 절반씩 좁혀가며 탐색 이진 탐색은 위치를 나타내는 변수 3개를 사용. 탐색하고자 하는 범위의 시작점, 끝점, 중간점. 찾으려는 데이터와 중간점 위치에 있는 데이터를 반복적으로 비교해서 원하는 데이터를 찾는 것. 이진 탐색의 시간 복잡도는 한 번 확인할 때마다 원소의 개수가 절반씩 줄어든다는 점에서 $O(logN)$이다. 이진탐색을 구현하는 2가지 방법. 재귀 함수 이용, 반복문 이용 반복문을 사용한 이진탐색 소스코드\ndef binary_search(arr, target): s, e = 0, len(arr)-1 m = (s+e)//2 while arr[m]!=target: if s \u0026gt; e: return -1 if target \u0026lt; arr[m]: e = m-1 m = (s+e)//2 else: s = m+1 m = (s+e)//2 return m 재귀함수 소스코드\n# SOLUTION def binary_search(arr, target, s, e): if e \u0026lt; s: return -1 m = (s+e)//2 if arr[m] \u0026lt; target: return binary_search(arr, target, m+1, e) elif arr[m] \u0026gt; target: return binary_search(arr, target, s, m-1) else: return arr[m] # TEST N = 10 arr = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19] target = 7 print(binary_search(arr, target, 0, N-1)) 이진탐색을 쓸 수 있는 조건\r#\r단조 증가 함수 / 정렬되어 있을 때 코딩테스트에서 이진탐색\r#\r제대로 이진 탐색 코드를 작성한 프로그래머는 10% 내외라 할 정도로 까다로운 구현 코딩테스트에서 단골로 나오는 문제 이진 탐색의 원리는 다른 알고리즘에서도 폭넓게 적용되는 원리와 유사 높은 난이도의 문제에서는 이진탐색 알고리즘과 다른 알고리즘과 함께 사용되기도 함. 탐색 범위가 큰 상황에서 많이 쓰임. 탐색범위가 2,000만을 넘어가면 이진 탐색으로 접근해보기 처리해야할 데이터의 개수나 값이 1,000만 단위 이상으로 넘어가면 이진 탐색과 같이 $O(logN)$ 의 속도를 내야 하는 알고리즘을 떠올려야 한다. 트리 자료구조\r#\r이진 탐색의 전제 조건은 \u0026ldquo;정렬\u0026rdquo; 데이터베이스는 내부적으로 대용량 데이터 처리에 적합한 트리 자료구조를 이용하여 항상 데이터가 정령되어 있다. 데이터베이스에서는 이진 탐색과는 조금 다르지만, 이진 탐색과 유사한 방법을 이용해 탐색을 항상 빠르게 수행하도록 설계되어 있어 데이터가 많아도 탐색 속도가 빠름 트리 자료구조란? 노드와 노드의 연결로 표현 노드 : 어떤 정보의 단위로서 어떠한 정보를 가지고 있는 개체 트리 자료구조는 그래프 자료구조의 일종으로 데이터베이스 시스템이나 파일 시스템과 같은 곳에서 많은 양의 데이터를 관리하기 위한 목적으로 사용 트리 자료구조의 특징 트리는 부모 노드와 자식 노드의 관계로 표현됨 트리의 최상단 노드를 루트 노드라고 함 트리의 최하단 노드를 단말 노드라고 함 트리에서 일부를 떼어내도 트리 구조이며, 이를 서브 트리라 함 트리는 파일 시스템과 같이 계층적이고 정렬된 데이터를 다루기에 적합 =\u0026gt; 큰 데이터를 처리하는 소프트웨어는 대부분 데이터를 트리 자료구조로 저장해 이진 탐색과 같은 탐색 기법을 이용해 빠르게 탐색한다. 이진 탐색 트리\r#\r트리 자료구조 중에서 가장 간단한 형태 이진 탐색이 동작할 수 있도록 고안된 효율적인 탐색이 가능한 자료구조 모든 트리가 다 이진 탐색 트리는 아니다. 이진 탐색 트리의 특징 부모 노드보다 왼쪽 자식 노드가 작다. 부모 노드보다 오른쪽 자식 노드가 크다. 문제\r#\r떡볶이떡만들기 부품찾기 징검다리건너기 "},{"id":56,"href":"/docs/mystudy/algorithm-note/part2/8_%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/","title":"8. DP","section":"Part 2","content":"\r다이나믹 프로그래밍\r#\r중복되는 연산을 줄이자\r#\r최적의 해를 구하기에 시간이 매우 많이 필요하거나 메모리 공간이 매우 많이 필요한문제는 컴퓨터로도 해결하기 어렵다. 연산 속도와 메모리 공간을 최대한으로 활용할 수 있는 효율적인 알고리즘 작성 필요 메모리 공간을 약간 더 사용하면서 연산 속도를 비약적으로 증가시키는 대표적인 방법 Dynamic Programming 동적 계획법이라고 표현하기도 한다. 다이나믹 프로그래밍으로 해결할 수 있는 대표적인 예시: 피보나치 수열 ** 파이썬의 경우 기본 자료형인 리스트 자료형이 연결 리스트 기능을 포함하고 있음.\n심각한 시간 복잡도를 발생시키는 재귀함수\r#\r재귀함수로 구현한 피보나치 함수\ndef fibo(x): if x==1 or x==2: return 1 return fibo(x-1) + fibo(x-2) 위와 같이 피보나치 수열의 소스코드를 짜면 시간복잡도가 $O(2^N)$ N=30 이면 약 10억 가량의 연산 수행 필요 동일한 함수가 반복적으로 호출되며 불필요한 연산 발생 이러한 문제를 다이나믹 프로그래밍으로 효율적으로 해결 다이나믹 프로그래밍을 사용할 수 있는 조건\r#\r큰 문제를 작은 문제로 나눌 수 있다. 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 동일하다. 메모제이션(Memoization) 기법\r#\r다이나믹 프로그래밍 구현할 수 있는 기법 중 하나 한 번 구한 결과를 메모리 공간에 메모해 두고 다시 호출 메모한 결과를 그대로 가져오는 기법 값을 저장하는 방법이므로 캐싱(Caching)이라고도 함 메모제이션 기법을 사용한 피보나치 수열\nd = [0] * 100 def fibo(x): if x==1 or x==2: return 1 if d[x]!=0: return d[x] d[x] = fibo(x-1) + fibo(x-2) return d[x] 반복문을 사용한 DP\r#\r재귀 함수를 사용하면 함수를 다시 호출했을 때, 메모리 상에 적재되는 일련의 과정을 따라야 하기 때문에 오버헤드가 발생할 수도 있다. 일반적으로 반복문을 이용한 DP가 더 성능이 좋다. DP를 적용했을 때 피보나치 수열 알고리즘의 시간복잡도? $O(N)$ 재귀 함수를 이용한 DP는 **Top-Down 방식(하향식)**이며, 반복문을 이용한 DP는 Bottom-Up 방식(상향식) 결론\r#\r가능하다면 탑다운 보다는 보텀업 방식 권장 재귀함수는 스택의 크기가 한정되어 있을 수도 있기 때문 문제\r#\r1로만들기\n개미전사\n바닥공사\n효율적인 화폐구성\n"},{"id":57,"href":"/docs/mystudy/algorithm-note/part2/9_%EC%B5%9C%EB%8B%A8%EA%B2%BD%EB%A1%9C/","title":"9. 최단경로","section":"Part 2","content":"\r최단 경로\r#\r가장 짧은 경로를 찾는 알고리즘, \u0026ldquo;길찾기\u0026rdquo; 문제라고도 불림. 최단 경로 알고리즘 유형에도 다양한 종류가 있음. 예를 들어 \u0026lsquo;한 지점에서 다른 특정 지점까지의 최단 경로 구하기\u0026rsquo; 또는 \u0026lsquo;모든 지점에서 다른 모든 지점까지의 최단 경로 구하기\u0026rsquo; 등.. 최단 경로 문제는 보통 그래프를 이용해 표현하며, 그래프는 \u0026ldquo;노드\u0026quot;와 \u0026ldquo;간선\u0026quot;으로 구성된다. 최단 거리 알고리즘\r#\r다익스트라 최단 경로 플로이드 워셜 벨만 포드 알고리즘 (최단 거리 알고리즘은 그리디, 다이나믹 프로그래밍 알고리즘의 한 유형이다.)\n다익스트라 최단 경로\r#\r특정한 노드에서 출발하여 다른 노드로 가는 각각의 최단 경로를 구해주는 알고리즘 \u0026lsquo;음의 간선\u0026rsquo;이 없을 때 정상적으로 동작됨\n(\u0026lsquo;음의 간선\u0026rsquo;: 0보다 작은 값을 가지는 간선) 현실세계의 길은 음의 간선으로 표현되지 않기 때문에 실제로 GPS 소프트웨어 기본 알고리즘으로 채택됨 그리디 알고리즘으로 분류 다익스트라 최단 경로의 순서\r#\r출발 노드 설정 최단 거리 테이블 초기화 방문하지 않은 노드 중 최단거리가 가장 짧은 노드 선택 해당 노드를 거쳐 다른 노드로 가는 비용을 계산하여 최단 거리 테이블 갱신 3,4번을 반복 다익스트라 최단 경로의 특징\r#\r최단 경로를 구하는 과정에서 \u0026lsquo;각 노드에 대한 현재까지의 최단 거리\u0026rsquo; 정보를 항상 1차원 리스트에 저장하며 리스트를 계속 갱신 매번 현재 처리하고 있는 노드를 기준으로 주변 간선 확인 데이크스트라와 같은 알고리즘 방문하지 않은 노드 중에서 가장 최단 거리가 짧은 노드를 선택하는 과정을 반복 위 과정에서 선택된 노드는 \u0026lsquo;최단거리\u0026rsquo;가 완전히 선택된 노드이므로, 더 이상 알고리즘을 반복해도 최단 거리가 줄어들지 않는다. (\u0026raquo;정말?) \u0026gt;\u0026gt;한 단계당 하나의 노드에 대한 최단 거리를 확실히 찾는 것으로 이해할 수 있음. \u0026gt; 그렇기 때문에 사실 마지막 노드에 대해서는 해당 노드를 거쳐 다른 노드로 가는 경우를 확인할 필요가 없다. 다익스트라 소스코드\nINF = int(1e9) def Dijkstra(g, N, start): distance = [0] + [INF] * (N-1) not_visited = {i for i in range(N)} while not_visited: # 최단거리가 가장 짧은 노드 선택 v = -1 mind = INF for nv in not_visited: if distance[nv] \u0026lt; mind: v = nv mind = distance[nv] not_visited.remove(v) # 최단거리 테이블 갱신 for i,d in enumerate(g[v]): if (d != -1) and (mind + d \u0026lt; distance[i]): distance[i] = mind + d return distance # TEST N = 6 g = [ [0, 2, 5, 1, -1, -1], [-1, 0, 3, 2, -1, -1], [-1, 3, 0, -1, -1, 5], [-1, -1, 3, 0, 1, -1], [-1, -1, 1, -1, 0, 2], [-1, -1, -1, -1, -1, 0] ] print(Dijkstra(g, N, 1)) "}]