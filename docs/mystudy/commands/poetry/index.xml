<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>이세상의 모든 노트</title><link>https://yera10.github.io/docs/mystudy/commands/poetry/</link><description>Recent content on 이세상의 모든 노트</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://yera10.github.io/docs/mystudy/commands/poetry/index.xml" rel="self" type="application/rss+xml"/><item><title>Poetry 시작하기</title><link>https://yera10.github.io/docs/mystudy/commands/poetry/poetry_start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/commands/poetry/poetry_start/</guid><description>poetry 설치 (Windows) # pip으로 설치
pip install --user poetry powershell에서 아래 명령어로 설치
(Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | py - poetry 환경변수 등록 # windows
C:\Users\SEJONG\AppData\Roaming\Python\Scripts\ 또는 C:\Users\SEJONG\AppData\Roaming\Python\Python311\Scripts\ 또는 C:\Users\SEJONG\AppData\Roaming\pypoetry\venv\Scripts\ 에 poetry 가 있는지 확인 poetry가 있는 주소를 환경변수에 등록 poetry 시작 # poetry init 각 입력사항에 맞게 입력하면, pyproject.toml 생성됨
poetry config # # poetry 설정값 확인 poetry config --list # 프로젝트 폴더 내에 가상환경을 저장 poetry config virtualenvs.</description></item><item><title>가상환경 관련</title><link>https://yera10.github.io/docs/mystudy/commands/poetry/virtual_env/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/commands/poetry/virtual_env/</guid><description> 가상환경 비활성화 # deactivate exit poetry 가상환경 확인 # poetry env list 프로젝트 폴더 내에 가상환경을 저장 # poetry config virtualenvs.in-project true 가상환경 모두 삭제 # poetry env remove --all poetry 로 가상환경(virtualenv)을 관리 # poetry env use {파이썬경로}</description></item><item><title>내보내기 (requirements.txt)</title><link>https://yera10.github.io/docs/mystudy/commands/poetry/export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/commands/poetry/export/</guid><description> poetry 환경 requirements.txt로 내보내기 # # 기본 활용 방식 poetry export -f requirements.txt --output requirements.txt # 해시 정보 없이 export 하기 poetry export -f requirements.txt --output requirements.txt --without-hashes</description></item><item><title>의존성 관련</title><link>https://yera10.github.io/docs/mystudy/commands/poetry/dependency/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/commands/poetry/dependency/</guid><description>poetry 그룹에 의존성 추가 # poetry add {패키지} --group {그룹명} poetry 버전 지정하여 의존성 추가 # poetry add &amp;#34;&amp;lt;패키지&amp;gt;&amp;lt;버전표기&amp;gt;&amp;#34; # 예 poetry add &amp;#34;selenium^4.10.0&amp;#34; # 가장 최신 버전 설치할 때 poetry add {패키지}@latest 버전 표기법 # ^1.2.3 : &amp;gt;=1.2.3 &amp;lt;2.0.0 ^1.2 : &amp;gt;=1.2.0 &amp;lt;2.0.0 ~2.0.5 : &amp;gt;=2.0.5, &amp;lt;2.1.0 &amp;gt;=2.0.5 ==2.0.5 설치된 모든 패키지 확인 # poetry show # 특정패키지를 지정 poetry show {패키지} # 의존성 트리 poetry show --tree 의존성 꼬였을 때 # 가상환경 삭제 poetry env remove --all pyproject.</description></item></channel></rss>