<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>그리디 알고리즘 on 이세상의 모든 노트</title>
    <link>https://yera10.github.io/docs/mystudy/algorithm-note/part3_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9C%A0%ED%98%95%EB%B3%84%EA%B8%B0%EC%B6%9C%EB%AC%B8%EC%A0%9C/11_greedy/</link>
    <description>Recent content in 그리디 알고리즘 on 이세상의 모든 노트</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://yera10.github.io/docs/mystudy/algorithm-note/part3_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9C%A0%ED%98%95%EB%B3%84%EA%B8%B0%EC%B6%9C%EB%AC%B8%EC%A0%9C/11_greedy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://yera10.github.io/docs/mystudy/algorithm-note/part3_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9C%A0%ED%98%95%EB%B3%84%EA%B8%B0%EC%B6%9C%EB%AC%B8%EC%A0%9C/11_greedy/%EA%B3%B1%ED%95%98%EA%B8%B0-%ED%98%B9%EC%9D%80-%EB%8D%94%ED%95%98%EA%B8%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yera10.github.io/docs/mystudy/algorithm-note/part3_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9C%A0%ED%98%95%EB%B3%84%EA%B8%B0%EC%B6%9C%EB%AC%B8%EC%A0%9C/11_greedy/%EA%B3%B1%ED%95%98%EA%B8%B0-%ED%98%B9%EC%9D%80-%EB%8D%94%ED%95%98%EA%B8%B0/</guid>
      <description>곱하기 혹은 더하기#Input#S : 첫째 줄에 주어지는 여러 개의 숫자로 구성된 문자열 (1 &amp;lt;= S의 길이 &amp;lt;= 20) Output#만들어질 수 있는 가장 큰 수 Rule#왼쪽부터 오른쪽으로 하나씩 모든 숫자 사이에 &amp;ldquo;x&amp;rdquo; 혹은 &amp;ldquo;+&amp;rdquo; 연산자를 넣어 만들어질 수 있는 가장 큰 수 구하기 연산 순서는 &amp;ldquo;x&amp;rdquo;, &amp;ldquo;+&amp;rdquo; 상관 없이 무조건 왼쪽부터 순서대로 Example#입력 출력 02984 576 567 210 My Solution#def solution(S): S = list(S) res = int(S.</description>
    </item>
    <item>
      <title></title>
      <link>https://yera10.github.io/docs/mystudy/algorithm-note/part3_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9C%A0%ED%98%95%EB%B3%84%EA%B8%B0%EC%B6%9C%EB%AC%B8%EC%A0%9C/11_greedy/%EB%A7%8C%EB%93%A4%EC%88%98%EC%97%86%EB%8A%94%EA%B8%88%EC%95%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yera10.github.io/docs/mystudy/algorithm-note/part3_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9C%A0%ED%98%95%EB%B3%84%EA%B8%B0%EC%B6%9C%EB%AC%B8%EC%A0%9C/11_greedy/%EB%A7%8C%EB%93%A4%EC%88%98%EC%97%86%EB%8A%94%EA%B8%88%EC%95%A1/</guid>
      <description>만들 수 없는 금액#Input#첫째 줄: 에 입력되는 동전의 개수 N (1 &amp;lt;= N &amp;lt;= 1,000) 둘째 줄: 각 동전의 화폐 단위를 나타나는 N개의 자연수, Output#첫째 줄에 주어진 동전들로 만들 수 없는 양의 정수 금액 중 최솟값 Rule#N개의 동전을 이용하여 만들 수 없는 양의 정수 금액 중 최솟값을 구하는 프로그램 작성 Example#입력 출력 5 3 2 1 1 9 8 My Solution#import heapq def solution(coins): coins.</description>
    </item>
    <item>
      <title></title>
      <link>https://yera10.github.io/docs/mystudy/algorithm-note/part3_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9C%A0%ED%98%95%EB%B3%84%EA%B8%B0%EC%B6%9C%EB%AC%B8%EC%A0%9C/11_greedy/%EB%AA%A8%ED%97%98%EA%B0%80%EA%B8%B8%EB%93%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yera10.github.io/docs/mystudy/algorithm-note/part3_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9C%A0%ED%98%95%EB%B3%84%EA%B8%B0%EC%B6%9C%EB%AC%B8%EC%A0%9C/11_greedy/%EB%AA%A8%ED%97%98%EA%B0%80%EA%B8%B8%EB%93%9C/</guid>
      <description>모험가 길드#Input#N : 첫째 줄에 주어지는 모험가의 수 1 &amp;lt;= N &amp;lt;= 100,000 각 모험가의 공포도 : 둘째 줄에 주어지는 N이하의 자연수 값들, 공백으로 구분됨 Output#여행을 떠날 수 있는 그룹 수의 최대값 Rule#공포도가 X인 모험가는 반드시 X명 이상으로 구성한 모험가 그룹에 참여해야 여행을 떠날 수 있음 최대로 만들 수 있는 모험감의 그룹? Example#입력 출력 5 2 3 1 2 2 2 </description>
    </item>
    <item>
      <title></title>
      <link>https://yera10.github.io/docs/mystudy/algorithm-note/part3_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9C%A0%ED%98%95%EB%B3%84%EA%B8%B0%EC%B6%9C%EB%AC%B8%EC%A0%9C/11_greedy/%EB%B3%BC%EB%A7%81%EA%B3%B5%EA%B3%A0%EB%A5%B4%EA%B8%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yera10.github.io/docs/mystudy/algorithm-note/part3_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9C%A0%ED%98%95%EB%B3%84%EA%B8%B0%EC%B6%9C%EB%AC%B8%EC%A0%9C/11_greedy/%EB%B3%BC%EB%A7%81%EA%B3%B5%EA%B3%A0%EB%A5%B4%EA%B8%B0/</guid>
      <description>볼링공 고르기#Input#첫째줄 N, M : 볼링공의 갯수 N, 공의 최대 무게 M 둘째줄 각 볼링공의 무게 K : 순서대로 자연수 1 &amp;lt;= N &amp;lt;= 1,000, 1 &amp;lt;= M &amp;lt;=10 1 &amp;lt;= K &amp;lt;= M Output#두 사람이 볼링공을 고르는 경우의 수 출력 Rule#두 사람이 서로 다른 무게의 볼링공을 고르도록 한다. Example#입력 출력 5 3 1 3 2 3 2 8 8 5 1 5 4 3 2 4 5 2 25 My Solution#from collections import Counter def solution(N, data): cnt = Counter(data) res = N * (N-1) for k,v in cnt.</description>
    </item>
  </channel>
</rss>
