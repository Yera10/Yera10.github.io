<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>6. 정렬 on 이세상의 모든 노트</title><link>https://yera10.github.io/docs/mystudy/algorithm-note/part2/6_%EC%A0%95%EB%A0%AC/</link><description>Recent content in 6. 정렬 on 이세상의 모든 노트</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://yera10.github.io/docs/mystudy/algorithm-note/part2/6_%EC%A0%95%EB%A0%AC/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://yera10.github.io/docs/mystudy/algorithm-note/part2/6_%EC%A0%95%EB%A0%AC/%EC%84%B1%EC%A0%81%EC%9D%B4%EB%82%AE%EC%9D%80%EC%88%9C%EC%84%9C%EB%A1%9C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part2/6_%EC%A0%95%EB%A0%AC/%EC%84%B1%EC%A0%81%EC%9D%B4%EB%82%AE%EC%9D%80%EC%88%9C%EC%84%9C%EB%A1%9C/</guid><description>&lt;h1 id="성적이-낮은-순서로-학생-출력하기">
 성적이 낮은 순서로 학생 출력하기
 &lt;a class="anchor" href="#%ec%84%b1%ec%a0%81%ec%9d%b4-%eb%82%ae%ec%9d%80-%ec%88%9c%ec%84%9c%eb%a1%9c-%ed%95%99%ec%83%9d-%ec%b6%9c%eb%a0%a5%ed%95%98%ea%b8%b0">#&lt;/a>
&lt;/h1>
&lt;h3 id="input">
 INPUT
 &lt;a class="anchor" href="#input">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>첫번째 줄 - 학생 수 N (1&amp;lt;=N&amp;lt;=100,000)&lt;/li>
&lt;li>학생의 이름 문자열 A, 학생의 성적 B가 공백으로 구분되어 입력&lt;/li>
&lt;li>학생의 성적 B는 100이하의 자연수&lt;/li>
&lt;li>학생의 이름 A는 100 이하의 길이&lt;/li>
&lt;/ul>
&lt;h3 id="output">
 OUTPUT
 &lt;a class="anchor" href="#output">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>모든 학생의 이름을 성적이 낮은 순서대로 출력&lt;/li>
&lt;li>성적이 동일한 학생의 순서는 자유롭게 출력&lt;/li>
&lt;/ul>
&lt;h3 id="my-solution">
 My Solution
 &lt;a class="anchor" href="#my-solution">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># SOLUTION&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">solution&lt;/span>(scores):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sorted_list &lt;span style="color:#f92672">=&lt;/span> [[] &lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">101&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> n, s &lt;span style="color:#f92672">in&lt;/span> scores:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sorted_list[s]&lt;span style="color:#f92672">.&lt;/span>append(n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> names &lt;span style="color:#f92672">in&lt;/span> sorted_list:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> name &lt;span style="color:#f92672">in&lt;/span> names:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(name, end&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># TEST&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>N &lt;span style="color:#f92672">=&lt;/span> int(input())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>scores &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(N):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name, score &lt;span style="color:#f92672">=&lt;/span> input()&lt;span style="color:#f92672">.&lt;/span>split()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scores&lt;span style="color:#f92672">.&lt;/span>append([name, int(score)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>solution(scores)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="solution">
 Solution
 &lt;a class="anchor" href="#solution">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>N &lt;span style="color:#f92672">=&lt;/span> int(input())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>array &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(N):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name, score &lt;span style="color:#f92672">=&lt;/span> input()&lt;span style="color:#f92672">.&lt;/span>split()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> array&lt;span style="color:#f92672">.&lt;/span>append([name, int(score)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>array &lt;span style="color:#f92672">=&lt;/span> sorted(array, key&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">lambda&lt;/span> x:x[&lt;span style="color:#ae81ff">1&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> student &lt;span style="color:#f92672">in&lt;/span> array:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(student[&lt;span style="color:#ae81ff">0&lt;/span>], end&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://yera10.github.io/docs/mystudy/algorithm-note/part2/6_%EC%A0%95%EB%A0%AC/%EC%9C%84%EC%97%90%EC%84%9C%EC%95%84%EB%9E%98%EB%A1%9C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part2/6_%EC%A0%95%EB%A0%AC/%EC%9C%84%EC%97%90%EC%84%9C%EC%95%84%EB%9E%98%EB%A1%9C/</guid><description>&lt;h1 id="위에서-아래로">
 위에서 아래로
 &lt;a class="anchor" href="#%ec%9c%84%ec%97%90%ec%84%9c-%ec%95%84%eb%9e%98%eb%a1%9c">#&lt;/a>
&lt;/h1>
&lt;h3 id="input">
 INPUT
 &lt;a class="anchor" href="#input">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>첫째줄 - 수열에 속해있는 수의 개수 N, (1 &amp;lt;= N &amp;lt;= 500)&lt;/li>
&lt;li>둘째줄부터 N개의 수 입력됨 (범위 1~100,000의 자연수)&lt;/li>
&lt;/ul>
&lt;h3 id="output">
 OUTPUT
 &lt;a class="anchor" href="#output">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>입력으로 주어진 수열이 내림차순으로 정렬된 결과를 공백으로 구분하여 출력&lt;/li>
&lt;/ul>
&lt;h3 id="example">
 Example
 &lt;a class="anchor" href="#example">#&lt;/a>
&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">INPUT&lt;/th>
 &lt;th style="text-align: left">OUTPUT&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">3&lt;!-- raw HTML omitted -->15&lt;!-- raw HTML omitted -->27&lt;!-- raw HTML omitted -->12&lt;/td>
 &lt;td style="text-align: left">27 15 12&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="my-solution">
 My Solution
 &lt;a class="anchor" href="#my-solution">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># SOLUTION&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">solution&lt;/span>(arr):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cnt_list &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">100001&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> v &lt;span style="color:#f92672">in&lt;/span> arr:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cnt_list[v] &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">100000&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(cnt_list[i]):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(i, end&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># TEST&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>N &lt;span style="color:#f92672">=&lt;/span> int(input())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(N):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr&lt;span style="color:#f92672">.&lt;/span>append(int(input()))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>solution(arr)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="solution">
 Solution
 &lt;a class="anchor" href="#solution">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># N 입력받기&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>N &lt;span style="color:#f92672">=&lt;/span> int(input())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># N개의 정수 입력받아 리스트에 저장&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(N):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr&lt;span style="color:#f92672">.&lt;/span>append(int(input()))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 정렬&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr &lt;span style="color:#f92672">=&lt;/span> sorted(arr, reverse&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> arr:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(i, end&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://yera10.github.io/docs/mystudy/algorithm-note/part2/6_%EC%A0%95%EB%A0%AC/%EC%A0%95%EB%A0%AC%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EA%B3%84%EC%88%98%EC%A0%95%EB%A0%AC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part2/6_%EC%A0%95%EB%A0%AC/%EC%A0%95%EB%A0%AC%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EA%B3%84%EC%88%98%EC%A0%95%EB%A0%AC/</guid><description>&lt;h1 id="계수-정렬">
 계수 정렬
 &lt;a class="anchor" href="#%ea%b3%84%ec%88%98-%ec%a0%95%eb%a0%ac">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>특정한 조건이 부합할 때만 사용할 수 있지만, 매우 빠른 정렬 알고리즘&lt;/li>
&lt;li>데이터가 모두 양의 정수이며, 데이터의 개수가 N, 최댓값이 K일 때, 계수 정렬은 최악의 경우에도 수행시간 $O(N+K)$을 보장함&lt;/li>
&lt;li>매우 빠르게 동작하며, 매우 간단한 원리&lt;/li>
&lt;li>데이터의 크기 범위가 제한되어 정수 형태로 표현할 수 있을 때만 사용 가능&lt;/li>
&lt;li>실수형 데이터로 주어질 때 사용하기 어려움&lt;/li>
&lt;li>일반적으로는 가장 큰 데이터와 가장 작은 데이터의 차이가 1,000,000을 넘지 않을 때 효과적&lt;/li>
&lt;li>데이터의 범위가 너무 크면 계수정렬을 사용할 수 없음.&lt;/li>
&lt;li>계수정렬을 이용할 때에는 모든 범위를 담을 수 있는 크기의 리스트(배열)를 선언하기 때문&lt;/li>
&lt;li>계수 정렬은 비교 기반의 정렬 알고리즘이 아니다.&lt;/li>
&lt;/ul>
&lt;p>계수정렬 소스코드&lt;/p></description></item><item><title/><link>https://yera10.github.io/docs/mystudy/algorithm-note/part2/6_%EC%A0%95%EB%A0%AC/%EC%A0%95%EB%A0%AC%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EC%82%BD%EC%9E%85%EC%A0%95%EB%A0%AC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part2/6_%EC%A0%95%EB%A0%AC/%EC%A0%95%EB%A0%AC%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EC%82%BD%EC%9E%85%EC%A0%95%EB%A0%AC/</guid><description>&lt;h1 id="삽입정렬">
 삽입정렬
 &lt;a class="anchor" href="#%ec%82%bd%ec%9e%85%ec%a0%95%eb%a0%ac">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>데이터를 하나씩 확인하며, 각 데이터의 적절한 위치에 삽입하면 어떨까?&lt;/li>
&lt;li>선택정렬에 비해 구현 난이도가 높은 편이지만, 실행 시간 측면에서 더 효율적인 알고리즘&lt;/li>
&lt;li>특히 삽입 정렬은 필요할 때만 위치를 바꾸기 때문에 &amp;ldquo;데이터가 거의 정렬되어 있을 때&amp;rdquo; 효율적&lt;/li>
&lt;li>특정한 데이터를 적절한 위치에 &amp;ldquo;삽입&amp;quot;한다는 의미&lt;/li>
&lt;li>삽입정렬 방법
&lt;ul>
&lt;li>특정한 데이터가 적절한 위치에 들어가기 이전에 그 앞까지의 데이터는 이미 정렬되어 있다고 가정&lt;/li>
&lt;li>정렬되어 있는 리스트에 적절한 위치를 찾은 뒤, 그 위치에 삽입&lt;/li>
&lt;li>특정 데이터가 삽입될 위치를 선정할 때(왼쪽으로 한 칸씩 이동하며 탐색할 때), 삽입될 데이터보다 작은 데이터를 만나면, 그 위치에서 멈춤&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>삽입정렬 소스코드&lt;/p></description></item><item><title/><link>https://yera10.github.io/docs/mystudy/algorithm-note/part2/6_%EC%A0%95%EB%A0%AC/%EC%A0%95%EB%A0%AC%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EC%84%A0%ED%83%9D%EC%A0%95%EB%A0%AC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part2/6_%EC%A0%95%EB%A0%AC/%EC%A0%95%EB%A0%AC%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EC%84%A0%ED%83%9D%EC%A0%95%EB%A0%AC/</guid><description>&lt;h1 id="선택-정렬">
 선택 정렬
 &lt;a class="anchor" href="#%ec%84%a0%ed%83%9d-%ec%a0%95%eb%a0%ac">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>매번 가장 작은 것을 선택한다는 의미의 알고리즘&lt;/li>
&lt;li>가장 작은 데이터를 맨 앞에 있는 데이터와 바꾸고,&lt;br>
그 다음 작은 데이터를 두 번째 데이터와 바꾸고 &amp;hellip; &lt;br>
이런 과정을 반복&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># INPUT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">7&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>, &lt;span style="color:#ae81ff">9&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>, &lt;span style="color:#ae81ff">8&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># SOLUTION&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">select_sorting&lt;/span>(arr):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(len(arr)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> min_i &lt;span style="color:#f92672">=&lt;/span> i
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> j &lt;span style="color:#f92672">in&lt;/span> range(i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, len(arr)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> arr[j] &lt;span style="color:#f92672">&amp;lt;&lt;/span> arr[min_i]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> min_i &lt;span style="color:#f92672">=&lt;/span> j
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr[i], arr[min_i] &lt;span style="color:#f92672">=&lt;/span> arr[min_i], arr[i]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># OUTPUT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>select_sorting(arr)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(arr)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>선택 정렬의 시간복잡도는 $N + (N-1) + \dots + 2$ 로 $O(N^2)$ 이다.&lt;/li>
&lt;li>만약 정렬해야할 개수가 100배 늘어마녀 이론적으로 수행시간은 10,000배 늘어난다.&lt;/li>
&lt;li>선택 정렬은 기본 라이브러리를 포함해 다른 알고리즘과 비교했을 때 매우 비효율적&lt;/li>
&lt;/ul>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: center">데이터의 개수(N)&lt;/th>
 &lt;th style="text-align: center">선택정렬&lt;/th>
 &lt;th style="text-align: center">퀵 정렬&lt;/th>
 &lt;th style="text-align: center">기본 정렬 라이브러리&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: center">N = 100&lt;/td>
 &lt;td style="text-align: center">0.0123s&lt;/td>
 &lt;td style="text-align: center">0.00156s&lt;/td>
 &lt;td style="text-align: center">0.00000753s&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: center">N = 1,000&lt;/td>
 &lt;td style="text-align: center">0.354s&lt;/td>
 &lt;td style="text-align: center">0.00343s&lt;/td>
 &lt;td style="text-align: center">0.0000365&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: center">N = 10,000&lt;/td>
 &lt;td style="text-align: center">15.475s&lt;/td>
 &lt;td style="text-align: center">0.0312&lt;/td>
 &lt;td style="text-align: center">0.00028s&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title/><link>https://yera10.github.io/docs/mystudy/algorithm-note/part2/6_%EC%A0%95%EB%A0%AC/%EC%A0%95%EB%A0%AC%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%80%B5%EC%A0%95%EB%A0%AC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part2/6_%EC%A0%95%EB%A0%AC/%EC%A0%95%EB%A0%AC%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%ED%80%B5%EC%A0%95%EB%A0%AC/</guid><description>&lt;h1 id="퀵-정렬">
 퀵 정렬
 &lt;a class="anchor" href="#%ed%80%b5-%ec%a0%95%eb%a0%ac">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>정렬 알고리즘 중 가장 많이 사용되는 알고리즘&lt;/p>
&lt;/li>
&lt;li>
&lt;p>퀵 정렬과 비교할만큼 빠른 알고리즘으로 &amp;lsquo;병합 정렬&amp;rsquo;이 있음.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>퀵 정렬과 병합 정렬은 대부분의 프로그래밍 언어에서 정렬 라이브러리의 근간이 되는 알고리즘이기도 함.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>기준을 설정한 다음 큰 수와 작은 수를 교환한 후 리스트를 반으로 나누는 방식으로 동작&lt;/p>
&lt;/li>
&lt;li>
&lt;p>퀵 정렬에서는 피벗(Pivot)이 사용된다.&lt;br>
큰 숫자와 작은 숫자를 교환할 때, 교환하기 위한 &amp;lsquo;기준&amp;rsquo;을 피벗이라고 표현&lt;/p>
&lt;/li>
&lt;li>
&lt;p>피벗을 어떻게 설정하고 리스트를 분할하는지에 따라 여러 가지 방식의 퀵 정렬이 있다.&lt;/p></description></item></channel></rss>