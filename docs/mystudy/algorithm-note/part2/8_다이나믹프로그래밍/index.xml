<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>8. DP on 이세상의 모든 노트</title><link>https://yera10.github.io/docs/mystudy/algorithm-note/part2/8_%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/</link><description>Recent content in 8. DP on 이세상의 모든 노트</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://yera10.github.io/docs/mystudy/algorithm-note/part2/8_%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://yera10.github.io/docs/mystudy/algorithm-note/part2/8_%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/1%EB%A1%9C%EB%A7%8C%EB%93%A4%EA%B8%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part2/8_%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/1%EB%A1%9C%EB%A7%8C%EB%93%A4%EA%B8%B0/</guid><description>&lt;h1 id="1로-만들기">
 1로 만들기
 &lt;a class="anchor" href="#1%eb%a1%9c-%eb%a7%8c%eb%93%a4%ea%b8%b0">#&lt;/a>
&lt;/h1>
&lt;p>정수 X에 대해 4가지 연산을 사용해 1을 만들려고 함.
최소한의 연산횟수를 구하기.&lt;/p>
&lt;p>연산&lt;/p>
&lt;ol>
&lt;li>X가 5로 나누어 떨어지면, 5로 나눈다.&lt;/li>
&lt;li>X가 3로 나누어 떨어지면, 3으로 나눈다.&lt;/li>
&lt;li>X가 2로 나누어 떨어지면, 2로 나눈다.&lt;/li>
&lt;li>X에서 1을 뺀다.&lt;/li>
&lt;/ol>
&lt;h3 id="input">
 INPUT
 &lt;a class="anchor" href="#input">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>첫째줄 정수 X&lt;/li>
&lt;li>1 &amp;lt;= X &amp;lt;= 30,000&lt;/li>
&lt;/ul>
&lt;h3 id="output">
 OUTPUT
 &lt;a class="anchor" href="#output">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>최소한의 연산 횟수&lt;/li>
&lt;/ul>
&lt;h3 id="my-solution">
 My Solution
 &lt;a class="anchor" href="#my-solution">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>연산1이 항상 연산2보다 좋다고 할 수 없음.&lt;br>
(연산2가 항상 연산3보다 좋을 수 없으며, 연산3이 항상 연산4보다 좋을 수 없음.) =&amp;gt; greedy 아님&lt;/li>
&lt;li>어느정도 탐색과 모험?이 필요함.&lt;/li>
&lt;li>X가 5로 나누어 떨어진다면, f(X)는 f(X//5)+1이 될 수도 있음. f(X//5) 또한 최소한의 연산횟수일 거기 때문에&lt;/li>
&lt;li>그렇다면, 상향식이 좋을까? 하향식이 좋을까?
&lt;ul>
&lt;li>하향식이 최소한의 연산을 쓸 것 같아서 좋지만, 스택공간이 부족할 것 같기도 함&lt;/li>
&lt;li>상향식이면.. 어떻게 연산할 숫자들을 &amp;hellip;?&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># SOLUTION&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>noprs &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">30001&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">solution&lt;/span>(x):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> x &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">or&lt;/span> noprs[x]&lt;span style="color:#f92672">!=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> noprs[x]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> oprs &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> x&lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> oprs&lt;span style="color:#f92672">.&lt;/span>append(solution(x&lt;span style="color:#f92672">//&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> x&lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> oprs&lt;span style="color:#f92672">.&lt;/span>append(solution(x&lt;span style="color:#f92672">//&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> x &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> oprs&lt;span style="color:#f92672">.&lt;/span>append(solution(x&lt;span style="color:#f92672">//&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> oprs&lt;span style="color:#f92672">.&lt;/span>append(solution(x&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> noprs[x] &lt;span style="color:#f92672">=&lt;/span> min(oprs)&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> noprs[x]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># INPUT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>X &lt;span style="color:#f92672">=&lt;/span> int(input())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(solution(X))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="book-solution">
 Book Solution
 &lt;a class="anchor" href="#book-solution">#&lt;/a>
&lt;/h3>
&lt;p>Bottom-Up&lt;/p></description></item><item><title/><link>https://yera10.github.io/docs/mystudy/algorithm-note/part2/8_%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/%EA%B0%9C%EB%AF%B8%EC%A0%84%EC%82%AC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part2/8_%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/%EA%B0%9C%EB%AF%B8%EC%A0%84%EC%82%AC/</guid><description>&lt;h1 id="개미전사">
 개미전사
 &lt;a class="anchor" href="#%ea%b0%9c%eb%af%b8%ec%a0%84%ec%82%ac">#&lt;/a>
&lt;/h1>
&lt;p>메뚜기 마을의 식량창고는 일직선상에 있음. &lt;br>
개미전사가 메뚜기의 식량창고를 선택적으로 약탈하여 식량을 뺏을 예정&lt;br>
하지만, 메뚜기들은 인접한 식량창고가 털리면 바로 알아챔. &lt;br>
고로, 최소 한 칸 이상 떨어진 식량창고를 약탈할 수 있음. &lt;br>
최대한 많이 얻을 수 있는 식량은?&lt;/p>
&lt;h3 id="input">
 INPUT
 &lt;a class="anchor" href="#input">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>첫째줄에 식량창고의 개수 N,&lt;/li>
&lt;li>3 &amp;lt;= N &amp;lt;= 100&lt;/li>
&lt;li>둘째줄에 공백으로 구분된 식량창고에 저장된 식량의 개수 K&lt;/li>
&lt;li>0 &amp;lt;= K &amp;lt;= 1000&lt;/li>
&lt;/ul>
&lt;h3 id="output">
 OUTPUT
 &lt;a class="anchor" href="#output">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>개미전사가 얻을 수 있는 식량의 최댓값&lt;/li>
&lt;/ul>
&lt;h3 id="example">
 Example
 &lt;a class="anchor" href="#example">#&lt;/a>
&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">입력&lt;/th>
 &lt;th style="text-align: left">출력&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">4&lt;!-- raw HTML omitted -->1 3 1 5&lt;/td>
 &lt;td style="text-align: left">8&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="my-solution">
 My Solution
 &lt;a class="anchor" href="#my-solution">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">solution&lt;/span>(N, arr):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp_arr &lt;span style="color:#f92672">=&lt;/span> arr[:&lt;span style="color:#ae81ff">2&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> [&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">*&lt;/span>(N&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">2&lt;/span>, N):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp_arr[i] &lt;span style="color:#f92672">=&lt;/span> max(dp_arr[i&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>], dp_arr[i&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> arr[i])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> dp_arr[&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># INPUT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>N &lt;span style="color:#f92672">=&lt;/span> int(input())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr &lt;span style="color:#f92672">=&lt;/span> list(map(int, input()&lt;span style="color:#f92672">.&lt;/span>split()))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># OUTPUT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(solution(N, arr))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://yera10.github.io/docs/mystudy/algorithm-note/part2/8_%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/%EB%B0%94%EB%8B%A5%EA%B3%B5%EC%82%AC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part2/8_%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/%EB%B0%94%EB%8B%A5%EA%B3%B5%EC%82%AC/</guid><description>&lt;h1 id="바닥공사">
 바닥공사
 &lt;a class="anchor" href="#%eb%b0%94%eb%8b%a5%ea%b3%b5%ec%82%ac">#&lt;/a>
&lt;/h1>
&lt;p>세로 x 가로가 2 x N인 바닥에 1x2 2x1 2x2 인 타일을 덮는 경우의 수 구하기&lt;/p>
&lt;h3 id="input">
 INPUT
 &lt;a class="anchor" href="#input">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>가로길이 N&lt;/li>
&lt;li>1 &amp;lt;= N &amp;lt;= 1,000&lt;/li>
&lt;/ul>
&lt;h3 id="output">
 OUTPUT
 &lt;a class="anchor" href="#output">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>바닥을 채우는 방법의 수를 796,796으로 나눈 나머지 구하기&lt;/li>
&lt;/ul>
&lt;h3 id="my-solution">
 My Solution
 &lt;a class="anchor" href="#my-solution">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>세로가 무조건 2니까 2x2 공간을 덮는 경우의 수는 3가지&lt;/li>
&lt;li>하지만 무조건 2칸으로 다 나눌 수는 없다! 개미전사 문제처럼 앞에서부터 한칸씩 풀면 될까?&lt;/li>
&lt;li>가로가 N일때 경우의 수는 (N-1일 때 방법의 수) + (N-2일 때 방법의 수)*2&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">solution&lt;/span>(N):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">*&lt;/span>N
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">2&lt;/span>, N):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr[i] &lt;span style="color:#f92672">=&lt;/span> (arr[i&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">*&lt;/span>arr[i&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>]) &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">796796&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> arr[&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># INPUT &amp;amp; OUTPUT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>N &lt;span style="color:#f92672">=&lt;/span> int(input())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(solution(N))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://yera10.github.io/docs/mystudy/algorithm-note/part2/8_%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8%ED%99%94%ED%8F%90%EA%B5%AC%EC%84%B1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/part2/8_%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8%ED%99%94%ED%8F%90%EA%B5%AC%EC%84%B1/</guid><description>&lt;h1 id="효율적인-화폐-구성">
 효율적인 화폐 구성
 &lt;a class="anchor" href="#%ed%9a%a8%ec%9c%a8%ec%a0%81%ec%9d%b8-%ed%99%94%ed%8f%90-%ea%b5%ac%ec%84%b1">#&lt;/a>
&lt;/h1>
&lt;p>N가지 종류의 화폐로 최소한의 갯수를 사용해서 M원 만들기.&lt;/p>
&lt;h3 id="input">
 INPUT
 &lt;a class="anchor" href="#input">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>화폐의 종류 수 N&lt;/li>
&lt;li>1 &amp;lt;= N &amp;lt;= 100&lt;/li>
&lt;li>만들려는 목표 금액 M&lt;/li>
&lt;li>1 &amp;lt;= M &amp;lt;= 10,000&lt;/li>
&lt;/ul>
&lt;h3 id="output">
 OUTPUT
 &lt;a class="anchor" href="#output">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>M원을 만들기 위한 최소한의 화폐 개수&lt;/li>
&lt;li>불가능할 때는 -1&lt;/li>
&lt;/ul>
&lt;h3 id="my-solution">
 My Solution
 &lt;a class="anchor" href="#my-solution">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">solution&lt;/span>(M, coins):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> d &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> [&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">10000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">1&lt;/span>, M&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dmin &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10001&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> c &lt;span style="color:#f92672">in&lt;/span> coins:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> i&lt;span style="color:#f92672">-&lt;/span>c &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">and&lt;/span> d[i&lt;span style="color:#f92672">-&lt;/span>c] &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dmin &lt;span style="color:#f92672">=&lt;/span> min(dmin, d[i&lt;span style="color:#f92672">-&lt;/span>c])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dmin &lt;span style="color:#f92672">=&lt;/span> dmin &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> dmin&lt;span style="color:#f92672">!=&lt;/span>&lt;span style="color:#ae81ff">10001&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> d[i] &lt;span style="color:#f92672">=&lt;/span> dmin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> d[M]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># INPUT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>N, M &lt;span style="color:#f92672">=&lt;/span> map(int, input()&lt;span style="color:#f92672">.&lt;/span>split())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>coins &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(N):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> coins&lt;span style="color:#f92672">.&lt;/span>append(int(input()))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># OUTPUT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(solution(M, coins))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>