<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>알고리즘 on 이세상의 모든 노트</title><link>https://yera10.github.io/docs/mystudy/algorithm-note/</link><description>Recent content in 알고리즘 on 이세상의 모든 노트</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://yera10.github.io/docs/mystudy/algorithm-note/index.xml" rel="self" type="application/rss+xml"/><item><title>데이터 구조</title><link>https://yera10.github.io/docs/mystudy/algorithm-note/data_structure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/data_structure/</guid><description>데이터 구조 생각해보기 # 전화번호부 정보는 어떻게 저장하면 좋을까? 은행 번호표 정보는 어떻게 처리하면 좋을까? 서적 정보는 어떻게 관리하면 좋을까? 창고에 쌓인 수화물의 위치를 역순으로 찾을 땐? Python의 기본 데이터 구조 # 스택 &amp;amp; 큐 튜플 &amp;amp; 집합 사전 (dict) collections 모듈 Stack (스택) # 나중에 넣은 데이터를 먼저 반환하도록 설계된 메모리 구조 Last In First Out (LIFO) - 리포구조 Data 입력을 push, 출력을 pop이라고 함 collections 모듈에서 deque 사용 예제 : 입력된 문자열을 역순으로 출력 Queue (큐) # 먼저 넣은 데이터를 먼저 반환하도록 설계된 메모리 구조 First In First Out (FIFO) - 피포구조 Stack과 반대되는 개념 Tuple (튜플) # 값의 변경이 불가능한 리스트 선언시 &amp;ldquo;[ ]&amp;rdquo; 가 아닌 &amp;ldquo;( )&amp;ldquo;를 사용 프로그램이 작동하는 동안 변경되지 않는 데이터 저장할 때 사용</description></item><item><title>소수 관련 코드</title><link>https://yera10.github.io/docs/mystudy/algorithm-note/prime_number_code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/prime_number_code/</guid><description> 소수 여부 확인 # def is_prime(n): if n==1: return False for d in range(2, int(n**0.5)+1): if n%d==0: return False return True 약수 구하기 # def solution(n): answer = set() for d in range(1, int(n**0.5)+1): if n%d==0: answer.add(d) answer.add(n//d) return sorted(list(answer)) 최대공약수와 최소공배수 # math 사용 import math math.gcd(a, b) # 최대공약수 math.lcm(a, b) # 최소공배수 직접 구현 # 자연수 a, b의 최대공약수 구하는 함수 def gcd(a, b): if b==0: return a else: return gcd(b, a%b) # 자연수 a, b의 최소공배수 구하는 함수 def lcm(a, b): return a*b//gcd(a,b)</description></item></channel></rss>