<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>이세상의 모든 노트</title><link>https://yera10.github.io/docs/mystudy/algorithm-note/</link><description>Recent content on 이세상의 모든 노트</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://yera10.github.io/docs/mystudy/algorithm-note/index.xml" rel="self" type="application/rss+xml"/><item><title>소수 관련 코드</title><link>https://yera10.github.io/docs/mystudy/algorithm-note/prime_number_code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yera10.github.io/docs/mystudy/algorithm-note/prime_number_code/</guid><description> 소수 여부 확인 # def is_prime(n): if n==1: return False for d in range(2, int(n**0.5)+1): if n%d==0: return False return True 약수 구하기 # def solution(n): answer = set() for d in range(1, int(n**0.5)+1): if n%d==0: answer.add(d) answer.add(n//d) return sorted(list(answer)) 최대공약수와 최소공배수 # math 사용 import math math.gcd(a, b) # 최대공약수 math.lcm(a, b) # 최소공배수 직접 구현 # 자연수 a, b의 최대공약수 구하는 함수 def gcd(a, b): if b==0: return a else: return gcd(b, a%b) # 자연수 a, b의 최소공배수 구하는 함수 def lcm(a, b): return a*b//gcd(a,b)</description></item></channel></rss>